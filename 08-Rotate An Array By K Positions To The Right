//Method 1

class Solution {
    public void rotate(int[] arr, int k) {
        k = k % arr.length;
        while (k-- > 0) {
            rightRotateBy1(arr);
        }
    }

    private void rightRotateBy1(int[] arr) {
        int temp = arr[arr.length - 1];
        System.arraycopy(arr, 0, arr, 1, arr.length - 1);
        arr[0] = temp;
    }
}


//Method 2

class Solution {
    public void rotate(int[] arr, int k) {
        k = k % arr.length;
        int[] temp = new int[k];

        System.arraycopy(arr, arr.length - k, temp, 0, k);
        System.arraycopy(arr, 0, arr, k, arr.length - k);
        System.arraycopy(temp, 0, arr, 0, temp.length);
    }
}


//Method 3

class Solution {
    public void rotate(int[] arr, int k) {
        k = k % arr.length;
        int[] twice = new int[2 * arr.length];

        for (int i = 0; i < arr.length; i++) {
            twice[i] = arr[i];
            twice[arr.length + i] = arr[i];
        }

        System.arraycopy(twice, arr.length - k, arr, 0, arr.length);
    }
}


//Method 4 (Reversal Algorithm)

class Solution {
    public void rotate(int[] arr, int k) {
        k = k % arr.length;

        reverseArray(arr, 0, arr.length - 1);
        reverseArray(arr, k, arr.length - 1);
        reverseArray(arr, 0, k - 1);
    }

    private void reverseArray(int[] arr, int start, int end) {
        while (start < end) {
            swap(arr, start++, end--);
        }
    }

    private void swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}


//Method 5 (Juggling Algorithm)

class Solution {
    public void rotate(int[] arr, int k) {
        k = k % arr.length; // In case the rotating factor is greater than array length
        int cycles = gcd(arr.length, k);

        for (int i = 0; i < cycles; i++) {
            int currentIndex = (arr.length - 1 - i);
            int temp = arr[arr.length - 1 - i];

            while (true) {
                int nextIndex = (currentIndex - k + arr.length) % arr.length;

                if (nextIndex == (arr.length - 1 - i)) {
                    arr[currentIndex] = temp;
                    break;
                } else {
                    arr[currentIndex] = arr[nextIndex];
                    currentIndex = nextIndex;
                }
            }
        }
    }

    private int gcd(int divisor, int dividend) {
        int remainder = dividend % divisor;
        if (remainder == 0) {
            return divisor;
        }

        return gcd(remainder, divisor);
    }
}
