//Bruteforce Approach

class Solution {
    public int cutRod(int price[], int n) {
        return cutRod(1, price, n);
    }

    private int cutRod(int pieceLength, int[] price, int remainingLength) {
        // Base case: If no more length is remaining, no revenue can be made
        if (remainingLength == 0) {
            return 0;
        }

        /*
         * Base case: If we've exhausted all possible piece lengths but still have some
         * length of rod remaining, return a negative value (Integer.MIN_VALUE) to
         * indicate that no valid cut can be made to use up the remaining length.
         */
        if (pieceLength == (price.length + 1)) {
            return Integer.MIN_VALUE;
        }

        // Option 1: Exclude the current piece length and move to the next piece length
        int exclude = cutRod(pieceLength + 1, price, remainingLength);
        int include = Integer.MIN_VALUE;

        if (remainingLength >= pieceLength) {
            /*
             * Option 2: Include the current piece length if it fits into the remaining rod
             * length. Recursively attempt to cut the rod again using the same piece length
             * to maximize the total value.
             */
            include = cutRod(pieceLength, price, remainingLength - pieceLength);
            if (include != Integer.MIN_VALUE) {
                include += price[pieceLength - 1]; // If it's possible to include the current piece, add its value to the total
            }
        }
        // Return the maximum value between including and excluding the current piece length
        return Math.max(include, exclude);
    }
}


//Better Approach

class Solution {
    private int[][] memo;

    public int cutRod(int price[], int n) {
        memo = new int[price.length + 1][n + 1];
        intializeMemo();
        return cutRod(1, price, n);
    }

    private int cutRod(int pieceLength, int[] price, int remainingLength) {
        if (remainingLength == 0) {
            return 0;
        }

        if (pieceLength > price.length) {
            return Integer.MIN_VALUE;
        }

        if (memo[pieceLength][remainingLength] != -1) {
            return memo[pieceLength][remainingLength];
        }

        int exclude = cutRod(pieceLength + 1, price, remainingLength);
        int include = Integer.MIN_VALUE;

        if (remainingLength >= pieceLength) {
            include = cutRod(pieceLength, price, remainingLength - pieceLength);
            if (include != Integer.MIN_VALUE) {
                include += price[pieceLength - 1];
            }
        }

        return memo[pieceLength][remainingLength] = Math.max(include, exclude);
    }

    private void intializeMemo() {
        for (int i = 0; i < memo.length; i++) {
            Arrays.fill(memo[i], -1);
        }
    }
}


//Optimal Approach

//Naive Implementation 

class Solution {
    public int cutRod(int price[], int n) {
        /*
         * dp[i][j] typically represents the maximum revenue that can be obtained by
         * cutting a rod of length j using the first i piece lengths available (i.e.,
         * considering piece lengths from 1 to i).
         */
        int[][] dp = new int[price.length + 1][n + 1];

        // Base case: If the remaining rod length is zero, no revenue can be obtained.
        for (int i = 0; i <= price.length; i++) {
            dp[i][0] = 0;
        }

        /*
         * Base case: If all possible piece lengths have been considered and there is
         * still remaining rod length, return a negative value (Integer.MIN_VALUE) to
         * indicate that no valid cuts can be made to utilize the remaining length.
         */
        for (int i = 1; i <= n; i++) {
            dp[0][i] = Integer.MIN_VALUE;
        }

        for (int i = 1; i <= price.length; i++) {
            for (int j = 1; j <= n; j++) {
                int exclude = dp[i - 1][j];
                int include = Integer.MIN_VALUE;
                if (j >= i) {
                    include = dp[i][j - i];
                    if (include != Integer.MIN_VALUE) {
                        include += price[i - 1];
                    }
                }

                dp[i][j] = Math.max(include, exclude);
            }
        }

        return dp[price.length][n];
    }
}


//Optimal Implementation

class Solution {
    public int cutRod(int price[], int n) {
        int[][] dp = new int[price.length + 1][n + 1];

        for (int i = 1; i <= n; i++) {
            dp[0][i] = Integer.MIN_VALUE;
        }

        for (int i = 1; i <= price.length; i++) {
            for (int j = 1; j <= n; j++) {
                dp[i][j] = dp[i - 1][j];
                if (j >= i) {
                    if (dp[i][j - i] != Integer.MIN_VALUE) {
                        dp[i][j] = Math.max(dp[i][j], dp[i][j - i] + price[i - 1]);
                    }
                }
            }
        }

        return dp[price.length][n];
    }
}


//Aliter (space optimised)

class Solution {
    public int cutRod(int price[], int n) {
        int[] previousRow = new int[n + 1];
        int[] currentRow = new int[n + 1];

        for (int i = 1; i <= n; i++) {
            previousRow[i] = Integer.MIN_VALUE;
        }

        for (int i = 1; i <= price.length; i++) {
            for (int j = 1; j <= n; j++) {
                currentRow[j] = previousRow[j];
                if (j >= i) {
                    if (currentRow[j - i] != Integer.MIN_VALUE) {
                        currentRow[j] = Math.max(currentRow[j], currentRow[j - i] + price[i - 1]);
                    }
                }
            }
            int[] temp = currentRow;
            currentRow = previousRow;
            previousRow = temp;
        }

        return previousRow[n];
    }
}


//Aliter (further space optimised)

class Solution {
    public int cutRod(int price[], int n) {
        int[] dp = new int[n + 1];

        for (int i = 1; i <= n; i++) {
            dp[i] = Integer.MIN_VALUE;
        }

        for (int i = 1; i <= price.length; i++) {
            for (int j = 1; j <= n; j++) {
                if (j >= i) {
                    if (dp[j - i] != Integer.MIN_VALUE) {
                        dp[j] = Math.max(dp[j], dp[j - i] + price[i - 1]);
                    }
                }
            }
        }

        return dp[n];
    }
}
