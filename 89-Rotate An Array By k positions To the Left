//Method 1

class Solution {
    static void rotateArr(int arr[], int k, int n) {
        k = k % n;
        for (int i = 1; i <= k; i++) {
            leftRotateBy1(arr, n);
        }
    }

    public static void leftRotateBy1(int[] arr, int n) {
        int temp = arr[0];
        System.arraycopy(arr, 1, arr, 0, n - 1);
        arr[n - 1] = temp;
    }
}


//Method 2

class Solution {
    static void rotateArr(int arr[], int k, int n) {
        k = k % n;
        int[] temp = new int[k];
        
        System.arraycopy(arr,0,temp,0,k);
        System.arraycopy(arr,k,arr,0,n-k);
        System.arraycopy(temp,0,arr,n-k,temp.length);
    }
}


//Method 3

class Solution {
    static void rotateArr(int arr[], int k, int n) {
        k = k % n;
        int[] twice = new int[2 * n];

        for (int i = 0; i < n; i++) {
            twice[i] = arr[i];
            twice[n + i] = arr[i];
        }

        for (int i = 0; i < n; i++) {
            arr[i] = twice[k + i];
        }
    }
}


//Method 4 (Reversal algorithm for array rotation)

class Solution{
    static void rotateArr(int arr[], int k, int n){
        k=k%n; // in case the rotating factor is greater than array length
        reverseArray(arr, 0, k-1);
        reverseArray(arr, k, n-1);
        reverseArray(arr, 0,n-1);
    }
    
    public static void reverseArray(int[]arr, int start, int end){
        while (start < end){
            swap(arr,start++,end--);
        }
    }
    
    public static void swap(int[]arr,int i,int j){
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}


//Method 5 (Juggling algorithm for array rotation) (Best Explanation : https://www.youtube.com/watch?v=utE_1ppU5DY&t=24s)

class Solution {
    static void rotateArr(int arr[], int k, int n) {
        k = k % n; // in case the rotating factor is greater than array length
        int cycles = gcd(n, k);

        for (int i = 0; i < cycles; i++) {
            int j = i;
            int temp = arr[i];

            while (true) {
                int idx = (j + k) % n;
                if (idx == i) {
                    arr[j] = temp;
                    break;
                } else {
                    arr[j] = arr[idx];
                    j = idx;
                }
            }
        }
    }

    public static int gcd(int divisor, int dividend) {
        int rem = dividend % divisor;
        if (rem == 0) {
            return divisor;
        }
        return gcd(rem, divisor);
    }
}
