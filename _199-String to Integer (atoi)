//Itertive Approach

class Solution {
    public int myAtoi(String str) {
        int i = 0, sign = 1;
        double result = 0D;

        // Step 1: Ignore leading whitespaces
        while (i < str.length() && str.charAt(i) == ' ') {
            i++;
        }

        // Step 2: Check for sign
        if (i < str.length()) {
            if (str.charAt(i) == '-') {
                sign = -1;
                i++;
            } else if (str.charAt(i) == '+') {
                i++;
            }
        }

        // Step 3: Combine digits to form a number until the string is exhausted or a non-digit character is encountered
        while (i < str.length() && Character.isDigit(str.charAt(i))) {
            result = result * 10 + (str.charAt(i) - '0');
            i++;
        }

        result = result * sign;

        // Step 4: Handle overflow/underflow
        if (result >= Integer.MAX_VALUE) {
            return Integer.MAX_VALUE;
        }

        if (result <= Integer.MIN_VALUE) {
            return Integer.MIN_VALUE;
        }

        return (int) result;
    }
}


//Recursive Approach

