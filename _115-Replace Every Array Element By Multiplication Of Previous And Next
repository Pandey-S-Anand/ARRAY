//Bruteforce Approach

class Solution {
    public static void replace(int[] arr) {
        if (arr.length < 2) {
            return;
        }

        Pair[] aux = new Pair[arr.length];

        for (int i = 0; i < arr.length; i++) {
            aux[i] = new Pair();
            if (i == 0) {
                aux[i].previous = arr[i];
                aux[i].next = arr[i + 1];
            } else if (i == arr.length - 1) {
                aux[i].previous = arr[i - 1];
                aux[i].next = arr[i];
            } else {
                aux[i].previous = arr[i - 1];
                aux[i].next = arr[i + 1];
            }
        }

        for (int i = 0; i < arr.length; i++) {
            arr[i] = aux[i].previous * aux[i].next;
        }
    }

    static class Pair {
        private int previous;
        private int next;
    }
}


//Better Approach

class Solution {
    public static void replace(int[] arr) {
        if (arr.length < 2) {
            return;
        }

        int[] result = new int[arr.length];
        result[0] = arr[0] * arr[1];
        result[arr.length - 1] = arr[arr.length - 1] * arr[arr.length - 2];

        for (int i = 1; i < (arr.length - 1); i++) {
            result[i] = arr[i - 1] * arr[i + 1];
        }

        System.arraycopy(result, 0, arr, 0, arr.length);
    }
}


//Optimal Approach

class Solution {
    public static void replace(int[] arr) {
        if (arr.length < 2) {
            return;
        }

        int previous = arr[0];
        arr[0] = previous * arr[1];

        for (int i = 1; i < (arr.length - 1); i++) {
            int temp = arr[i];
            arr[i] = previous * arr[i + 1];
            previous = temp;
        }

        arr[arr.length - 1] = arr[arr.length - 1] * previous;
    }
}
