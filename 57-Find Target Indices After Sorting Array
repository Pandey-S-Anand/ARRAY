//Naive Approach

class Solution {
    public List<Integer> targetIndices(int[] arr, int target) {
        Arrays.sort(arr);
        int index = firstIndex(arr, target);

        if (index == -1) {
            return new ArrayList<>();
        }

        List<Integer> indexes = new ArrayList<>();
        while (index < arr.length && arr[index] == target) {
            indexes.add(index);
            index++;
        }

        return indexes;
    }

    public int firstIndex(int[] arr, int key) {
        int low = 0, high = arr.length - 1, first = -1;

        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (arr[mid] == key) {
                first = mid;
                high = mid - 1;
            } else if (key < arr[mid]) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }

        return first;
    }
}


//Optimal Approach

class Solution {
    public List<Integer> targetIndices(int[] arr, int target) {
        int countTarget = 0, countlessthanTarget = 0;
        List<Integer> indexes = new ArrayList<>();

        for (int num : arr) {
            if (num == target) {
                countTarget++;
            }

            if (num < target) {
                countlessthanTarget++;
            }
        }

        for (int i = 0; i < countTarget; i++) {
            indexes.add(countLessThanTarget + i);
        }

        return indexes;
    }
}
