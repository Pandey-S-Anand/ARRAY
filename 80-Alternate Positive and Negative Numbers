// Bruteforce Approach(Order of Appearence is Maintained)

class Solution {
    void rearrange(int arr[], int n) {
        List<Integer> positive = new ArrayList<>();
        List<Integer> negative = new ArrayList<>();

        for (int val : arr) {
            if (val >= 0) {
                positive.add(val);
            } else {
                negative.add(val);
            }
        }

        int i = 0, j = 0, k = 0, postiveSize = positive.size(), negativeSize = negative.size();

        while (j < postiveSize && k < negativeSize) {
            if ((i % 2) == 0) {
                arr[i++] = positive.get(j++);
            } else {
                arr[i++] = negative.get(k++);
            }
        }

        while (j < postiveSize) {
            arr[i++] = positive.get(j++);
        }

        while (k < negativeSize) {
            arr[i++] = negative.get(k++);
        }
    }
}


//ALITER

class Solution {
    void rearrange(int arr[], int n) {
        int count = 0;

        for (int val : arr) {
            if (val >= 0) {
                count++;
            }
        }

        int[] positive = new int[count];
        int[] negative = new int[n - count];
        int j = 0, k = 0;

        for (int val : arr) {
            if (val >= 0) {
                positive[j++] = val;
            } else {
                negative[k++] = val;
            }
        }

        int i = 0;
        j = 0;
        k = 0;

        while (j < count && k < (n - count)) {
            if ((i % 2) == 0) {
                arr[i++] = positive[j++];
            } else {
                arr[i++] = negative[k++];
            }
        }

        if (j < count) {
            System.arraycopy(positive, j, arr, i, count - j);
        }

        if (k < (n - count)) {
            System.arraycopy(negative, k, arr, i, n - count - k);
        }
    }
}

// Optimal Approach (Order of Appearence is Maintained)

/*
in rearranged array Positive elements are found at Even index(0,2,4,6,8..) and Negative Elements are found at odd index(1,3,5,7,9...)
The idea is to process array from left to right. While processing, find the first out of place element in the remaining unprocessed array.
An element is out of place if it is positive and at odd index (0 based index), or it is negative and at even index (0 based index) .
Once we find an out of place element, we find the first element after it with opposite sign. 
We right rotate the subarray between these two elements (including these two).
*/



class Solution {
    void rearrange(int arr[], int n) {
        int wrongIndex = -1;// No Wrong Index

        for (int i = 0; i < n; i++) {
            if (wrongIndex != -1) {
                if ((arr[wrongIndex] < 0 && arr[i] >= 0) || (arr[wrongIndex] >= 0 && arr[i] < 0)) {
                    rightRotate(arr, wrongIndex, i);
                    if ((i - wrongIndex) == 1) {
                        wrongIndex = -1;
                    } else {  //((i - wrongIndex)>= 2)
                        wrongIndex += 2;
                    }
                }
            }

            if (wrongIndex == -1) {
                if (((i % 2) == 0 && arr[i] < 0) || ((i % 2) == 1 && arr[i] >= 0)) {
                    wrongIndex = i;
                }
            }
        }
    }

    public void rightRotate(int[] arr, int wrongIndex, int index) {
        int temp = arr[index];
        for (int i = index; i > wrongIndex; i--) {
            arr[i] = arr[i - 1];
        }

        arr[wrongIndex] = temp;
    }
}



// Alternate Approach (Order of Appearence is not Maintained)

class Solution {
    void rearrange(int arr[], int n) {
        int i = 1, j = segregate(arr, n);

        while (i < j && j < n) {
            swap(arr, i, j);
            i += 2;
            j++;
        }
    }

    public int segregate(int[] arr, int n) {
        int negativeTracker = 0;
        for (int i = 0; i < n; i++) {
            if (arr[i] >= 0) {
                swap(arr, i, negativeTracker);
                negativeTracker++;
            }
        }

        return negativeTracker;
    }

    public void swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}
