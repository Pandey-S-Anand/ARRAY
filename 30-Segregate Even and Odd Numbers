//Bruteforce Approach

class Solution {
   public static void segregateEvenAndOdd(int[]arr){
       int n=arr.length;
       int k=0;
       int temp[]=new int[n];
       for(int i=0;i<n;i++)
          if((arr[i]%2)==0)
             temp[k++]=arr[i];
       
       for(int i=0;i<n;i++)
          if((arr[i]%2)==1)
             temp[k++]=arr[i];
             
       for(int i=0;i<n;i++)
         arr[i]=temp[i];
   }
}

//Better Approach

class Solution{
   public static void segregateEvenAndOdd(int[]arr){
      int n=arr.length,start=0,end=n-1;
      
      while(true)
      {
          while(start<n && (arr[start]%2)==0)
            start++;
            
          while(end>=0 && (arr[end]%2)!=0)
            end--;
            
           if(start<end)
           {
              swap(arr,start,end);
              start++;
              end--;
           }
           else
             break;
      }
   }

   public static void swap(int[]arr,int i,int j)
   {
      int temp=arr[i];
      arr[i]=arr[j];
      arr[j]=temp;
   }
   
}


//Optimal Approach

class Solution {
   public static void segregateEvenAndOdd(int[]arr){
       int n=arr.length,i=0,j=0;
       while(i<n)
         if((arr[i]%2)==0)
         {
            swap(arr,i,j);          
            i++;
            j++;
         }
         else
           i++;
   } 

   public static void swap(int[]arr,int i,int j)
   {
      int temp=arr[i];
      arr[i]=arr[j];
      arr[j]=temp;
   }
}
