class Solution {
    public List<List<Integer>> permute(int[] arr) {
     List<List<Integer>>res=new ArrayList<>();
      findAllPermutation(arr, 0, (arr.length-1),res);

     return res; 
    }

    private void findAllPermutation(int[]arr, int start, int end,List<List<Integer>>res)
    {
        if (start == end)
        {
          List<Integer>perm=new ArrayList<>();
          for (int num : arr)
            perm.add(num);

         res.add(perm);
        }
        else 
        {
          for (int i = start; i <= end; i++)
          {
            swap(arr, start, i);
            findAllPermutation(arr, start + 1, end,res);
            swap(arr, start, i);
          }
        }
    }

    public void swap(int[]arr, int i, int j)
    {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}
