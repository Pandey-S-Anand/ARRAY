//Bruteforce Approach

class Solution {
    public static long[] nextLargerElement(long[] arr, int n) {
        long[] nextLargerElement = new long[n];

        for (int i = 0; i < n; i++) {
            nextLargerElement[i] = nextGreaterValue(arr, n, i);
        }

        return nextLargerElement;
    }

    private static long nextGreaterValue(long[] arr, int n, int index) {
        for (int i = index + 1; i < n; i++) {
            if (arr[i] > arr[index]) {
                return arr[i];
            }
        }

        return -1;
    }
}


//Optimal Approach (Using Stack)

class Solution {
    public static long[] nextLargerElement(long[] arr, int n) {
        Deque<Long> stack = new ArrayDeque<>();
        long[] nextLargerElement = new long[n];

        for (int i = n - 1; i >= 0; i--) {
            while (!stack.isEmpty() && stack.peek() <= arr[i]) {
                stack.pop();
            }

            if (stack.isEmpty()) {
                nextLargerElement[i] = -1;
            } else {
                nextLargerElement[i] = stack.peek();
            }

            stack.push(arr[i]);
        }

        return nextLargerElement;
    }
}
