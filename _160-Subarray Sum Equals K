// Bruteforce Approach

class Solution {
    public int subarraySum(int[] arr, int k) {
        int n=arr.length,cnt=0,subSum;

        int[] prefixSum=new int[n];
       
        for(int i=0;i<n;i++)
          if(i==0)
            prefixSum[i]=arr[i];
          else
            prefixSum[i]=prefixSum[i-1]+arr[i];
       
        for(int i=0;i<n;i++)
          for(int j=i;j<n;j++)
          {
              if(i==0)
                subSum=prefixSum[j];
              else
                subSum=prefixSum[j]-prefixSum[i-1];
            
              if(subSum==k)
                cnt++;
          }
	     
        return cnt;  
    }
}



// Better Approach

class Solution {
    public int subarraySum(int[] arr, int k) {
        int n=arr.length,cnt=0,subSum;
      
        for(int i=0;i<n;i++)
        {
          subSum=0;
          for(int j=i;j<n;j++)
          {
            subSum+=arr[j];

            if(subSum==k)
              cnt++;
          }
        }
      return cnt;  
    }
}


//Optimal Approach

class Solution {
    public int subarraySum(int[] arr, int k) {
        int n=arr.length, cnt=0;
        HashMap<Integer,Integer>hm=new HashMap<>();

        int prefixSum=0;
        for(int i=0;i<n;i++)
        {
            prefixSum+=arr[i];

            if(prefixSum==k)
              cnt++;

            if(hm.containsKey(prefixSum-k))
              cnt+=hm.get(prefixSum-k);

            if(hm.containsKey(prefixSum))
              hm.put(prefixSum,hm.get(prefixSum)+1);
            else
              hm.put(prefixSum,1);
        }
      return cnt;   
    }
}
