//Bruteforce Approach

class Solution {
    public int[] twoRepeated(int arr[], int n) {
        Set<Integer> set = new HashSet<>();
        int[] repeated = new int[2];
        int idx = 0;

        for (int val : arr) {
            if (set.contains(val)) {
                repeated[idx++] = val;
                if (idx == 2) {
                    break;
                }
            } else {
                set.add(val);
            }
        }

        return repeated;
    }
}

//Aliter Implementation

class Solution {
    public int[] twoRepeated(int arr[], int n) {
        Set<Integer> set = new HashSet<>();
        int[] repeated = new int[2];
        int idx = 0;

        for (int val : arr) {
            if (!set.add(val)) {
                repeated[idx++] = val;
                if (idx == 2) {
                    break;
                }
            }
        }

        return repeated;
    }
}



//Better Approach

class Solution {
    public int[] twoRepeated(int arr[], int n) {
        int[] repeating = new int[2];
        int idx = 0;
        boolean[] visited = new boolean[n + 1];

        for (int i = 0; i < (n + 2); i++) {
            if (visited[arr[i]]) {
                repeating[idx++] = arr[i];
                if (idx == 2) {
                    break;
                }
            } else {
                visited[arr[i]] = true;
            }
        }

        return repeating;
    }
}


//Optimal Approach

class Solution {
    public int[] twoRepeated(int arr[], int n) {
        int[] repeating = new int[2];
        int idx = 0;

        for (int i = 0; i < (n + 2); i++) {
            int ele = Math.abs(arr[i]);

            if (arr[ele] < 0) {
                repeating[idx++] = ele;
                if (idx == 2) {
                    break;
                }
            } else {
                arr[ele] *= -1;
            }
        }
        return repeating;
    }
}
