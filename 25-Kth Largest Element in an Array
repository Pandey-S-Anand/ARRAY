//Bruteforce Approach :(Sort in Ascending Order using inbuilt Arrays.sort() method or using any Sorting Algorithm and return Kth Element From the Last)

class Solution {
    public int findKthLargest(int[] arr, int k) {
       Arrays.sort(arr);
       return arr[arr.length-k];
    }
}

//Better Approach: (Using Bubble Sort)(Idea : https://youtu.be/o4bAoo_gFBU)

class Solution {
    public int findKthLargest(int[] arr, int k) {
        for (int pass = 1; pass <= k; pass++) {
            boolean swap = false;

            for (int j = 0; j < (arr.length - pass); j++) {
                if (arr[j] > arr[j + 1]) {
                    swap = true;
                    // Swapping
                    int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }

            if (swap == false){
               break;
            }
        }

        return arr[arr.length - k];// Kth element from Last i.e Kth largest element in the Array
    }
}


//Good Approach

class Solution {
   public int findKthLargest(int[] arr, int k) {
      return quickSelect(arr,0,arr.length-1,k);  
   }

   public int quickSelect(int[]arr,int lb,int ub,int k){
      if(lb<ub){
          int index=partition(arr,lb,ub);
          
          if((arr.length-k)==index){
            return arr[arr.length-k];
          }else if((arr.length-k)<index){
            return quickSelect(arr,lb,index-1,k);
          }else{
            return quickSelect(arr,index+1,ub,k);
          }
      }
      //if(lb==ub)
      return arr[lb]; //return arr[ub];
   }
   
   
   public int partition(int[] arr,int lb,int ub){
     int i=lb,j=ub,pivot=arr[lb];
     
     while(true){
        while(i<arr.length && arr[i]<=pivot){
          i++;
        }
          
        while(j>=0 && arr[j]>pivot){
          j--;
        }
          
        if(i<j){ //Swap arr[i] and arr[j]
          swap(arr,i,j);
        }else{ //if i>j => Swap Pivot(i.e arr[lb]) and arr[j])
          swap(arr,lb,j);
          break;
        }
     }
     
     return j;  //index of pivot element    
   }
   
    
   public void swap(int[]arr,int i,int j){
       int temp=arr[i];
       arr[i]=arr[j];
       arr[j]=temp;
   }
}


//Optimal Approach 

// Method 1- Using MaxHeap

class Solution {
    public int findKthLargest(int[] arr, int k) {
      buildMaxHeap(arr,arr.length);

      for(int i=1;i<=(k-1);i++){
        arr[0]=arr[arr.length-i];
        heapify(arr,arr.length-i,0);
      }

      return arr[0];
    }
    
    void buildMaxHeap(int arr[], int n){
      for(int i=((n/2)-1);i>=0;i--){
        heapify(arr,n,i);
      }
    }
 
    //Heapify function to maintain MaxHeap property.
    void heapify(int arr[], int n, int i){
      int maxIdx=i,leftChildIdx=(2*i)+1,rightChildIdx=(2*i)+2;
      
      if(leftChildIdx<n && arr[maxIdx]<arr[leftChildIdx]){
        maxIdx=leftChildIdx;
      }

      if(rightChildIdx<n && arr[maxIdx]<arr[rightChildIdx]){
        maxIdx=rightChildIdx;
      }
        
      if(maxIdx!=i){
        swap(arr,i,maxIdx);
        heapify(arr,n,maxIdx);
      }
    }
    
    void swap(int[] arr,int i,int j){
        int temp=arr[i];
        arr[i]=arr[j];
        arr[j]=temp;  
    }
}


//Aliter

class Solution {
   public int findKthLargest(int[] arr, int k) {
       PriorityQueue<Integer>maxHeap=new PriorityQueue<>(new MaxHeapComparator());

       for(int i=0;i<arr.length;i++){
         maxHeap.add(arr[i]);
       }

       for(int cnt=1;cnt<=(k-1);cnt++){
         maxHeap.poll();
       }

       return maxHeap.poll();  
    }
}

class MaxHeapComparator implements Comparator<Integer>{
    public int compare(Integer num1,Integer num2){
       return num2.compareTo(num1);
    }
}


//Method 2 -Using MinHeap

/*
n=8;
k=3
       0 1 2 3 4 5 6 7
arr[]={1,2,3,4,5,6,7,8}

3 rd largest(position=6)(i.e 6=8-2 =(n-k)+1)) is 6th smallest

So if we delete elements from position : 1 to (n-k) (i.e 1 to 5 here) from the min heap then the ((n-k)+1)th position element (i.e here, 6) will be at position 1 in the array and it will be the 3rd largest/6th smallest element.
*/

class Solution {
    public int findKthLargest(int[] arr, int k) {
      buildMinHeap(arr);
      
      for(int i=1;i<=(arr.length-k);i++){
         arr[0]=arr[arr.length-i];
         heapify(arr,arr.length-i,0);
      }

      return arr[0];
    }
    
    void buildMinHeap(int arr[]){
      for(int i=((arr.length/2)-1);i>=0;i--){
        heapify(arr,arr.length,i);
      }
    }
 
    //Heapify function to maintain MinHeap property.
    void heapify(int arr[], int n, int i){
      int minIdx=i,leftChildIdx=(2*i)+1,rightChildIdx=(2*i)+2;
      
      if(leftChildIdx<n && arr[minIdx]>arr[leftChildIdx]){
        minIdx=leftChildIdx;
      }

      if(rightChildIdx<n && arr[minIdx]>arr[rightChildIdx])
        minIdx=rightChildIdx;
        
      if(minIdx!=i)
      {
        swap(arr,i,minIdx);
        heapify(arr,n,minIdx);
      }
    }
    
    void swap(int[] arr,int i,int j){
        int temp=arr[i];
        arr[i]=arr[j];
        arr[j]=temp;  
    }
}

//Aliter 

class Solution {
    public int findKthLargest(int[] arr, int k) {
       PriorityQueue<Integer>minHeap=new PriorityQueue<>();
       
       for(int i=0;i<arr.length;i++){
         minHeap.add(arr[i]);
       }

       for(int cnt=1;cnt<=(arr.length-k);cnt++){
         minHeap.poll();
       }

       return minHeap.poll();  
    }
}
