// Very similar to Q-102

//Bruteforce 

class Solution {
    public int[] rearrangeArray(int[] arr) {
       int n=arr.length;
	    
       int[] pos=new int[n/2];
       int[] neg=new int[n/2];
       
       int j=0,k=0;
           
       for(int i=0;i<n;i++)
         if(arr[i]>=0)
            pos[j++]=arr[i];
         else
            neg[k++]=arr[i];
            

        j=0;
        k=0;
        
        for(int i=0;i<n;i++)
          if((i%2)==0)
            arr[i]=pos[j++];
          else
            arr[i]=neg[k++];
        
         
      return arr;
    }
}



//Optimal Approach

class Solution {
    public int[] rearrangeArray(int[] arr) {
       int n=arr.length,wrongIndex = -1;//No Wrong Index
       
       for (int i=0;i<n;i++)
       {
          if(wrongIndex>=0)
            if((arr[wrongIndex]<0 && arr[i] >= 0) || (arr[wrongIndex]>= 0 && arr[i] < 0))
            {
              rightRotate(arr,wrongIndex,i);
              if((i - wrongIndex)==1)
                wrongIndex = -1;
              else //((i - wrongIndex)>= 2)
                wrongIndex+=2; 
            }
 
          if(wrongIndex==-1)
             if(((i%2)==0 && arr[i]< 0)|| ((i%2)==1 && arr[i]>=0))
                wrongIndex = i;
       } 

      return arr;
    }

    public static void rightRotate(int[]arr, int wrongIndex, int index)
    {
       int temp=arr[index];
       for(int i=index;i>wrongIndex;i--)
         arr[i]=arr[i-1];
	      
       arr[wrongIndex]=temp;
    }
}
