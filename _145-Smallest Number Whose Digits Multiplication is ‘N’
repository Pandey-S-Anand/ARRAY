//Bruteforce Approach

public class Solution {
    public static int smallestDigitMuliply(int n) {
      for(int num=1;num<Integer.MAX_VALUE;num++)
	     if(prodDigits(num)==n)
	       return num;
	       
	   return 0;  
    }

    public static int prodDigits(long num)
	  {
	    int prod=1;
	    while(num!=0)
	    {
	      prod*=(num%10);
	      num=num/10;
	    }

	    return prod;
	 }
}


//Optimal Approach


public class Solution {
    public static int smallestDigitMuliply(int n) {
      int res=0;
	    for(int i=9; i>=2; i--)
        while((n%i)==0)
	      {
	        res=(res*10)+i;
	        n=n/i;
	      }
		
      if(n==1)
        return reverse(res);
      else
        return 0;
    }

  	public static int reverse(int num)
    {
        int rev=0,last;
        while(num!=0)
        {
          last=(num%10);
          rev=rev*10+last; 
          num=num/10;
        }
		
      return rev;
    }
}
