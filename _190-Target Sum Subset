//Iterative Approach

//Method 1

//Naive Implementation

public class Solution {
    public static boolean subsetSumToK(int n, int k, int arr[]) {
        List<Integer> subsetSums = new ArrayList<>();
        subsetSums.add(0); // Start with the empty subset sum (i.e 0)

        for (int num : arr) {
            int currentSize = subsetSums.size();
            for (int i = 0; i < currentSize; i++) {
                int newSubsetSum = num + subsetSums.get(i);
                if (newSubsetSum == k) {
                    return true;
                }

                subsetSums.add(newSubsetSum);
            }
        }

        return false;
    }
}


//Better Implementation

public class Solution {
    public static boolean subsetSumToK(int n, int k, int arr[]) {
        List<Integer> subsetSums = new ArrayList<>();
        subsetSums.add(0); // Start with the empty subset sum (i.e 0)

        for (int num : arr) {
            int currentSize = subsetSums.size();
            for (int i = 0; i < currentSize; i++) {
                int newSubsetSum = num + subsetSums.get(i);
                if (newSubsetSum == k) {
                    return true;
                }
                if (newSubsetSum < k) {
                    subsetSums.add(newSubsetSum);
                }
            }
        }

        return false;
    }
}



//Optimal Implementation

public class Solution {
    public static boolean subsetSumToK(int n, int k, int arr[]) {
        List<Integer> subsetSums = new ArrayList<>();
        subsetSums.add(0); // Start with the empty subset sum (i.e 0)

        for (int num : arr) {
            int currentSize = subsetSums.size();
            for (int i = 0; i < currentSize; i++) {
                int newSubsetSum = num + subsetSums.get(i);
                if (newSubsetSum == k) {
                    return true;
                }
                if (!subsetSums.contains(newSubsetSum) && newSubsetSum < k) {
                    subsetSums.add(newSubsetSum);
                }
            }
        }

        return false;
    }
}



//Method 2

public class Solution {
    public static boolean subsetSumToK(int n, int k, int arr[]) {
        int totalSubsets = 1 << n; // x << y = x * 2^n

        for (int num = 0; num < totalSubsets; num++) {
            int newSubsetSum = 0;
            for (int i = 0; i < n; i++) {
                if ((num & (1 << i)) != 0) {
                    newSubsetSum += arr[i];

                    if (newSubsetSum > k) {
                        break;
                    }
                }
            }

            if (newSubsetSum == k) {
                return true;
            }
        }

        return false;
    }
}


//Method 3

//Intuitive Implementation

public class Solution {
    public static boolean subsetSumToK(int n, int k, int arr[]) {
        // dp[i][j] in indicating whether any subset of the subarray arr[0..i-1] sums to target 'j'
        boolean[][] dp = new boolean[n + 1][k + 1];

        dp[0][0] = true; // Base Case : A '0' size array will have an empty subset that sums to '0'
        /*
         * Note : dp[0][1...k] will contain 'false' because a '0' size array can only
         * have an empty subset (with sum 0) hence any sum in the range of [1, k]
         * is not acheiveable for a '0' size array.
         */
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= k; j++) {
                if (j == 0) {
                    dp[i][j] = true; // For any size subarray, there is always a empty subset that sums to '0'
                } else {
                    if (j >= arr[i - 1]) { // Make sure the current target (j) is greater than or equal to current element (arr[i-1])
                        /*
                         * Check if current target (j) can be acheived by including or exluding the
                         * current element(arr[i-1])
                         */
                        dp[i][j] = dp[i - 1][j] || dp[i - 1][j - arr[i - 1]]; // Include the current element
                    } else {
                        /*
                         * Only Choice : Exclude the current element because current element(arr[i-1])
                         * is greater than current target (j), if we include the current element
                         * (arr[i-1]) the current target (j) will become negative hence not acheiveable 
                         * because array contains only positive elements once the target becomes 
                         * negative it will stay negative.
                         */
                        dp[i][j] = dp[i - 1][j];
                    }
                }
            }
        }

        return dp[n][k]; // dp[n][k] will contain true if there exists a subset of arr[0..n-1] that sums to k, otherwise false
    }
}

//Optimal Approach

/*Intuition : Only current('i') and previous row('i-1') of martrix (dp[][]) is being used so instead of 'dp[][]'
we can create 2 1D arrays (boolean[] previousRow and boolean[] currentRow) representing previous and current row */

public class Solution {
    public static boolean subsetSumToK(int n, int k, int arr[]) {
        boolean[] previousRow = new boolean[k + 1];
        boolean[] currentRow = new boolean[k + 1];

        previousRow[0] = true;

        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= k; j++) {
                if (j == 0) {
                    currentRow[j] = true;
                } else {
                    if (j >= arr[i - 1]) {
                        currentRow[j] = previousRow[j] || previousRow[j - arr[i - 1]];
                    } else {
                        currentRow[j] = previousRow[j];
                    }
                }
            }
           
           /*
            After processing the current element(arr[i-1]), the currentRow becomes the previousRow for 
            the next iteration.
          */
            boolean[] temp = previousRow;
            previousRow = currentRow;
            currentRow = temp;
        }

        return previousRow[k];
    }
}


//Recursive Approach

//Method 1

public class Solution {
    public static boolean subsetSumToK(int n, int k, int arr[]) {
        return isTargetSumSubsetPresent(arr, 0, n, k);
    }

    private static boolean isTargetSumSubsetPresent(int[] arr, int index, int n, int targetSum) {
        // Base case: if targetSum is reduced to 0, we have found a subset with the desired sum
        if (targetSum == 0) {
            return true;
        }

        /*
         * Base case (index == n): if we have considered all elements and still unable
         * to find target sum subset
         * Early Termination (target < 0): Since the array contains only positive
         * integers, once the target becomes negative during the recursive exploration, 
         * it will always remain negative for that path. Hence, further exploration of 
         * that path won't yield a valid combination.
         */
        if (index == n || targetSum < 0) {
            return false;
        }

        // Include the current element and check if it leads to the target sum
        boolean include = isTargetSumSubsetPresent(arr, index + 1, n, targetSum - arr[index]);

        // Exclude the current element and check if it leads to the target sum
        boolean exclude = isTargetSumSubsetPresent(arr, index + 1, n, targetSum);

        // Return true if either including or excluding the current element yields the target sum
        return include || exclude;
    }
}


//Method 2

public class Solution {
    public static boolean subsetSumToK(int n, int k, int arr[]) {
        return isTargetSumSubsetPresent(arr, 0, n, k);
    }

    private static boolean isTargetSumSubsetPresent(int[] arr, int index, int n, int targetSum) {
        if (targetSum == 0) {
            return true;
        }

        if (targetSum < 0) {
            return false;
        }

        for (int i = index; i < n; i++) {
            if (isTargetSumSubsetPresent(arr, i + 1, n, targetSum - arr[i])) {
                return true;
            }
        }

        return false;
    }
}
