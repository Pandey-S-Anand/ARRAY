// Bruteforce Approach

class Solution {	
   public static int sumOfNonOverlapping(int[] arr1,int[] arr2,int n){
     int sum=0;
     for(int i=0;i<n;i++)
       if(linearSearch(arr2,n,arr1[i])==false)
	  sum+=arr1[i];
	     
     for(int i=0;i<n;i++)
       if(linearSearch(arr1,n,arr2[i])==false)
	  sum+=arr2[i];
	     
      return sum;
   }


   public static boolean linearSearch(int[]arr,int n,int key)
   {
      for(int i=0;i<n;i++)
        if(arr[i]==key)
          return true;
      return false;//key doesnot exists
   }
}


//Improved Approach

class Solution{
   public static int sumOfNonOverlapping(int[] arr1,int[] arr2,int n){
      int sum=0;
      HashSet<Integer>hs=new HashSet<>();
     
      for(int i=0;i<n;i++)
       if(linearSearch(arr2,n,arr1[i]))
         hs.add(arr1[i]);
       else
	 sum+=arr1[i];
	     
      for(int i=0;i<n;i++)
	if(hs.contains(arr2[i])==false)
	   sum+=arr2[i];

      return sum;
   }


   public static boolean linearSearch(int[]arr,int n,int key)
   {
      for(int i=0;i<n;i++)
        if(arr[i]==key)
          return true;
      return false;//key doesnot exists
   }
}

//Good Approach

class Solution {
   public static int sumOfNonOverlapping(int[] arr1,int[] arr2,int n){
     Arrays.sort(arr1);
     Arrays.sort(arr2);

     int sum=0;
     for(int i=0;i<n;i++)
       if(binarySearch(arr2,n,arr1[i])==false)
	   sum+=arr1[i];
	     
     for(int i=0;i<n;i++)
       if(binarySearch(arr1,n,arr2[i])==false)
	  sum+=arr2[i];
	     
      return sum;
   }


   public static boolean binarySearch(int[]arr,int n,int key)
   {
      int low=0,high=n-1;
      
      while(low<=high)
      {
        int mid=(low+high)/2;
        
        if(arr[mid]==key)
          return true;
        else if(key<arr[mid])
          high=mid-1;
        else
          low=mid+1;
      }
      
      return false;//key doesnot exists
   }
}


//Better Approach

class Solution{
   public static int sumOfNonOverlapping(int[] arr1,int[] arr2,int n){
     Arrays.sort(arr2);
     HashSet<Integer>hs=new HashSet<>();

     int sum=0;
     for(int i=0;i<n;i++)
       if(binarySearch(arr2,n,arr1[i]))
         hs.add(arr1[i]);
       else
	 sum+=arr1[i];
	     
     for(int i=0;i<n;i++)
       if(hs.contains(arr2[i])==false)
	  sum+=arr2[i];
	     
     return sum;
   }


   public static boolean binarySearch(int[]arr,int n,int key)
   {
      int low=0,high=n-1;
      
      while(low<=high)
      {
        int mid=(low+high)/2;
        
        if(arr[mid]==key)
          return true;
        else if(key<arr[mid])
          high=mid-1;
        else
          low=mid+1;
      }
      
      return false;//key doesnot exists
   }
}

//Optimal Approach(Time optimised)

class Solution {
   public static int sumOfNonOverlapping(int[] arr1,int[] arr2,int n){
     int sum=0;
     HashSet<Integer>hs=new HashSet<>();

     for(int val :arr1)
        hs.add(val);
	     
     for(int val :arr2)
       if(hs.contains(val))
         hs.remove(val);
       else
         hs.add(val);
         
     for(int key:hs)
        sum+=key;  
	     
     return sum;
   }
}


//Optimal Approach(Space optimised)

class Solution {
   public static int sumOfNonOverlapping(int[] arr1,int[] arr2,int n){
     Arrays.sort(arr1);
     Arrays.sort(arr2);
     
     int i=0,j=0,sum=0;
     
     while(i<n && j<n)
     {
       if(arr1[i]==arr2[j])
       {
           i++;
           j++;
       }
       else
       {
          int min=Math.min(arr1[i],arr2[j]);
          
          if(min==arr1[i])
            sum+=arr1[i++];
          else
            sum+=arr2[j++];       
       }
     }
     
     while(i<n)
      sum+=arr1[i++];
      
     while(j<n)
      sum+=arr2[j++];
      
     return sum;
   }
}
