//Iterative Approach

//Bruteforce Approach

class Solution {
    private static final long MOD = 1000000007L;

    long countStrings(int n) {
        long countValidNLengthBinaryStrings = 0;
        int totalNLengthBinaryStrings = 1 << n; // x<<y = x*2^n
        char[] currentBinaryString = new char[n];

        for (int num = 0; num < totalNLengthBinaryStrings; num++) {
            for (int i = 0; i < n; i++) {
                if ((num & (1 << i)) != 0) {
                    currentBinaryString[n - 1 - i] = '1';
                } else {
                    currentBinaryString[n - 1 - i] = '0';
                }
            }

            String nLengthBinaryString = new String(currentBinaryString);

            if (!nLengthBinaryString.contains("11")) {
                countValidNLengthBinaryStrings = (countValidNLengthBinaryStrings + 1) % MOD;
            }
        }

        return countValidNLengthBinaryStrings;
    }
}


//Optimal Approach




//Recursive Approach

//Naive Implementation

class Solution {
    private long countValidNLengthBinaryStrings = 0;
    private static final long MOD = 1000000007L;

    long countStrings(int n) {
        countAllValidNLengthBinaryStrings(new char[n], 0);
        return countValidNLengthBinaryStrings;
    }

    private void countAllValidNLengthBinaryStrings(char[] currentBinaryString, int index) {
        if (index == currentBinaryString.length) {
            countValidNLengthBinaryStrings = (countValidNLengthBinaryStrings + 1) % MOD;
            return;
        }

        currentBinaryString[index] = '0';
        countAllValidNLengthBinaryStrings(currentBinaryString, index + 1);

        if (index == 0 || index > 0 && currentBinaryString[index - 1] != '1') {
            currentBinaryString[index] = '1';
            countAllValidNLengthBinaryStrings(currentBinaryString, index + 1);
        }
    }
}


//Better Implementation

class Solution {
    private static final long MOD = 1000000007L;

    long countStrings(int n) {
        return countAllValidNLengthBinaryStrings(new char[n], 0);
    }

    private long countAllValidNLengthBinaryStrings(char[] currentBinaryString, int index) {
        if (index == currentBinaryString.length) {
            return 1L;
        }

        currentBinaryString[index] = '0';
        long count = countAllValidNLengthBinaryStrings(currentBinaryString, index + 1);

        if (index == 0 || index > 0 && currentBinaryString[index - 1] != '1') {
            currentBinaryString[index] = '1';
            count = (count + countAllValidNLengthBinaryStrings(currentBinaryString, index + 1)) % MOD;
        }

        return count;
    }
}


//Optimal Implementation

class Solution {
    private static final long MOD = 1000000007L;

    long countStrings(int n) {
        return countAllValidNLengthBinaryStrings(0, n, '0');
    }

    private long countAllValidNLengthBinaryStrings(int index, int n, char prevChar) {
        if (index == n) {
            return 1L;
        }

        long count = countAllValidNLengthBinaryStrings(index + 1, n, '0');

        if (prevChar != '1') {
            count = (count + countAllValidNLengthBinaryStrings(index + 1, n, '1')) % MOD;
        }

        return count;
    }
}

//Aliter

class Solution {
    private static final long MOD = 1000000007L;

    long countStrings(int n) {
        return countAllValidNLengthBinaryStrings(0, n, false);
    }

    private long countAllValidNLengthBinaryStrings(int index, int n, boolean isPrevious1) {
        if (index == n) {
            return 1L;
        }

        long count = countAllValidNLengthBinaryStrings(index + 1, n, false);

        if (!isPrevious1) {
            count = (count + countAllValidNLengthBinaryStrings(index + 1, n, true)) % MOD;
        }

        return count;
    }
}
