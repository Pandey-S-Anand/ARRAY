//Method 1

class Solution {
    public List<Integer> findDuplicates(int[] arr) {
        List<Integer> duplicates = new ArrayList<>();

        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == -1) {
                continue;
            }

            for (int j = i + 1; j < arr.length; j++) {
                if (arr[i] == arr[j]) {
                    duplicates.add(arr[i]);
                    arr[j] = -1;
                    break;
                }
            }
        }

        return duplicates;
    }
}


//Method 2

class Solution {
    public List<Integer> findDuplicates(int[] arr) {
        List<Integer> duplicates = new ArrayList<>();
        Arrays.sort(arr);

        for (int i = 0; i < arr.length - 1; i++) {
            if (arr[i] == arr[i + 1]) {
                duplicates.add(arr[i]);
                i++;
            }
        }

        return duplicates;
    }
}


//Method 3

class Solution {
    public List<Integer> findDuplicates(int[] arr) {
        List<Integer> duplicates = new ArrayList<>();
        Set<Integer> unique = new HashSet<>();

        for (int num : arr) {
            if (unique.contains(num)) {
                duplicates.add(num);
            } else {
                unique.add(num);
            }
        }

        return duplicates;
    }
}


//Method 4

class Solution {
    public List<Integer> findDuplicates(int[] arr) {
        List<Integer> duplicates = new ArrayList<>();
        boolean[] visited = new boolean[arr.length + 1];

        for (int val : arr) {
            if (visited[val]) {
                duplicates.add(val);
            } else {
                visited[val] = true;
            }
        }

        return duplicates;
    }
}


//Method 5

class Solution {
    public List<Integer> findDuplicates(int[] arr) {
        List<Integer> duplicates = new ArrayList<>();

        for (int num : arr) {
            int value = Math.abs(num);

            if (arr[value - 1] < 0) {
                duplicates.add(value);
            } else {
                arr[value - 1] *= -1;
            }
        }

        return duplicates;
    }
}


//Method 6

class Solution {
    public List<Integer> findDuplicates(int[] arr) {
        int i = 0;
        List<Integer> duplicates = new ArrayList<>();

        while (i < arr.length) {
            int correctIndex = arr[i] - 1;

            if (arr[correctIndex] == arr[i]) {
                i++;
            } else { // if arr[i] is not at its correct index
                swap(arr, i, correctIndex);
            }
        }

        for (i = 0; i < arr.length; i++) {
            if (arr[i] != i + 1) {
                duplicates.add(arr[i]);
            }
        }

        return duplicates;
    }

    private void swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}
