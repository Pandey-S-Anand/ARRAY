//Bruteforce Approach

class Solution{
    static ArrayList<Integer> leaders(int arr[], int n){
	ArrayList<Integer>res=new ArrayList<>();
	    
        for(int i=0;i<(n-1);i++)
          if(arr[i]>=largestOnRight(arr,n,i))
             res.add(arr[i]);
            
        res.add(arr[n-1]);
        
        return res;
    }
    
    public static int largestOnRight(int[] arr,int n,int idx)
    {
       int max=Integer.MIN_VALUE;
       for(int i=idx+1;i<n;i++)
         if(arr[i]>max)
            max=arr[i];
	     
       return max;
    }
}



//Optimal Approach

class Solution{
  static ArrayList<Integer> leaders(int arr[], int n){
      int maxSoFar=-1;
      ArrayList<Integer>res=new ArrayList<>();
	    
      for(int i=(n-1);i>=0;i--)
        if(arr[i]>=maxSoFar)
        {
          res.add(arr[i]);
          maxSoFar=arr[i];  
        }
         
      Collections.reverse(res);
        
    return res;
  }
}
