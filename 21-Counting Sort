
/*
 Counting sort is efficient if the range of input data is not significantly greater than the number of objects to be sorted. 
 Consider the situation where the input sequence is between range 1 to 10K and the data is 10, 5, 10K, 5K. 
*/

//will only work for +ve integers
class Solution{
   public static void countingSort(int[]arr) { 
        int maxEle=getMax(arr);
        int[] count=new int[maxEle+1];
        int n=arr.length;
        int[] temp=new  int[n];
       
        for(int i=0;i<n;i++)
           count[arr[i]]++;
          
        for(int i=1;i<(maxEle+1);i++)
           count[i]+=count[i-1];
           
        for(int i=(n-1);i>=0;i--)
           temp[--count[arr[i]]]=arr[i];
          
        for(int i=0;i<n;i++)
           arr[i]=temp[i];
   }
   
   public static int getMax(int[] arr)
   {
      int n=arr.length,max=arr[0];
      for(int i=1;i<n;i++)
        if(arr[i]>max)
          max=arr[i];
      
      return max;
   }
}


// for characters

class Solution{
    public static String countSort(String str){
       char[] arr=str.toCharArray();
       
       int n=arr.length;
       
       int[] count=new int[26];
       
       for(int i=0;i<n;i++)
          count[arr[i]-'a']++;
          
       for(int i=1;i<26;i++)
          count[i]+=count[i-1];
       
       char[] temp=new char[n];
           
       for(int i=(n-1);i>=0;i--)
           temp[--count[arr[i]-'a']]=arr[i];
          
        for(int i=0;i<n;i++)
           arr[i]=temp[i];
        
        return new String(arr);
    }
}
