//Iterative Approach

//Method 1

//Naive Implementation

class Solution{
    private static final int MOD = 1000000007;

    public int perfectSum(int[] arr, int n, int targetSum) {
        int targetSumSubsetCount = 0;
        List<Integer> subsetSums = new ArrayList<>();
        subsetSums.add(0); // Start with the empty subset sum (i.e 0)

        for (int num : arr) {
            int currentSize = subsetSums.size();
            for (int i = 0; i < currentSize; i++) {
                int newSubsetSum = num + subsetSums.get(i);
                if (newSubsetSum == targetSum) {
                    targetSumSubsetCount = (targetSumSubsetCount + 1) % MOD;
                }

                subsetSums.add(newSubsetSum);
            }
        }

        return targetSumSubsetCount;
    }
}


//Optimal Implementation

class Solution{
    private static final int MOD = 1000000007;

    public int perfectSum(int[] arr, int n, int targetSum) {
        int targetSumSubsetCount = 0;
        List<Integer> subsetSums = new ArrayList<>();
        subsetSums.add(0); // Start with the empty subset sum (i.e 0)

        for (int num : arr) {
            int currentSize = subsetSums.size();
            for (int i = 0; i < currentSize; i++) {
                int newSubsetSum = num + subsetSums.get(i);
                if (newSubsetSum == targetSum) {
                    targetSumSubsetCount = (targetSumSubsetCount + 1) % MOD;
                }
                
                if (newSubsetSum <= targetSum) {
                    subsetSums.add(newSubsetSum);
                }
            }
        }

        return targetSumSubsetCount;
    }
}


//Method 2

class Solution{
    private static final int MOD = 1000000007;

    public int perfectSum(int[] arr, int n, int targetSum) {
        int targetSumSubsetCount = 0, totalSubsets = 1 << n; // x << y = x * 2^n

        for (int num = 0; num < totalSubsets; num++) {
            int newSubsetSum = 0;
            for (int i = 0; i < n; i++) {
                if ((num & (1 << i)) != 0) {
                    newSubsetSum += arr[i];

                    if (newSubsetSum > targetSum) {
                        break;
                    }
                }
            }

            if (newSubsetSum == targetSum) {
                targetSumSubsetCount = (targetSumSubsetCount + 1) % MOD;
            }
        }

        return targetSumSubsetCount;
    }
}


//Method 3

//Naive Implementation

class Solution{
    private static final int MOD = 1000000007;

    public int perfectSum(int[] arr, int n, int targetSum) {
        // dp[i][j] indicates the count of subsets of the subarray arr[0..i-1] that sum to target 'j'
        int[][] dp = new int[n + 1][targetSum + 1];

        dp[0][0] = 1; // Base Case: A '0' size array has one subset (the empty subset) that sums to '0'
        /*
         * Note: dp[0][1...targetSum] will contain 0 because a '0' size array can only
         * have an empty subset (with sum 0). Hence any sum in the range [1, targetSum]
         * is not achievable for a '0' size array.
         */
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= targetSum; j++) {
                if (j >= arr[i - 1]) { // Ensure the current target (j) is greater than or equal to the current element (arr[i-1])
                    /*
                     * Count the ways to achieve the target (j) by excluding or including the
                     * current element (arr[i-1]).
                     * If we include the current element, we look at the number of ways to form the
                     * remaining sum (j - arr[i-1]) using the subsets of the array arr[0...i-2].
                     * If we exclude the current element, we simply take the number of ways to
                     * form the sum 'j' using the subsets of the array arr[0...i-2].
                     * Note : index 'i' of dp[][] corresponds to index 'i-1' of the array
                     */
                    dp[i][j] = (dp[i - 1][j] + dp[i - 1][j - arr[i - 1]]) % MOD;
                } else {
                    /*
                     * Only Choice: Exclude the current element because the current element (arr[i-1])
                     * is greater than the current target (j). Including the current element would
                     * make the current target (j) negative, which is not achievable since the array
                     * contains only positive elements.
                     */
                    dp[i][j] = dp[i - 1][j];
                }
            }
        }

        return dp[n][targetSum]; // dp[n][targetSum] will contain the count of subsets of arr[0..n-1] that sum to k
    }
}


//Optimal Implementation (Space optimised implementation)

class Solution{
    private static final int MOD = 1000000007;

    public int perfectSum(int[] arr, int n, int targetSum) {
        int[] previousRow = new int[targetSum + 1];
        int[] currentRow = new int[targetSum + 1];

        previousRow[0] = 1;

        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= targetSum; j++) {
                if (j >= arr[i - 1]) {
                    currentRow[j] = (previousRow[j] + previousRow[j - arr[i - 1]]) % MOD;
                } else {
                    currentRow[j] = previousRow[j];
                }
            }
            int[] temp = previousRow;
            previousRow = currentRow;
            currentRow = temp;
        }

        return previousRow[targetSum];
    }
}


//Recursive Approach

//Method 1

// Naive Implementation

class Solution {
    private static final int MOD = 1000000007;

    public int perfectSum(int[] arr, int n, int targetSum) {
        List<List<Integer>> subsets = new ArrayList<>();
        generateSubsets(arr, 0, n, new ArrayList<>(), subsets);
        int targetSumSubsetCount = 0;

        for (List<Integer> subset : subsets) {
            if (findSubsetSum(subset) == targetSum) {
                targetSumSubsetCount = (targetSumSubsetCount + 1) % MOD;
            }
        }

        return targetSumSubsetCount;
    }

    private void generateSubsets(int[] arr, int index, int n, List<Integer> currentSubset, List<List<Integer>> subsets) {
        subsets.add(new ArrayList<>(currentSubset));

        for (int i = index; i < n; i++) {
            currentSubset.add(arr[i]);
            generateSubsets(arr, i + 1, n, currentSubset, subsets);
            currentSubset.remove(currentSubset.size() - 1);
        }
    }

    private int findSubsetSum(List<Integer> subset) {
        int subsetSum = 0;
        for (int num : subset) {
            subsetSum += num;
        }

        return subsetSum;
    }
}


//Improved Implementation

class Solution {
    private static final int MOD = 1000000007;

    public int perfectSum(int[] arr, int n, int targetSum) {
        List<Integer> subsetsSum = new ArrayList<>();
        generateSubsetsSum(arr, 0, n, 0, subsetsSum);
        int targetSumSubsetCount = 0;

        for (int subsetSum : subsetsSum) {
            if (subsetSum == targetSum) {
                targetSumSubsetCount = (targetSumSubsetCount + 1) % MOD;
            }
        }

        return targetSumSubsetCount;
    }

    private void generateSubsetsSum(int[] arr, int index, int n, int currentSubsetSum, List<Integer> subsetsSum) {
        subsetsSum.add(currentSubsetSum);

        for (int i = index; i < n; i++) {
            currentSubsetSum += arr[i];
            generateSubsetsSum(arr, i + 1, n, currentSubsetSum, subsetsSum);
            currentSubsetSum -= arr[i];
        }
    }
}


//Better Implementation

class Solution {
    private static final int MOD = 1000000007;

    public int perfectSum(int[] arr, int n, int targetSum) {
        List<Integer> targetSumSubsets = new ArrayList<>();
        generateSubsetsSum(arr, 0, n, 0, targetSumSubsets, targetSum);

        return targetSumSubsets.size();
    }

    private void generateSubsetsSum(int[] arr, int index, int n, int currentSubsetSum, List<Integer> targetSumSubsets, int targetSum) {
        if (currentSubsetSum == targetSum) {
            targetSumSubsets.add(currentSubsetSum);
        }

        for (int i = index; i < n; i++) {
            generateSubsetsSum(arr, i + 1, n, currentSubsetSum + arr[i], targetSumSubsets, targetSum);
        }
    }
}


//Further Optimised

class Solution {
    private static final int MOD = 1000000007;

    public int perfectSum(int[] arr, int n, int targetSum) {
        List<Integer> targetSumSubsets = new ArrayList<>();
        generateSubsetsSum(arr, 0, n, 0, targetSumSubsets, targetSum);

        return targetSumSubsets.size();
    }

    private void generateSubsetsSum(int[] arr, int index, int n, int currentSubsetSum, List<Integer> targetSumSubsets, int targetSum) {
        if (currentSubsetSum == targetSum) {
            targetSumSubsets.add(currentSubsetSum);
        }

        if (currentSubsetSum > targetSum) {
            return;
        }

        for (int i = index; i < n; i++) {
            generateSubsetsSum(arr, i + 1, n, currentSubsetSum + arr[i], targetSumSubsets, targetSum);
        }
    }
}


//Optimal Implementation

class Solution {
    private static final int MOD = 1000000007;
    private int targetSumSubsetsCount = 0;

    public int perfectSum(int[] arr, int n, int targetSum) {
        generateSubsetsSum(arr, 0, n, 0, targetSum);
        return targetSumSubsetsCount;
    }

    private void generateSubsetsSum(int[] arr, int index, int n, int currentSubsetSum, int targetSum) {
        if (currentSubsetSum == targetSum) {
            targetSumSubsetsCount = (targetSumSubsetsCount + 1) % MOD;
        }

        if (currentSubsetSum > targetSum) {
            return;
        }

        for (int i = index; i < n; i++) {
            generateSubsetsSum(arr, i + 1, n, currentSubsetSum + arr[i], targetSum);
        }
    }
}



//Method 2

//Naive Approach

class Solution {
    private static final int MOD = 1000000007;

    public int perfectSum(int[] arr, int n, int targetSum) {
        List<List<Integer>> subsets = new ArrayList<>();
        generateSubsets(arr, 0, n, new ArrayList<>(), subsets);
        int targetSumSubsetCount = 0;

        for (List<Integer> subset : subsets) {
            if (findSubsetSum(subset) == targetSum) {
                targetSumSubsetCount = (targetSumSubsetCount + 1) % MOD;
            }
        }

        return targetSumSubsetCount;
    }

    private void generateSubsets(int[] arr, int index, int n, List<Integer> currentSubset, List<List<Integer>> subsets) {
        if (index == n) {
            subsets.add(new ArrayList<>(currentSubset));
            return;
        }

        currentSubset.add(arr[index]);
        generateSubsets(arr, index + 1, n, currentSubset, subsets);
        currentSubset.remove(currentSubset.size() - 1);
        generateSubsets(arr, index + 1, n, currentSubset, subsets);
    }

    private int findSubsetSum(List<Integer> subset) {
        int subsetSum = 0;
        for (int num : subset) {
            subsetSum += num;
        }

        return subsetSum;
    }
}


//Improved Approach

class Solution {
    private static final int MOD = 1000000007;

    public int perfectSum(int[] arr, int n, int targetSum) {
        List<Integer> subsetsSum = new ArrayList<>();
        generateSubsetsSum(arr, 0, n, 0, subsetsSum);
        int targetSumSubsetCount = 0;

        for (int subsetSum : subsetsSum) {
            if (subsetSum == targetSum) {
                targetSumSubsetCount = (targetSumSubsetCount + 1) % MOD;
            }
        }

        return targetSumSubsetCount;
    }

    private void generateSubsetsSum(int[] arr, int index, int n, int currentSubsetSum, List<Integer> subsetsSum) {
        if (index == n) {
            subsetsSum.add(currentSubsetSum);
            return;
        }

        currentSubsetSum += arr[index];
        generateSubsetsSum(arr, index + 1, n, currentSubsetSum, subsetsSum);
        currentSubsetSum -= arr[index];
        generateSubsetsSum(arr, index + 1, n, currentSubsetSum, subsetsSum);
    }

    private int findSubsetSum(List<Integer> subset) {
        int subsetSum = 0;
        for (int num : subset) {
            subsetSum += num;
        }

        return subsetSum;
    }
}


//Better Implementation

class Solution {
    private static final int MOD = 1000000007;

    public int perfectSum(int[] arr, int n, int targetSum) {
        List<Integer> targetSumSubsets = new ArrayList<>();
        generateTargetSumSubsets(arr, 0, n, 0, targetSumSubsets, targetSum);

        return targetSumSubsets.size();
    }

    private void generateTargetSumSubsets(int[] arr, int index, int n, int currentSubsetSum, List<Integer> targetSumSubsets, int targetSum) {
        if (index == n) {
            if (currentSubsetSum == targetSum) {
                targetSumSubsets.add(currentSubsetSum);
            }
            return;
        }

        generateTargetSumSubsets(arr, index + 1, n, currentSubsetSum + arr[index], targetSumSubsets, targetSum);
        generateTargetSumSubsets(arr, index + 1, n, currentSubsetSum, targetSumSubsets, targetSum);
    }
}


//Further Optimised

class Solution {
    private static final int MOD = 1000000007;

    public int perfectSum(int[] arr, int n, int targetSum) {
        List<Integer> targetSumSubsets = new ArrayList<>();
        generateTargetSumSubsets(arr, 0, n, 0, targetSumSubsets, targetSum);

        return targetSumSubsets.size();
    }

    private void generateTargetSumSubsets(int[] arr, int index, int n, int currentSubsetSum, List<Integer> targetSumSubsets, int targetSum) {
        if (index == n) {
            if (currentSubsetSum == targetSum) {
                targetSumSubsets.add(currentSubsetSum);
            }
            return;
        }

        if (currentSubsetSum > targetSum) {
            return;
        }

        generateTargetSumSubsets(arr, index + 1, n, currentSubsetSum + arr[index], targetSumSubsets, targetSum);
        generateTargetSumSubsets(arr, index + 1, n, currentSubsetSum, targetSumSubsets, targetSum);
    }
}


//Optimal Implementation

class Solution {
    private static final int MOD = 1000000007;
    private int targetSumSubsetCount = 0;

    public int perfectSum(int[] arr, int n, int targetSum) {
        countTargetSumSubsets(arr, 0, n, 0, targetSum);
        return targetSumSubsetCount;
    }

    private void countTargetSumSubsets(int[] arr, int index, int n, int currentSubsetSum, int targetSum) {
        if (index == n) {
            if (currentSubsetSum == targetSum) {
                targetSumSubsetCount = (targetSumSubsetCount + 1) % MOD;
            }
            return;
        }

        if (currentSubsetSum > targetSum) {
            return;
        }

        countTargetSumSubsets(arr, index + 1, n, currentSubsetSum + arr[index], targetSum);
        countTargetSumSubsets(arr, index + 1, n, currentSubsetSum, targetSum);
    }
}


//Aliter

class Solution {
    private static final int MOD = 1000000007;

    public int perfectSum(int[] arr, int n, int targetSum) {
        return countTargetSumSubsets(arr, 0, n, 0, targetSum);
    }

    private int countTargetSumSubsets(int[] arr, int index, int n, int currentSubsetSum, int targetSum) {
        if (index == n) {
            return (currentSubsetSum == targetSum) ? 1 : 0;
        }

        if (currentSubsetSum > targetSum) {
            return 0;
        }

        int include = countTargetSumSubsets(arr, index + 1, n, currentSubsetSum + arr[index], targetSum);

        int exclude = countTargetSumSubsets(arr, index + 1, n, currentSubsetSum, targetSum);

        return (include + exclude) % MOD;
    }
}



/*
  If you want to print all the target sum subsets or count target sum subsets the 
  following implementations wont give correct output if the given array contains '0' as element
  i.e it will only work if the array contains positive elements.

  Ex:

  For Input: 
  2 1
  1 0

  Your Code's output is: 
  1

  It's Correct output is: 
  2


//Implementation 1

class Solution {
    private static final int MOD = 1000000007;

    public int perfectSum(int[] arr, int n, int targetSum) {
        return generateSubsetsSum(arr, 0, 0,  targetSum);
    }

    private int generateSubsetsSum(int[] arr, int index, int currentSubsetSum, int targetSum) {
        if (currentSubsetSum == targetSum) {
           return 1;
        }

        if (currentSubsetSum > targetSum) {
            return 0;
        }
        
        int targetSumSubsetsCount=0;
        for (int i = index; i < arr.length; i++) {
            targetSumSubsetsCount = (targetSumSubsetsCount + generateSubsetsSum(arr, i + 1, currentSubsetSum + arr[i], targetSum))%MOD;
        }
        
        return targetSumSubsetsCount;
    }
}


//Implementation 2

public class Solution {
    private static final int MOD = 1000000007;

    public static int findWays(int arr[], int k) {
      return countSubsetsWithTargetSum(arr,0,k);
    }

    private static int countSubsetsWithTargetSum(int[] arr, int index,int targetSum) {
        if (targetSum == 0) {
            return 1;
        }

        if (index == arr.length || targetSum < 0) {
            return 0;
        }

        int includeCurrent = countSubsetsWithTargetSum(arr, index + 1, targetSum - arr[index]);
        int excludeCurrent = countSubsetsWithTargetSum(arr, index + 1, targetSum);

        return (includeCurrent + excludeCurrent) % MOD;
    }
}


//Implementation 3


public class Solution {
    private static final int MOD = 1000000007;

    public static int findWays(int arr[], int k) {
      return countSubsetsWithTargetSum(arr,0,k);
    }

    private static int countSubsetsWithTargetSum(int[] arr, int index,int targetSum) {
        if (targetSum == 0) {
            return 1;
        }

        if (targetSum < 0) {
            return 0;
        }
        
        int targetSumSubsetCount = 0;
        for (int i = index; i < arr.length; i++) {
          targetSumSubsetCount=(targetSumSubsetCount + countSubsetsWithTargetSum(arr, i + 1,targetSum - arr[i]))%MOD;
        }

        return targetSumSubsetCount;
    }
}

*/
