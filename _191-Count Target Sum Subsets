//Bruteforce Approach

/*
Important Testcases:
Ex: 1

arr = {0 ,0, 0, 0}
targetSum=0

Output  : 16

Ex: 2

arr= {0, 0, 1, 0, 1}
targetSum=0

Output  : 8
*/

class Solution {
    private static final int MOD = 1000000007;

    public int perfectSum(int arr[], int n, int targetSum) {
        List<Integer> subsetSums = new ArrayList<>();
        subsetSums.add(0); // Start with the empty subset sum (i.e 0)
        int targetSumSubsetCount = targetSum == 0 ? 1 : 0;

        for (int num : arr) {
            int currentSize = subsetSums.size();
            for (int i = 0; i < currentSize; i++) {
                int newSubsetSum = num + subsetSums.get(i);

                if (newSubsetSum == targetSum) {
                    targetSumSubsetCount = (targetSumSubsetCount + 1) % MOD;
                }

                if (newSubsetSum <= targetSum) {
                    subsetSums.add(newSubsetSum);
                }
            }
        }

        return targetSumSubsetCount;
    }
}


//Improved Approach

class Solution {
    private static final int MOD = 1000000007;

    public int perfectSum(int arr[], int n, int targetSum) {
        int targetSumSubsetCount = targetSum == 0 ? 1 : 0, newSubsetSum = 0, totalSubsets = 1 << arr.length;

        for (int num = 0; num < totalSubsets; num++) {
            for (int i = 0; i < arr.length; i++) {
                if ((num & (1 << i)) != 0) {
                    newSubsetSum += arr[i];

                    if (newSubsetSum > targetSum) {
                        break;
                    }
                }
            }

            if (newSubsetSum == targetSum) {
                targetSumSubsetCount = (targetSumSubsetCount + 1) % MOD;
            }

            newSubsetSum = 0;
        }

        return targetSumSubsetCount;
    }
}


//Good Approach

class Solution {
    private static final int MOD = 1000000007;

    public static int perfectSum(int arr[], int n, int targetSum) {
        return countSubsetsWithTargetSum(arr, 0, targetSum);
    }

    private static int countSubsetsWithTargetSum(int[] arr, int index, int targetSum) {
        if (index == arr.length) {
            return targetSum == 0 ? 1 : 0;
        }

        if (targetSum < 0) {
            return 0;
        }

        int include = countSubsetsWithTargetSum(arr, index + 1, targetSum - arr[index]) % MOD;
        int exclude = countSubsetsWithTargetSum(arr, index + 1, targetSum) % MOD;

        return (include + exclude) % MOD;
    }
}


//Aliter

class Solution {
    private static final int MOD = 1000000007;
    private static int targetSumSubsetsCount;

    public static int perfectSum(int arr[], int n, int targetSum) {
        targetSumSubsetsCount = 0;
        countSubsetsWithTargetSum(arr, 0, 0, targetSum);
        return targetSumSubsetsCount;
    }

    private static void countSubsetsWithTargetSum(int[] arr, int index, int currentSubsetSum, int targetSum) {
        if (currentSubsetSum == targetSum) {
            targetSumSubsetsCount = (targetSumSubsetsCount + 1) % MOD;
        }

        if (currentSubsetSum > targetSum) {
            return;
        }

        for (int i = index; i < arr.length; i++) {
            countSubsetsWithTargetSum(arr, i + 1, currentSubsetSum + arr[i], targetSum);
        }
    }
}


//Better Approach

class Solution {
    private static int[][] memo;
    private static final int MOD = 1000000007;

    public static int perfectSum(int arr[], int n, int targetSum) {
        memo = new int[arr.length][targetSum + 1];
        intializeMemo();
        return countSubsetsWithTargetSum(arr, 0, targetSum);
    }

    private static int countSubsetsWithTargetSum(int[] arr, int index, int targetSum) {
        if (index == arr.length) {
            return targetSum == 0 ? 1 : 0;
        }

        if (targetSum < 0) {
            return 0;
        }

        if (memo[index][targetSum] != -1) {
            return memo[index][targetSum];
        }

        int include = countSubsetsWithTargetSum(arr, index + 1, targetSum - arr[index]) % MOD;
        int exclude = countSubsetsWithTargetSum(arr, index + 1, targetSum) % MOD;

        return memo[index][targetSum] = (include + exclude) % MOD;
    }

    private static void intializeMemo() {
        for (int i = 0; i < memo.length; i++) {
            Arrays.fill(memo[i], -1);
        }
    }
}



//Optimal Approach

//Naive Implementation

class Solution {
    private static final int MOD = 1000000007;

    public static int perfectSum(int arr[], int n, int targetSum) {
        // dp[i][j] indicates the count of subsets of the subarray arr[0..i-1] that sum to target 'j'
        int[][] dp = new int[arr.length + 1][targetSum + 1];

        // There is one way to achieve a sum of 0 using an empty array, and that way is by selecting the empty subset.
        dp[0][0] = 1;

        // Filling the first column of the dp table for target sum = 0
        for (int i = 1; i <= arr.length; i++) {
            if (arr[i - 1] == 0) {
                /*
                 * When you encounter a zero in your array, you can either include it in your
                 * subset or not. However, excluding it doesn't help us achieve our goal of
                 * finding all possible subsets that lead to a sum of zero. Therefore, we will
                 * always include the zero in our considerations.
                 * Every time you include a zero, the target sum (which is zero in this case)
                 * remains zero because 0âˆ’0=0. This effectively doubles the number of subsets
                 * that sum to zero.
                 * 
                 * Ex:
                 * 
                 * arr[]={0,0}
                 * 
                 * dp[0][0] = 1: There is only one subset (the empty subset) that sums to zero
                 * for a zero-size array.
                 * dp[1][0] = 2: The empty subset and the first zero.
                 * dp[2][0] = 4: The empty subset, the first zero, the second zero, and both
                 * zeros together.
                 */
                dp[i][0] = 2 * dp[i - 1][0];
            } else {
                /*
                 * If the current element is non-zero, we can only form the sum 0
                 * using the previous states, i.e., we carry forward the count
                 */
                dp[i][0] = dp[i - 1][0];
            }
        }

        // If the array is empty , we cannot form any positive target sum
        for (int i = 1; i <= targetSum; i++) {
            dp[0][i] = 0;
        }

        for (int i = 1; i <= arr.length; i++) {
            for (int j = 1; j <= targetSum; j++) {
                if (j < arr[i - 1]) {
                    /*
                     * If the current element is greater than the target sum We cannot include this
                     * element because if we include the current element (arr[i-1]) the
                     * current target (j) will become negative hence not acheiveable
                     * because array contains only positive(including 0) elements once the 
                     * target becomes negative it will stay negative.
                     */
                    dp[i][j] = dp[i - 1][j];
                } else {
                    /*
                     * We can either exclude the current element or include it
                     * Count subsets that do not include the current element
                     * plus count subsets that include the current element
                     */
                    dp[i][j] = (dp[i - 1][j - arr[i - 1]] + dp[i - 1][j]) % MOD;
                }
            }
        }

        return dp[arr.length][targetSum]; // Return count of subsets that can form the target sum using all the elements
    }
}


//Optimal Implementation 

class Solution {
    private static final int MOD = 1000000007;

    public static int perfectSum(int arr[], int n, int targetSum) {
        int[][] dp = new int[arr.length + 1][targetSum + 1];

        dp[0][0] = 1;
        for (int i = 1; i <= arr.length; i++) {
            dp[i][0] = arr[i - 1] == 0 ? 2 * dp[i - 1][0] : dp[i - 1][0];
        }

        for (int i = 1; i <= arr.length; i++) {
            for (int j = 1; j <= targetSum; j++) {
                dp[i][j] = dp[i - 1][j];
                if (j >= arr[i - 1]) {
                    dp[i][j] = (dp[i][j] + dp[i - 1][j - arr[i - 1]]) % MOD;
                }
            }
        }

        return dp[arr.length][targetSum];
    }
}


//Aliter (Space optimised implementation)


class Solution {
    private static final int MOD = 1000000007;

    public static int perfectSum(int arr[], int n, int targetSum) {
        int[] previousRow = new int[targetSum + 1];
        int[] currentRow = new int[targetSum + 1];

        previousRow[0] = 1;

        for (int i = 1; i <= arr.length; i++) {
            currentRow[0] = arr[i - 1] == 0 ? 2 * previousRow[0] : previousRow[0];
            for (int j = 1; j <= targetSum; j++) {
                currentRow[j] = previousRow[j];
                if (j >= arr[i - 1]) {
                    currentRow[j] = (currentRow[j] + previousRow[j - arr[i - 1]]) % MOD;
                }
            }

            int[] temp = previousRow;
            previousRow = currentRow;
            currentRow = temp;
        }

        return previousRow[targetSum];
    }
}
