//Bruteforce Approach

class Solution{
  public static long[] prevGreater(long[] arr, int n){ 
    long[]res=new long[n];
	  res[0]=-1;
		
	  for(int i=1;i<n;i++)
	    res[i]=prevGreater(arr,n,i);
		
	  return res;
  }

	public static long prevGreater(long[]arr,int n,int idx )
	{
	  for(int i=idx-1;i>=0;i--)
	    if(arr[i]>arr[idx])
	      return arr[i];
	  return -1;	
	}
}


//Optimal Approach

class Solution{
   public static long[] prevGreater(long[] arr, int n){ 
     ArrayDeque<Long>stack=new ArrayDeque<>();
	   long[]res=new long[n];
		
	   for(int i=0;i<n;i++)
	   {
		   while(stack.size()!=0 && stack.peek()<=arr[i])
			  stack.pop();

		   if(stack.size()==0)
		    res[i]=-1;
		   else
		    res[i]=stack.peek();

		  stack.push(arr[i]);
	   }
		
	   return res;
   } 
}
