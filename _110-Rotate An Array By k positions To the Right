//Method 1

class Solution {
    public void rotate(int[] arr, int k) {
       int n=arr.length;
       k=k%n;
       for(int i=1;i<=k;i++)
         rightRotateBy1(arr,n);
    }
     
    public static void rightRotateBy1(int[] arr,int n)
    {
       int temp=arr[n-1];
       for(int j=(n-1);j>0;j--)
          arr[j]=arr[j-1];

       arr[0]=temp;
    }
}


//Method 2

class Solution {
    public void rotate(int[] arr, int k) {
      int n=arr.length;
      k=k%n;
      int[] temp=new int[k];

      for(int i=0;i<k;i++)
	temp[i]=arr[n-k+i];
	     
      for(int i=(n-1);i>=k;i--)
	arr[i]=arr[i-k];
	   
      for(int i=0;i<k;i++)
	arr[i]=temp[i];
    }
}


//Method 3

class Solution {
    public void rotate(int[] arr, int k) {
      int n=arr.length;
      k=k%n;
      int len=2*n;
      int[] twice=new int[len];

      for(int i=0;i<n;i++)
      {
         twice[i]=arr[i];
	 twice[n+i]=arr[i];
      }
      for(int i=0;i<n;i++)
	arr[i]=twice[len-n-k+i];
    }
}


//Method 4 (Reversal Algorithm)

class Solution {
    public void rotate(int[] arr, int k) {
      int n=arr.length;
      k=k%n;
      reverseArray(arr,0,n-1);
      reverseArray(arr,k,n-1);
      reverseArray(arr,0,k-1);
    }

    public static void reverseArray(int[]arr, int start, int end)
    {
       while (start < end)
       {
          swap(arr,start,end);
          start++;
          end--;
       }
    }
    
    public static void swap(int[]arr,int i,int j)
    {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}


//Method 5 (Juggling Algorithm)

class Solution {
    public void rotate(int[] arr, int k) {
      int n=arr.length;
      k=k%n;  //In case the rotating factor is greater than array length
      int numSets=gcd(n,k);
      for(int i=0;i<numSets;i++)
      {
          int j=(n-1-i);
          int temp=arr[n-1-i];
          while(true)
          {
              int idx=(j-k);
              if(idx<0)
                idx=n+idx;
                  
              if(idx==(n-1-i))
              {
                 arr[j]=temp;
                 break;
              }
              else
              {
                  arr[j]=arr[idx];
                  j=idx;
              }
          }
      }
    }

    public static int gcd(int divisor,int dividend)
    {
       int rem=dividend%divisor;
       if(rem==0)
	 return divisor;
	      
       return gcd(rem,divisor);      
    }
}
