//Bruteforce Approach

class Solution {
    public int[] productExceptSelf(int[] arr) {
        int n=arr.length, prod=1,cnt0=0;
        int[] res=new int[n];
	  
        int prodWithoutZero=1;   
	      for(int i=0;i<n;i++)
        {
          if(arr[i]!=0)
            prodWithoutZero*=arr[i];
          else
           cnt0++;
           
          prod*=arr[i];
        }

        for(int i=0;i<n;i++)
        {
          if(arr[i]!=0)
            res[i]=prod/arr[i];
          else //arr[i]==0
          {
            if(cnt0==1)
              res[i]=prodWithoutZero;
            else
              res[i]=prod; //or res[i]=0
          }   
        }
            
      return res;
    }
}


//Better Approach

//Intuitive Implementation

class Solution {
    public int[] productExceptSelf(int[] arr) {
        int n=arr.length;
        int[] prefixProd=new int[n];
        int[] suffixProd=new int[n];
        int[] res=new int[n];

        for(int i=0;i<n;i++)
        {
          if(i==0)
            prefixProd[0]=arr[0];
          else
            prefixProd[i]=prefixProd[i-1]*arr[i];
        }

        for(int i=n-1;i>=0;i--)
        {
          if(i==(n-1))
            suffixProd[n-1]=arr[n-1];
          else
            suffixProd[i]=suffixProd[i+1]*arr[i];
        }

        for(int i=0;i<n;i++)
        {
          if(i==0)
            res[0]=suffixProd[1];
          else if(i==(n-1))
            res[n-1]=prefixProd[n-2];
          else
            res[i]=prefixProd[i-1]*suffixProd[i+1];
        }

      return res;
    }
}


//Optimal Implementation

class Solution {
    public int[] productExceptSelf(int[] arr) {
        int n=arr.length;
        int[] prefixProd=new int[n];
        int[] suffixProd=new int[n];
        int[] res=new int[n];

        for(int i=0;i<n;i++)
          if(i==0)
          {
             prefixProd[0]=arr[0];
             suffixProd[n-1]=arr[n-1];
          }
          else
          {
            prefixProd[i]=prefixProd[i-1]*arr[i];
            suffixProd[n-1-i]=suffixProd[n-i]*arr[n-1-i];
          }

        for(int i=0;i<n;i++)
        {
          if(i==0)
            res[0]=suffixProd[1];
          else if(i==(n-1))
            res[n-1]=prefixProd[n-2];
          else
            res[i]=prefixProd[i-1]*suffixProd[i+1];
        }

      return res;
    }
}


//Optimal Approach

class Solution {
    public int[] productExceptSelf(int[] arr) {
      int n=arr.length;
      int[] res=new int[n];
      
      for(int i=0;i<n;i++)
      {
        if(i==0)
          res[i]=arr[i];
        else
          res[i]=res[i-1]*arr[i];
      }

      int prod=1;
      for(int i=n-1;i>=0;i--)
      {
        if(i==0)
          res[i]=prod;
        else if(i==(n-1))
          res[i]=res[i-1];
        else
          res[i]=res[i-1]*prod;
         
        prod*=arr[i];
      }

      return res;  
    }
}
