//Bruteforce Approach

class Solution {
    public int firstMissingPositive(int[] arr) {
       int n=arr.length,pos;
	   for(pos=1;pos<=(n+1);pos++)
	   {
	       int i;
	       for(i=0;i<n;i++)
	         if(arr[i]==pos)
	           break;
		   
	       if(i==n)
	         break;
	   }
	   return pos; 
    }
}


//Improved Approach

class Solution {
    public int firstMissingPositive(int[] arr) {
        Arrays.sort(arr);
	int n=removeDuplicates(arr);

	while(i<n && arr[i]<=0) //Skipping negative numbers
          i++;

        int i=0,pos=1;
					 
        while(i<n)
        {
            if(i<n && arr[i]==pos)
            {
              i++;
              pos++; 
            }
            else
              break;  
        }

	return pos;
    }

    public int removeDuplicates(int[]arr){
        int n=arr.length,idx=0;

	for(int i=0;i<(n-1);i++)
	   if(arr[i]!=arr[i+1])
	       arr[idx++]=arr[i];

	arr[idx++]=arr[n-1];

	return idx;
    }
}


//Good Approach

class Solution {
    public int firstMissingPositive(int[] arr) {
       int n=arr.length;
       HashSet<Integer>hs=new HashSet<>(n);
       
       for(int i=0;i<n;i++)
         hs.add(arr[i]);
       
       for(int pos=1;pos<=n;pos++)
          if(hs.contains(pos)==false)
             return pos; 
             
       return n+1; 
    }
}


//Better Approach

class Solution {
    public int firstMissingPositive(int[] arr) {
      int countNonPos=segPosAndNonPos(arr);
      return findMissing(arr,countNonPos);
    }

    public static int segPosAndNonPos(int[]arr)
    {
       int n=arr.length,j=0;
       for(int i=0;i<n;i++)
	 if(arr[i]<=0)
	 {
	    int temp=arr[i];
	    arr[i]=arr[j];
	    arr[j]=temp;
	    j++;
	 }
	     
	return j; 
     }
	
     public static int findMissing(int[]arr,int start)
     {
        int n=arr.length,size=n-start;
        boolean[]visited=new boolean[size];
           
        for(int i=start;i<n;i++)
        {
           int x=arr[i];
           if(x<=size && visited[x-1]==false)  //(visited[x-1]==false) is Optional Condition to handle duplicates
              visited[x-1] =true;
        }
        
        for(int i=0; i <size; i++)
          if(visited[i]==false)
            return i+1;
	  
        //if all indices are marked, then smallest missing positive number is array size + 1. 
        return size+1;
     }
}


//Optimal Approach

class Solution {
    public int firstMissingPositive(int[] arr) {
      int countNonPos=segPosAndNonPos(arr);
      return findMissing(arr,countNonPos);   
    }

    public static int segPosAndNonPos(int[]arr)
    {
	int n=arr.length,j=0;
	for(int i=0;i<n;i++)
	   if(arr[i]<=0)
	   {
	      int temp=arr[i];
	      arr[i]=arr[j];
	      arr[j]=temp;
	      j++;
	   }
	     
       return j; 
    }
	
    public static int findMissing(int[]arr,int start)
    {
        int n=arr.length,newSize=(n-start);

        for(int i=start;i<n;i++)
        {
            int x = Math.abs(arr[i]);
            if (x<=newSize && arr[start+(x-1)] > 0)
              arr[start+(x-1)] = -arr[start+(x-1)];
        }
        
        for (int i = start; i <n; i++)
          if (arr[i]>0)
             return ((i+1)-start); 
		
        return (newSize+1);
    }
}
