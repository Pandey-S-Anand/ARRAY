//Bruteforce Approach

class Solution {
    static int knapSack(int n, int capacity, int[] values, int[] weights) {
        return findMaxValue(weights, values, n, n - 1, capacity);
    }

    private static int findMaxValue(int[] weights, int[] values, int n, int index, int capacity) {
        if (capacity == 0 || index < 0) {
            return 0;
        }

        int exclude = findMaxValue(weights, values, n, index - 1, capacity);

        int include = Integer.MIN_VALUE;
        if (weights[index] <= capacity) {
            include = values[index] + findMaxValue(weights, values, n, index, capacity - weights[index]);
        }

        return Math.max(include, exclude);
    }
}


//Better Approach

class Solution {
    private static int[][] cache;

    static int knapSack(int n, int capacity, int[] values, int[] weights) {
        cache = new int[n][capacity + 1];
        intializeCache();
        return findMaxValue(weights, values, n, n - 1, capacity);
    }

    private static int findMaxValue(int[] weights, int[] values, int n, int index, int capacity) {
        if (capacity == 0 || index < 0) {
            return 0;
        }

        if (cache[index][capacity] != -1) {
            return cache[index][capacity];
        }

        int exclude = findMaxValue(weights, values, n, index - 1, capacity);

        int include = Integer.MIN_VALUE;
        if (weights[index] <= capacity) {
            include = values[index] + findMaxValue(weights, values, n, index, capacity - weights[index]);
        }

        return cache[index][capacity] = Math.max(include, exclude);
    }

    private static void intializeCache() {
        for (int i = 0; i < cache.length; i++) {
            Arrays.fill(cache[i], -1);
        }
    }
}


//Optimal Approach

//Naive Implementation

class Solution {
    static int knapSack(int n, int capacity, int[] values, int[] weights) {
        int[][] dp = new int[n + 1][capacity + 1];

        dp[0][0] = 0;

        for (int index = 1; index <= n; index++) {
            dp[index][0] = 0;
        }

        for (int cap = 1; cap <= capacity; cap++) {
            dp[0][cap] = 0;
        }

        for (int index = 1; index <= n; index++) {
            for (int cap = 1; cap <= capacity; cap++) {
                int exclude = dp[index - 1][cap];

                int include = Integer.MIN_VALUE;
                if (weights[index - 1] <= cap) {
                    include = values[index - 1] + dp[index][cap - weights[index - 1]];
                }

                dp[index][cap] = Math.max(include, exclude);
            }
        }

        return dp[n][capacity];
    }
}


//Optimal Implementation 

class Solution {
    static int knapSack(int n, int capacity, int[] values, int[] weights) {
        int[][] dp = new int[n + 1][capacity + 1];

        for (int index = 1; index <= n; index++) {
            for (int cap = 1; cap <= capacity; cap++) {
                int exclude = dp[index - 1][cap];

                int include = Integer.MIN_VALUE;
                if (weights[index - 1] <= cap) {
                    include = values[index - 1] + dp[index][cap - weights[index - 1]];
                }

                dp[index][cap] = Math.max(include, exclude);
            }
        }

        return dp[n][capacity];
    }
}


//Aliter (Space optmised)

class Solution {
    static int knapSack(int n, int capacity, int[] values, int[] weights) {
        int[] previousRow=new int[capacity+1];
        int[] currentRow=new int[capacity+1];
        
        for (int index = 1; index <= n; index++) {
            for (int cap = 1; cap <= capacity; cap++) {
                int exclude = previousRow[cap];

                int include = Integer.MIN_VALUE;
                if (weights[index - 1] <= cap) {
                    include = values[index - 1] + currentRow[cap - weights[index - 1]];
                }

                currentRow[cap] = Math.max(include, exclude);
            }
            int[] temp=currentRow;
            currentRow=previousRow;
            previousRow=temp;
        }

        return previousRow[capacity];
    }
}


//Aliter (Further space optimised)

class Solution {
    static int knapSack(int n, int capacity, int[] values, int[] weights) {
        int[] dp=new int[capacity+1];

        for (int index = 1; index <= n; index++) {
            for (int cap = 1; cap <= capacity; cap++) {
                int exclude = dp[cap];

                int include = Integer.MIN_VALUE;
                if (weights[index - 1] <= cap) {
                    include = values[index - 1] + dp[cap - weights[index - 1]];
                }

                dp[cap] = Math.max(include, exclude);
            }
        }

        return dp[capacity];
    }
}
