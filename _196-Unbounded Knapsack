//Bruteforce Approach

class Solution {
    static int knapSack(int n, int capacity, int[] values, int[] weights) {
        return findMaxValue(0, weights, values, n, capacity);
    }

    private static int findMaxValue(int index, int[] weights, int[] values, int n, int remainingCapacity) {
        if (remainingCapacity == 0 || index == weights.length) {
            return 0;
        }

        int exclude = findMaxValue(index + 1, weights, values, n, remainingCapacity);

        int include = Integer.MIN_VALUE;
        if (weights[index] <= remainingCapacity) {
            include = values[index] + findMaxValue(index, weights, values, n, remainingCapacity - weights[index]);
        }

        return Math.max(include, exclude);
    }
}


//Better Approach

class Solution {
    private static int[][] memo;

    static int knapSack(int n, int capacity, int[] values, int[] weights) {
        memo = new int[n][capacity + 1];
        intializeMemo();
        return findMaxValue(0, weights, values, n, capacity);
    }

    private static int findMaxValue(int index, int[] weights, int[] values, int n, int remainingCapacity) {
        if (remainingCapacity == 0 || index == weights.length) {
            return 0;
        }

        if (memo[index][remainingCapacity] != -1) {
            return memo[index][remainingCapacity];
        }

        int exclude = findMaxValue(index + 1, weights, values, n, remainingCapacity);

        int include = Integer.MIN_VALUE;
        if (weights[index] <= remainingCapacity) {
            include = values[index] + findMaxValue(index, weights, values, n, remainingCapacity - weights[index]);
        }

        return memo[index][remainingCapacity] = Math.max(include, exclude);
    }

    private static void intializeMemo() {
        for (int i = 0; i < memo.length; i++) {
            Arrays.fill(memo[i], -1);
        }
    }
}


//Optimal Approach

//Naive Implementation

class Solution {
    static int knapSack(int n, int capacity, int[] values, int[] weights) {
        int[][] dp = new int[n + 1][capacity + 1];

        for (int i = 0; i <= capacity; i++) {
            dp[0][i] = 0;
        }

        for (int i = 1; i <= n; i++) {
            dp[i][0] = 0;
        }

        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= capacity; j++) {
                int exclude = dp[i - 1][j];
                int include = Integer.MIN_VALUE;
                if (weights[i - 1] <= j) {
                    include = values[i - 1] + dp[i][j - weights[i - 1]];
                }
                dp[i][j] = Math.max(include, exclude);
            }
        }

        return dp[n][capacity];
    }
}

//Optimal Implementation 

class Solution {
    static int knapSack(int n, int capacity, int[] values, int[] weights) {
        int[][] dp = new int[n + 1][capacity + 1];

        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= capacity; j++) {
                dp[i][j] = dp[i - 1][j];
                if (weights[i - 1] <= j) {
                    dp[i][j] = Math.max(dp[i][j], values[i - 1] + dp[i][j - weights[i - 1]]);
                }
            }
        }

        return dp[n][capacity];
    }
}


//Aliter (Space optmised)

class Solution {
    static int knapSack(int n, int capacity, int[] values, int[] weights) {
        int[] previousRow = new int[capacity + 1];
        int[] currentRow = new int[capacity + 1];

        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= capacity; j++) {
                currentRow[j] = previousRow[j];
                if (weights[i - 1] <= j) {
                    currentRow[j] = Math.max(currentRow[j], values[i - 1] + currentRow[j - weights[i - 1]]);
                }
            }

            int[] temp = currentRow;
            currentRow = previousRow;
            previousRow = temp;
        }

        return previousRow[capacity];
    }
}


//Aliter (Further space optimised)

class Solution {
    static int knapSack(int n, int capacity, int[] values, int[] weights) {
        int[] dp = new int[capacity + 1];

        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= capacity; j++) {
                if (weights[i - 1] <= j) {
                    dp[j] = Math.max(dp[j], values[i - 1] + dp[j - weights[i - 1]]);
                }
            }
        }

        return dp[capacity];
    }
}
