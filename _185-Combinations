/*

When you consider subsets of an array of size ’n’, you're including combinations of all possible sizes (0 through n).

For example, for an array with n elements, the subsets can be considered as combinations of size 0 (the empty set), 1 (single elements), 2 (pairs of elements), and so on, up to size n (the full set).

Ex: arr[] = {1, 2, 3}

Subsets:
  []  
  [1] 
  [1, 2] or [2, 1] 
  [1, 3] or [3, 1] 
  [1, 2, 3] or [1, 3, 2] or [2, 3, 1] or [2, 1, 3] or [3, 1, 2] or [3, 2, 1]
  [2] 
  [2, 3] or [3, 2] 
  [3] 

Combinations of a specific size:
  Size 0 : []
  Size 1 :  [1], [2], [3] 
  Size 2 :  [1, 2] (or [2, 1]), [1, 3] (or [3, 1]), [2, 3] (or [3, 2])
  Size 3 :  [1, 2, 3] (or [1, 3, 2] or [2, 3, 1] or [2, 1, 3] or [3, 1, 2] or [3, 2, 1])

So every subset of an array can be viewed as a combination of a certain size (which can be 0 up to the total number of elements in the array).



If given an array of size 'n' and a value 'k', and asked to find all possible combinations of size 
'k', we need to determine all possible ways to choose 'k' elements from the 'n' elements. Here, the order does not matter. 
Thus, if two containers contain the same elements in different orders, they form only one combination.
*/

//Iterative Approach

//Method 1

//Naive Implementation

class Solution {
    public List<List<Integer>> combine(int n, int k) {
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = i + 1;
        }
        return generateSizeKSubsets(arr, k);
    }

    private List<List<Integer>> generateSizeKSubsets(int[] arr, int k) {
        List<List<Integer>> sizeKSubsets = new ArrayList<>();
        List<List<Integer>> subsets = new ArrayList<>();
        subsets.add(new ArrayList<>());
        
        for (int val : arr) {
            int size = subsets.size();
            for (int i = 0; i < size; i++) {
                List<Integer> currentSubset = new ArrayList<>(subsets.get(i));
                currentSubset.add(val);
                subsets.add(currentSubset);
                if (currentSubset.size() == k) {
                    sizeKSubsets.add(currentSubset);
                }
            }
        }

        return sizeKSubsets;
    }
}


//Optimal Implementation

class Solution {
    public List<List<Integer>> combine(int n, int k) {
        return generateSizeKSubsets(n, k);
    }

    private List<List<Integer>> generateSizeKSubsets(int n, int k) {
        List<List<Integer>> sizeKSubsets = new ArrayList<>();
        List<List<Integer>> subsets = new ArrayList<>();
        subsets.add(new ArrayList<>());

        for (int num = 1; num <= n; num++) {
            int size = subsets.size();
            for (int i = 0; i < size; i++) {
                List<Integer> currentSubset = new ArrayList<>(subsets.get(i));
                currentSubset.add(num);

                if (currentSubset.size() == k) {
                    sizeKSubsets.add(currentSubset);
                }

                if (currentSubset.size() < k) {
                    subsets.add(currentSubset);
                }
            }
        }

        return sizeKSubsets;
    }
}



//Method 2

//Naive Implementation

class Solution {
    public List<List<Integer>> combine(int n, int k) {
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = i + 1;
        }
        return generateSizeKSubsets(arr, k);
    }

    private List<List<Integer>> generateSizeKSubsets(int[] arr, int k) {
        List<List<Integer>> sizeKSubsets = new ArrayList<>();
        List<Integer> currentSubset = new ArrayList<>();
        int totalSubsets = 1 << arr.length; // x << y = x * 2^n

        for (int num = 0; num < totalSubsets; num++) {
            for (int i = 0; i < arr.length; i++) {
                if ((num & (1 << i)) != 0) {
                    currentSubset.add(arr[i]);
                }
            }

            if (currentSubset.size() == k) {
                sizeKSubsets.add(new ArrayList<>(currentSubset));
            }
            currentSubset.clear();
        }

        return sizeKSubsets;
    }
}


//Better Implementation

class Solution {
    public List<List<Integer>> combine(int n, int k) {
        return generateSizeKSubsets(n, k);
    }

    private List<List<Integer>> generateSizeKSubsets(int n, int k) {
        List<List<Integer>> sizeKSubsets = new ArrayList<>();
        List<Integer> currentSubset = new ArrayList<>();
        int totalSubsets = 1 << n; // x << y = x * 2^n

        for (int num = 0; num < totalSubsets; num++) {
            for (int i = 0; i < n; i++) {
                if ((num & (1 << i)) != 0) {
                    currentSubset.add(i + 1);
                }
            }

            if (currentSubset.size() == k) {
                sizeKSubsets.add(new ArrayList<>(currentSubset));
            }
            currentSubset.clear();
        }

        return sizeKSubsets;
    }
}


//Optimal Implementation

class Solution {
    public List<List<Integer>> combine(int n, int k) {
        return generateSizeKSubsets(n, k);
    }

    private List<List<Integer>> generateSizeKSubsets(int n, int k) {
        List<List<Integer>> sizeKSubsets = new ArrayList<>();
        List<Integer> currentSubset = new ArrayList<>();
        int totalSubsets = 1 << n; // x << y = x * 2^n

        for (int num = 0; num < totalSubsets; num++) {
            if (Integer.bitCount(num) == k) {
                for (int i = 0; i < n; i++) {
                    if ((num & (1 << i)) != 0) {
                        currentSubset.add(i + 1);
                    }
                }
                sizeKSubsets.add(new ArrayList<>(currentSubset));
                currentSubset.clear();
            }
        }

        return sizeKSubsets;
    }
}


//Recursive Approach

//Method 1

//Naive Implementation

class Solution {
    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> sizeKSubsets = new ArrayList<>();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = i + 1;
        }
        generateSubsetsOfSizeK(arr, 0, new ArrayList<>(), sizeKSubsets, k);
        return sizeKSubsets;
    }

    private void generateSubsetsOfSizeK(int[] arr, int index, List<Integer> subset, List<List<Integer>> sizeKSubsets, int k) {
        if (index == arr.length) {
            if (subset.size() == k) {
                sizeKSubsets.add(new ArrayList<>(subset));
            }
            return;
        }

        subset.add(arr[index]);
        generateSubsetsOfSizeK(arr, index + 1, subset, sizeKSubsets, k);

        subset.remove(subset.size() - 1);
        generateSubsetsOfSizeK(arr, index + 1, subset, sizeKSubsets, k);
    }
}


//Better Implementation

class Solution {
    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> sizeKSubsets = new ArrayList<>();
        generateSubsetsOfSizeK(n, 1, new ArrayList<>(), sizeKSubsets, k);
        return sizeKSubsets;
    }

    private void generateSubsetsOfSizeK(int n, int currentNumber, List<Integer> currentSubset, List<List<Integer>> sizeKSubsets, int k) {
        if (currentSubset.size() == k) {
            sizeKSubsets.add(new ArrayList<>(currentSubset));
            return;
        }

        if (currentNumber > n) {
            return;
        }

        currentSubset.add(currentNumber);
        generateSubsetsOfSizeK(n, currentNumber + 1, currentSubset, sizeKSubsets, k);

        currentSubset.remove(currentSubset.size() - 1);
        generateSubsetsOfSizeK(n, currentNumber + 1, currentSubset, sizeKSubsets, k);
    }
}


//Further Optimised

class Solution {
    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> sizeKSubsets = new ArrayList<>();
        generateSubsetsOfSizeK(n, 1, new ArrayList<>(), sizeKSubsets, k);
        return sizeKSubsets;
    }

    private void generateSubsetsOfSizeK(int n, int currentNumber, List<Integer> currentSubset,List<List<Integer>> sizeKSubsets, int k) {
        if (currentSubset.size() == k) {
            sizeKSubsets.add(new ArrayList<>(currentSubset));
            return;
        }
        
        if (currentSubset.size() > k || currentNumber > n) {
            return;
        }

        currentSubset.add(currentNumber);
        generateSubsetsOfSizeK(n, currentNumber + 1, currentSubset, sizeKSubsets, k);

        currentSubset.remove(currentSubset.size() - 1);
        generateSubsetsOfSizeK(n, currentNumber + 1, currentSubset, sizeKSubsets, k);
    }
}


//Optimal Implementation

class Solution {
    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> sizeKSubsets = new ArrayList<>();
        generateSubsetsOfSizeK(n, 1, new ArrayList<>(), sizeKSubsets, k);
        return sizeKSubsets;
    }

    private void generateSubsetsOfSizeK(int n, int currentNumber, List<Integer> currentSubset,List<List<Integer>> sizeKSubsets, int k) {
        if (currentSubset.size() == k) {
            sizeKSubsets.add(new ArrayList<>(currentSubset));
            return;
        }
        /*
        Early termination condition: if the current subset size exceeds 'k'
        Early termination condition: if not enough elements are left to complete the subset of size 'k'
        */
        if (currentSubset.size() > k || currentSubset.size() + (n - currentNumber + 1) < k || currentNumber > n) {
            return;
        }

        currentSubset.add(currentNumber);
        generateSubsetsOfSizeK(n, currentNumber + 1, currentSubset, sizeKSubsets, k);

        currentSubset.remove(currentSubset.size() - 1);
        generateSubsetsOfSizeK(n, currentNumber + 1, currentSubset, sizeKSubsets, k);
    }
}



//Method 2

//Naive Implementation

class Solution {
    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> sizeKSubsets = new ArrayList<>();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = i + 1;
        }
        generateSubsetsOfSizeK(arr, 0, new ArrayList<>(), sizeKSubsets, k);
        return sizeKSubsets;
    }

    private void generateSubsetsOfSizeK(int[] arr, int index, List<Integer> currentSubset, List<List<Integer>> sizeKSubsets, int k) {
        if (currentSubset.size() == k) {
            sizeKSubsets.add(new ArrayList<>(currentSubset));
            return;
        }

        for (int i = index; i < arr.length; i++) {
            currentSubset.add(arr[i]);
            generateSubsetsOfSizeK(arr, i + 1, currentSubset, sizeKSubsets, k);
            currentSubset.remove(currentSubset.size() - 1);
        }
    }
}


//Better Implementation

class Solution {
    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> sizeKSubsets = new ArrayList<>();
        generateSubsetsOfSizeK(n, 1, new ArrayList<>(), sizeKSubsets, k);
        return sizeKSubsets;
    }

    private void generateSubsetsOfSizeK(int n, int currentNumber, List<Integer> currentSubset, List<List<Integer>> sizeKSubsets, int k) {
        if (currentSubset.size() == k) {
            sizeKSubsets.add(new ArrayList<>(currentSubset));
            return;
        }

        if (currentSubset.size() > k) {
            return;
        }

        for (int num = currentNumber; num <= n; num++) {
            currentSubset.add(num);
            generateSubsetsOfSizeK(n, num + 1, currentSubset, sizeKSubsets, k);
            currentSubset.remove(currentSubset.size() - 1);
        }
    }
}


//Optimal Implementation

class Solution {
    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> sizeKSubsets = new ArrayList<>();
        generateSubsetsOfSizeK(n, 1, new ArrayList<>(), sizeKSubsets, k);
        return sizeKSubsets;
    }

    private void generateSubsetsOfSizeK(int n, int currentNumber, List<Integer> currentSubset, List<List<Integer>> sizeKSubsets, int k) {
        if (currentSubset.size() == k) {
            sizeKSubsets.add(new ArrayList<>(currentSubset));
            return;
        }

        if (currentSubset.size() > k || (currentSubset.size() + (n - currentNumber + 1)) < k) {
            return;
        }

        for (int num = currentNumber; num <= n; num++) {
            currentSubset.add(num);
            generateSubsetsOfSizeK(n, num + 1, currentSubset, sizeKSubsets, k);
            currentSubset.remove(currentSubset.size() - 1);
        }
    }
}
