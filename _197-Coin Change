//Bruteforce Approach

class Solution {
    public int coinChange(int[] coins, int amount) {
        int result = coinChange(0, coins, amount);
        /*
         * If the result is Integer.MAX_VALUE, it means it's impossible to form the
         * amount using the given coins So, we return -1 in that case; otherwise, return
         * the result.
         */
        return result == Integer.MAX_VALUE ? -1 : result;
    }

    private int coinChange(int index, int[] coins, int remainingAmount) {
        /*
         * Base case: If the remaining amount is 0, we've successfully formed the amount
         * So we return 0 as no more coins are needed
         */
        if (remainingAmount == 0) {
            return 0;
        }
        /*
         * Base case: If we've used all coins and still haven't formed the amount,
         * return Integer.MAX_VALUE
         * This represents that it's not possible to form the amount with the remaining coins
         */
        if (index == coins.length) {
            return Integer.MAX_VALUE;
        }

        int include = Integer.MAX_VALUE;
        // Check if the current coin can be used (if it's less than or equal to the remaining amount)
        if (coins[index] <= remainingAmount) {
            // Include the current coin and reduce the remaining amount
            include = coinChange(index, coins, remainingAmount - coins[index]);
            /*
             * If the recursive call didn't return Integer.MAX_VALUE (i.e., it's possible to
             * form the amount), then we add 1 to the result, indicating we used one coin of
             * coins[index]
             */
            if (include != Integer.MAX_VALUE) {
                include += 1;
            }
        }
        // Exclude the current coin and move to the next coin
        int exclude = coinChange(index + 1, coins, remainingAmount);
        /*
         * Return the minimum of the two choices: either include the current coin or
         * exclude it This ensures we get the fewest number of coins required
         */
        return Math.min(include, exclude);
    }
}


//Better Approach

class Solution {
    private int[][] memo;

    public int coinChange(int[] coins, int amount) {
        memo = new int[coins.length][amount + 1];
        intializeMemo();
        int result = coinChange(0, coins, amount);
        return result == Integer.MAX_VALUE ? -1 : result;
    }

    private int coinChange(int index, int[] coins, int remainingAmount) {
        if (remainingAmount == 0) {
            return 0;
        }

        if (index == coins.length) {
            return Integer.MAX_VALUE;
        }

        if (memo[index][remainingAmount] != -1) {
            return memo[index][remainingAmount];
        }

        int include = Integer.MAX_VALUE;
        if (coins[index] <= remainingAmount) {
            include = coinChange(index, coins, remainingAmount - coins[index]);
            if (include != Integer.MAX_VALUE) {
                include += 1;
            }
        }

        int exclude = coinChange(index + 1, coins, remainingAmount);

        return memo[index][remainingAmount] = Math.min(include, exclude);
    }

    private void intializeMemo() {
        for (int i = 0; i < memo.length; i++) {
            Arrays.fill(memo[i], -1);
        }
    }
}


//Optimal Approach

//Naive Implementation 

class Solution {
    public int coinChange(int[] coins, int amount) {
        int[][] dp = new int[coins.length + 1][amount + 1];

        for (int i = 0; i <= coins.length; i++) {
            dp[i][0] = 0;
        }

        for (int i = 1; i <= amount; i++) {
            dp[0][i] = Integer.MAX_VALUE;
        }

        for (int i = 1; i <= coins.length; i++) {
            for (int j = 1; j <= amount; j++) {
                int exclude = dp[i - 1][j];
                int include = Integer.MAX_VALUE;
                if (coins[i - 1] <= j) {
                    include = dp[i][j - coins[i - 1]];
                    if (include != Integer.MAX_VALUE) {
                        include += 1;
                    }
                }

                dp[i][j] = Math.min(include, exclude);
            }
        }

        return dp[coins.length][amount] == Integer.MAX_VALUE ? -1 : dp[coins.length][amount];
    }
}


//Optimal Implementation

class Solution {
    public int coinChange(int[] coins, int amount) {
        int[][] dp = new int[coins.length + 1][amount + 1];

        for (int i = 1; i <= amount; i++) {
            dp[0][i] = Integer.MAX_VALUE;
        }

        for (int i = 1; i <= coins.length; i++) {
            for (int j = 1; j <= amount; j++) {
                dp[i][j] = dp[i - 1][j];
                if (coins[i - 1] <= j) {
                    if (dp[i][j - coins[i - 1]] != Integer.MAX_VALUE) {
                        dp[i][j] = Math.min(dp[i][j], 1 + dp[i][j - coins[i - 1]]);
                    }
                }
            }
        }

        return dp[coins.length][amount] == Integer.MAX_VALUE ? -1 : dp[coins.length][amount];
    }
}


//Aliter (Space optimised)

class Solution {
    public int coinChange(int[] coins, int amount) {
        int[] prevRow = new int[amount + 1];
        int[] currRow = new int[amount + 1];

        for (int i = 1; i <= amount; i++) {
            prevRow[i] = Integer.MAX_VALUE;
        }

        for (int i = 1; i <= coins.length; i++) {
            for (int j = 1; j <= amount; j++) {
                currRow[j] = prevRow[j];
                if (coins[i - 1] <= j) {
                    if (currRow[j - coins[i - 1]] != Integer.MAX_VALUE) {
                        currRow[j] = Math.min(currRow[j], 1 + currRow[j - coins[i - 1]]);
                    }
                }
            }
            int[] temp = currRow;
            currRow = prevRow;
            prevRow = temp;
        }

        return prevRow[amount] == Integer.MAX_VALUE ? -1 : prevRow[amount];
    }
}


//Aliter (Further space optimised)

class Solution {
    public int coinChange(int[] coins, int amount) {
        int[] dp = new int[amount + 1];

        for (int i = 1; i <= amount; i++) {
            dp[i] = Integer.MAX_VALUE;
        }

        for (int i = 1; i <= coins.length; i++) {
            for (int j = 1; j <= amount; j++) {
                if (coins[i - 1] <= j) {
                    if (dp[j - coins[i - 1]] != Integer.MAX_VALUE) {
                        dp[j] = Math.min(dp[j], 1 + dp[j - coins[i - 1]]);
                    }
                }
            }
        }

        return dp[amount] == Integer.MAX_VALUE ? -1 : dp[amount];
    }
}
