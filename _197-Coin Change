//Bruteforce Approach

class Solution {
    public int coinChange(int[] coins, int amount) {
        int result = coinChange(coins, coins.length - 1, amount);
        /*
         * If the result is Integer.MAX_VALUE, it means it's impossible to form the
         * amount using the given coins So, we return -1 in that case; otherwise, return
         * the result.
         */
        return result == Integer.MAX_VALUE ? -1 : result;
    }

    private int coinChange(int[] coins, int index, int amount) {
        /*
         * Base case: If the remaining amount is 0, we've successfully formed the amount
         * So we return 0 as no more coins are needed
         */
        if (amount == 0) {
            return 0;
        }
        /*
         * Base case: If we've used all coins and still haven't formed the amount,
         * return Integer.MAX_VALUE This represents that it's not possible to form
         * the amount with the remaining coins
         */
        if (index < 0) {
            return Integer.MAX_VALUE;
        }

        int include = Integer.MAX_VALUE;
        // Check if the current coin can be used (if it's less than or equal to the remaining amount)
        if (coins[index] <= amount) {
            /*
             * Include the current coin and stay at the same index to allow for
             * using the coin again (since we have an infinite supply)
             */
            include = coinChange(coins, index, amount - coins[index]);
            /*
             * If the recursive call didn't return Integer.MAX_VALUE (i.e., it's possible to
             * form the amount), then we add 1 to the result, indicating we used one coin of
             * coins[index]
             */
            if (include != Integer.MAX_VALUE) {
                include += 1;
            }
        }
        // Exclude the current coin and move to the next coin
        int exclude = coinChange(coins, index - 1, amount);
        /*
         * Return the minimum of the two choices: either include the current coin or
         * exclude it This ensures we get the fewest number of coins required
         */
        return Math.min(include, exclude);
    }
}


//Better Approach

class Solution {
    private int[][] cache;

    public int coinChange(int[] coins, int amount) {
        cache = new int[coins.length][amount + 1];
        intializeCache();
        int result = coinChange(coins, coins.length - 1, amount);
        return result == Integer.MAX_VALUE ? -1 : result;
    }

    private int coinChange(int[] coins, int index, int amount) {
        if (amount == 0) {
            return 0;
        }

        if (index < 0) {
            return Integer.MAX_VALUE;
        }

        if (cache[index][amount] != -1) {
            return cache[index][amount];
        }

        int include = Integer.MAX_VALUE;

        if (coins[index] <= amount) {
            include = coinChange(coins, index, amount - coins[index]);

            if (include != Integer.MAX_VALUE) {
                include += 1;
            }
        }

        int exclude = coinChange(coins, index - 1, amount);

        return cache[index][amount] = Math.min(include, exclude);
    }

    private void intializeCache() {
        for (int i = 0; i < cache.length; i++) {
            Arrays.fill(cache[i], -1);
        }
    }
}


//Optimal Approach

//Naive Implementation 

class Solution {
    public int coinChange(int[] coins, int amount) {
        int[][] dp = new int[coins.length + 1][amount + 1];

        dp[0][0] = 0;

        for (int index = 1; index <= coins.length; index++) {
            dp[index][0] = 0;
        }

        for (int sum = 1; sum <= amount; sum++) {
            dp[0][sum] = Integer.MAX_VALUE;
        }

        for (int index = 1; index <= coins.length; index++) {
            for (int sum = 1; sum <= amount; sum++) {
                int include = Integer.MAX_VALUE;

                if (coins[index - 1] <= sum) {
                    include = dp[index][sum - coins[index - 1]];

                    if (include != Integer.MAX_VALUE) {
                        include += 1;
                    }
                }

                int exclude = dp[index - 1][sum];

                dp[index][sum] = Math.min(include, exclude);
            }
        }

        return dp[coins.length][amount] == Integer.MAX_VALUE ? -1 : dp[coins.length][amount];
    }
}


//Optimal Implementation

class Solution {
    public int coinChange(int[] coins, int amount) {
        int[][] dp = new int[coins.length + 1][amount + 1];

        for (int sum = 1; sum <= amount; sum++) {
            dp[0][sum] = Integer.MAX_VALUE;
        }

        for (int index = 1; index <= coins.length; index++) {
            for (int sum = 1; sum <= amount; sum++) {
                int include = Integer.MAX_VALUE;

                if (coins[index - 1] <= sum) {
                    include = dp[index][sum - coins[index - 1]];

                    if (include != Integer.MAX_VALUE) {
                        include += 1;
                    }
                }

                int exclude = dp[index - 1][sum];

                dp[index][sum] = Math.min(include, exclude);
            }
        }

        return dp[coins.length][amount] == Integer.MAX_VALUE ? -1 : dp[coins.length][amount];
    }
}


//Aliter (Space optimised)

class Solution {
    public int coinChange(int[] coins, int amount) {
        int[] previousRow = new int[amount + 1];
        int[] currentRow = new int[amount + 1];

        for (int sum = 1; sum <= amount; sum++) {
            previousRow[sum] = Integer.MAX_VALUE;
        }

        for (int index = 1; index <= coins.length; index++) {
            for (int sum = 1; sum <= amount; sum++) {
                int include = Integer.MAX_VALUE;

                if (coins[index - 1] <= sum) {
                    include = currentRow[sum - coins[index - 1]];

                    if (include != Integer.MAX_VALUE) {
                        include += 1;
                    }
                }

                int exclude = previousRow[sum];

                currentRow[sum] = Math.min(include, exclude);
            }

            int[] temp = currentRow;
            currentRow = previousRow;
            previousRow = temp;
        }

        return previousRow[amount] == Integer.MAX_VALUE ? -1 : previousRow[amount];
    }
}


//Aliter (Further space optimised)

class Solution {
    public int coinChange(int[] coins, int amount) {
        int[] dp = new int[amount + 1];

        for (int sum = 1; sum <= amount; sum++) {
            dp[sum] = Integer.MAX_VALUE;
        }

        for (int index = 1; index <= coins.length; index++) {
            for (int sum = 1; sum <= amount; sum++) {
                int include = Integer.MAX_VALUE;

                if (coins[index - 1] <= sum) {
                    include = dp[sum - coins[index - 1]];

                    if (include != Integer.MAX_VALUE) {
                        include += 1;
                    }
                }

                int exclude = dp[sum];

                dp[sum] = Math.min(include, exclude);
            }
        }

        return dp[amount] == Integer.MAX_VALUE ? -1 : dp[amount];
    }
}
