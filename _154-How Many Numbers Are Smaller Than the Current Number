//Bruteforce Approach

class Solution {
    public int[] smallerNumbersThanCurrent(int[] arr) {
      int n=arr.length,cnt;
      int[] res=new int[n];

      for(int i=0;i<n;i++)
      {
         cnt=0;
         for(int j=0;j<n;j++)
          if(arr[i]>arr[j])
            cnt++;
         
         res[i]=cnt;
      }
      return res;
    }
}

//Better Approach

class Solution {
    public int[] smallerNumbersThanCurrent(int[] arr) {
        int n=arr.length,index;
        int[] copy=new int[n];
        
        for(int i=0;i<n;i++)
          copy[i]=arr[i];
    
        Arrays.sort(copy);
        
        for(int i = 0; i<n; i++)
           arr[i]=firstIndex(copy,arr[i]);
        
      return arr;
    }

    public static int firstIndex(int[] arr, int key)
    {
        int low=0,high=arr.length-1,first=-1,mid,val;
        while(low<=high)
        {
            mid =(high+low)/2;
            if(arr[mid]==key)
            {
              first=mid;
              high=mid-1;
            }
            else if(key>arr[mid])
              low=mid+1;
            else if(key<arr[mid])
              high=mid-1;
        }
        return first;
    }
}


//Optimal Approach

class Solution {
    public int[] smallerNumbersThanCurrent(int[] arr) {
        int[] counter = new int[101];
        int n=arr.length;
    
        for(int i=0; i<n; i++)
            counter[arr[i]]++;  // acting like a frequency Array
        
        
        for(int i=1; i< 101; i++)
            counter[i]+=counter[i-1]; //count[i]=Count of numbers which are <=i	
        
        for(int i=0; i< n; i++) 
        {
            if(arr[i]==0)
              arr[i]=0;
            else
              arr[i]=counter[arr[i]-1]; // count[arr[i]-1]=Count of numbers which are < arr[i]	
            //(minus one because without it we also get the ones equal to arr[i] and we only want smaller)
        }
        
        return arr;
    }
}
