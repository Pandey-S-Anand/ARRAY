//Bruteforce Approach

class Solution {
    public int threeSumClosest(int[] arr, int target) {
      int minTillNow=Integer.MAX_VALUE,closestSum=arr[0]+arr[1]+arr[2],n=arr.length;

      for(int i=0;i<n-2;i++)
        for(int j=i+1;j<n-1;j++)
           for(int k=j+1;k<n;k++)
           {
             int currSum=(arr[i]+arr[j]+arr[k]);
             int currDiff=Math.abs(target-currSum);
               
             if(currDiff<minTillNow)
             {
               minTillNow=currDiff;
               closestSum=currSum;
             }
	     
	           if(currSum==target)
               return currSum;
           }

      return closestSum;  
    }
}


//Optimal Solution

class Solution {
    public int threeSumClosest(int[] arr, int target) {
       int minTillNow=Integer.MAX_VALUE,closestSum=arr[0]+arr[1]+arr[2],n=arr.length;
        
       Arrays.sort(arr);

       for(int i=0;i<n-2;i++)
       {

	      int j=i+1;
	      int k=n-1;
	     
	      while(j<k)
        {
           int currSum=(arr[i]+arr[j]+arr[k]);
           int currDiff=Math.abs(target-currSum);

           if(currDiff<minTillNow)
           {
              minTillNow=currDiff;
              closestSum=currSum;
           }
             
           if (currSum == target)
             return currSum;
	         else if(currSum<target)
             j++;
	         else  //(currSum>target)
             k--;
        }   
      }
	   
      return closestSum; 
    }
}
