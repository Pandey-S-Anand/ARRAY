//Bruteforce Approach

public class Solution {
    enum SortOrder {
        ASCENDING, DESCENDING
    }

    public int solve(ArrayList<Integer> arr, int target) {
        int n = arr.size();
        int maxElementIndex = findMaxElementIndex(arr, n);

        int index = binarySearch(arr, 0, maxElementIndex, target, SortOrder.ASCENDING);
        if (index != -1) {
            return index;
        }

        return binarySearch(arr, maxElementIndex + 1, n - 1, target, SortOrder.DESCENDING);
    }

    private int findMaxElementIndex(List<Integer> arr, int n) {
        for (int i = 0; i < n - 1; i++) {
            if (arr.get(i) > arr.get(i + 1)) {
                return i;
            }
        }

        // This return statement is never reached because the array always contain a bitonic point
        return -1;
    }

    private int binarySearch(List<Integer> arr, int low, int high, int target, SortOrder sortOrder) {
        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (arr.get(mid) == target) {
                return mid;
            }

            if (sortOrder.equals(SortOrder.ASCENDING)) {
                if (target < arr.get(mid)) {
                    high = mid - 1;
                } else { // if (target > arr.get(i))
                    low = mid + 1;
                }
            } else {
                if (target > arr.get(mid)) {
                    high = mid - 1;
                } else { // if (target < arr.get(i))
                    low = mid + 1;
                }
            }
        }

        return -1; // key doesnot exists
    }
}
