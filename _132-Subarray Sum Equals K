// Bruteforce Approach

class Solution {
    public int subarraySum(int[] arr, int k) {
        int[] prefixSum = new int[arr.length];

        for (int i = 0; i < arr.length; i++) {
            if (i == 0) {
                prefixSum[i] = arr[i];
            } else {
                prefixSum[i] = prefixSum[i - 1] + arr[i];
            }
        }

        int count = 0;
        for (int start = 0; start < arr.length; start++) {
            for (int end = start; end < arr.length; end++) {
                if (findSubarraySum(prefixSum, start, end) == k) {
                    count++;
                }
            }
        }

        return count;
    }

    private int findSubarraySum(int[] prefixSum, int startIndex, int endIndex) {
        if (startIndex == 0) {
            return prefixSum[endIndex];
        }

        return prefixSum[endIndex] - prefixSum[startIndex - 1];
    }
}



// Better Approach

class Solution {
    public int subarraySum(int[] arr, int k) {
        int count = 0;
        for (int start = 0; start < arr.length; start++) {
            int subArraySum = 0;
            for (int end = start; end < arr.length; end++) {
                subArraySum += arr[end];

                if (subArraySum == k) {
                    count++;
                }
            }
        }

        return count;
    }
}


//Optimal Approach

class Solution {
    public int subarraySum(int[] arr, int k) {
        Map<Integer, Integer> sumFrequencyMap = new HashMap<>();
        int count = 0, prefixSum = 0;

        for (int val : arr) {
            prefixSum += val;

            if (prefixSum == k) {
                count++;
            }

            if (sumFrequencyMap.containsKey(prefixSum - k)) {
                count += sumFrequencyMap.get(prefixSum - k);
            }

            sumFrequencyMap.put(prefixSum, sumFrequencyMap.getOrDefault(prefixSum, 0) + 1);
        }
        return count;
    }
}
