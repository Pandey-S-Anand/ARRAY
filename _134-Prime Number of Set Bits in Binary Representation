//Bruteforce Approach

class Solution {
    public static int countPrimeSetBits(int left, int right){
       int cnt=0;
       for(int i=left;i<=right;i++)
         if(isPrime(Integer.bitCount(i)))
           cnt++;
       return cnt;
    }
    
    public static boolean isPrime(int num)
    {
        if(num<=1)
	  return false;
        
        for(int i=2;(i*i)<=num;i++)
          if((num%i)==0)
            return false;  
	    
        return true; 
    }
}


//Optimal Approach

class Solution {
    public static int countPrimeSetBits(int left, int right){
        HashSet<Integer>prime=new HashSet<>();
        prime.add(2);
        prime.add(3);
        prime.add(5);
        prime.add(7);
        prime.add(11);
        prime.add(13);
        prime.add(17);
        prime.add(19);
	prime.add(23);
        prime.add(29);
        prime.add(31);
        
        int cnt=0;
        for(int i=left;i<=right;i++)
          if(prime.contains(Integer.bitCount(i)))
             cnt++;
        
        return cnt;        
    }
}

/*
An Integer is Represented using 32 bits so total bits =32 out of these 32 bits some will be Set/On while Other will be Unset/Off 
so all we need to Do is Precompute all the Prime Numbers in the the Range [1,32](both Inclusive).
As no.of primes are limited we can use Hashset to check no.of set bits is prime or not.
*/
