//Bruteforce Approach

class Solution{
    public int[] twoRepeated(int arr[], int n){
      int[]res=new int[2];
      int idx=0;
       
      HashSet<Integer>hs=new HashSet<>();
        
      for(int val:arr)
        if(hs.contains(val))
        {
          res[idx++]=val;
          if(idx==2)
            break;            
        }
        else
          hs.add(val);
          
       return res;
    }
}


//Better Approach

class Solution{
    public int[] twoRepeated(int arr[], int n){
       int[]res=new int[2];
       int idx=0;
       boolean[] visited=new boolean[n+1];
       
       for(int i=0;i<(n+2);i++)
           if(visited[arr[i]]==true)
           {
              res[idx++]=arr[i];
              if(idx==2)
               break;
           }
           else
             visited[arr[i]]=true;
       
       return res;
    }
}

//Optimal Approach

class Solution{
    public int[] twoRepeated(int arr[], int n){
        int[]res=new int[2];
        int idx=0;
        for(int i=0;i<(n+2);i++)
        {
            int ele=Math.abs(arr[i]); 
            if(arr[ele]<0)
            {
              res[idx++]=ele;
              if(idx==2)
	        break;
            }
            else
             arr[ele]*=-1; 
        }
        return res;
    }
}
