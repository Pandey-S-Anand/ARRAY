//Bruteforce Approach

class Solution {
    public int[] findErrorNums(int[] arr) {
       Arrays.sort(arr);
       int n=arr.length;
       int[] res=new int[2];   
	
       for(int i=0;i<(n-1);i++)
         if(arr[i]==arr[i+1])
         {
           res[0]=arr[i]; //Repeating
           break;
         }
        
       for(int i=1;i<=n;i++)
         if(binarySearch(arr,i)==false)
         {
            res[1]=i; //Missing
            break;
         }
             
        return res; 
    }

    public static boolean binarySearch(int[] arr,int key)
    {
        int low=0,high=arr.length-1;
        while(low<=high)
        {
           int mid=(low+high)/2; 
           if(arr[mid]==key)
             return true;
           else if(key>arr[mid])
             low=mid+1;
           else if(key<arr[mid])
              high=mid-1;
        }
        return false;
    }
}


//Improved Approach

class Solution {
    public int[] findErrorNums(int[] arr) {
       int n=arr.length,repeated=-1;
       boolean[] visited=new boolean [n+1];
       int[] res=new int[2];
       
       for(int i=0;i<n;i++)
       {
          if(visited[arr[i]]==true)
            res[0]=arr[i];
          else
            visited[arr[i]]=true;     
       }

       for(int i=1;i<=n;i++)
         if(visited[i]==false)
         {
           res[1]=i;
           break;
         }
       
       return res;
    }
}

// Better Approach

class Solution {
    public int[] findErrorNums(int[] arr) {
       int n=arr.length;
       int[] res=new int[2];
       HashMap<Integer,Integer>hm=new HashMap<>();
       
       for(int i=1;i<=n;i++)
          hm.put(i,0);
       
       for(int i=0;i<n;i++)
         hm.put(arr[i],hm.get(arr[i])+1);
       

       for(int key:hm.keySet())
       {
         if(hm.get(key)==2)
           res[0]=key; //repeating
         else if(hm.get(key)==0)
           res[1]=key; //missing
           
         if(res[0]!=0 && res[1]!=0)
             break;
       }
        
      return res;
    }
}

//Best Approach

class Solution {
    public int[] findErrorNums(int[] arr) {
       int n=arr.length,i=0;
	     int[] res=new int[2];
       while(i<n)
       {
          int correctIndex=arr[i]-1;
          if(arr[correctIndex]==arr[i])
	          i++;
	        else //if arr[i] is not at its correct index
          {
               int temp=arr[correctIndex];
               arr[correctIndex]=arr[i];
               arr[i]=temp;
          }      
       }  
        
       for (i=0; i<n; i++) 
          if(arr[i]!=i+1)
          {
            res[0]=arr[i];//repeating
            res[1]=i+1;// missing
            break;
          }
	     
        return res;   
    }
}


//Optimal Approach

class Solution {
    public int[] findErrorNums(int[] arr) {
        int n=arr.length,x=0,y=0,xXory=0;
        int[] res=new int[2];
          
        for(int i=1;i<=n;i++)
           xXory=xXory^i;
             
        for(int val:arr)
           xXory=xXory^val;
             
        int rmsbm=rMSBM(xXory);
          
        for(int val:arr)
          if((val & rmsbm)==0)
            x=x^val;
          else
            y=y^val;
          
        for(int i=1;i<=n;i++)
          if((i & rmsbm)==0)
            x=x^i;
          else
            y=y^i;
          
          for(int i=0;i<n;i++)
            if(arr[i]==x)
            {
              res[0]=x; //Repeating
              res[1]=y; //Missing
              break;  
            }
            else if(arr[i]==y)
            {
              res[0]=y; //Repeating
              res[1]=x; //Missing
              break;
            }
       
        return res;  
    }

    public static int rMSBM(int n)
    {
       int rsbm= n & twosCompliment(n);
       return rsbm;
    }
		
    public static int twosCompliment(int n)
    {
       return -n;//(~n+1);
    }
}
