//Method 1

class Solution{
    public static void splitArray(int[] arr,int n,int k){
       leftRotateByK(arr,n,k);
    }
	
    public static void leftRotateByK(int[] arr,int n,int k)
    {
	k=k%n;
	for(int i=1;i<=k;i++)
           leftRotateBy1(arr,n);
    }
	
    public static void leftRotateBy1(int[] arr,int n)
    {
        int temp=arr[0];
	for(int j=0;j<(n-1);j++)
	  arr[j]=arr[j+1];
	       
	arr[n-1]=temp;
    }
}

//Method 2

class Solution {
   public static void splitArray(int[] arr,int n,int k){
      leftRotateByK(arr,n,k);
   }
	
   public static void leftRotateByK(int[] arr,int n,int k)
   {
	k=k%n;
	int[] temp=new int[k];
	for(int i=0;i<k;i++)
	   temp[i]=arr[i];
	     
	for(int i=k;i<n;i++)
	   arr[i-k]=arr[i];
	   
        for(int i=0;i<k;i++)
	   arr[n-k+i]=temp[i];
   }
}


//Method 3

class Solution{
    public static void splitArray(int[] arr,int n,int k){
       leftRotateByK(arr,n,k);
    }
	
    public static void leftRotateByK(int[] arr,int n,int k)
    {
	k=k%n;
	int len=2*n;
	int[] twice=new int[2*n];

	for(int i=0;i<n;i++)
	{
	   twice[i]=arr[i];
	   twice[n+i]=arr[i];
	}

	for(int i=0;i<n;i++)
	  arr[i]=twice[k+i];
    }
}


//Method 4

class Solution{
    public static void splitArray(int[] arr,int n,int k){
	leftRotateByK(arr,n,k);
    }
	
    public static void leftRotateByK(int[] arr,int n,int k)
    {
        k=k%n;
        reverseArray(arr, 0, k-1);
        reverseArray(arr, k, n-1);
        reverseArray(arr, 0,n-1);
    }
	
    public static void reverseArray(int[]arr, int start, int end)
    {
        while (start < end)
        {
            swap(arr,start,end);
            start++;
            end--;
        }
    }
    
    public static void swap(int[]arr,int i,int j)
    {
      int temp = arr[i];
      arr[i] = arr[j];
      arr[j] = temp;
    }
}


//Method 5

class Solution {
   public static void splitArray(int[] arr,int n,int k){
      leftRotateByK(arr,n,k);
   }
	
   public static void leftRotateByK(int[] arr,int n,int k)
   {
        k=k%n;
        int numSets=gcd(n,k);
        for(int i=0;i<numSets;i++)
        {
            int j=i;
            int temp=arr[i];
            while(true)
            {
                int idx=(j+k)%n;
                if(idx==i)
                {
                    arr[j]=temp;
                    break;
                }
                else
                {
                    arr[j]=arr[idx];
                    j=idx;
                }
            }
        }
   }
	
  public static int gcd(int divisor,int dividend)
  {
     int rem=dividend%divisor;
     if(rem==0)
       return divisor;
	      
     return gcd(rem,divisor);      
  }
}
