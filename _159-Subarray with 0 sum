//Bruteforce Approach

class Solution{
    static boolean findsum(int arr[],int n){
         int subSum=0;
         int[] prefixSum=new int[n];
      
         for(int i=0;i<n;i++)
           if(i==0)
            prefixSum[i]=arr[i];
           else
            prefixSum[i]=prefixSum[i-1]+arr[i];
      
         for(int start=0;start<n;start++)
           for(int end=start;end<n;end++)
           {
             if(start==0)
              subSum=prefixSum[end];
             else
              subSum=prefixSum[end]-prefixSum[start-1];
           
             if(subSum==0)
               return true;
           }
        
        return false;
    }
}


//Better Approach

class Solution{
    static boolean findsum(int arr[],int n){
       for(int start=0;start<n;start++)
       {
         int subSum=0;
         for(int end=start;end<n;end++)
         {
            subSum+=arr[end];
          
            if(subSum==0)
              return true;
         }  
       }
     return false;
    }
}


//Optimal Approach

class Solution{
    static boolean findsum(int arr[],int n){
         HashSet<Integer>hs=new HashSet<>();
         int prefixSum=0;
         
         for(int i=0;i<n;i++)
         {
            prefixSum+=arr[i];
        
            if(prefixSum==0)
              return true;
          
            if(hs.contains(prefixSum))
              return true;
            else
              hs.add(prefixSum);
          }
      
      return false;
    }
}
