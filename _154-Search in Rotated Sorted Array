//Bruteforce Approach

class Solution {
    public int search(int[] arr, int target) {
        int partitionIndex = findPartitionIndex(arr);
        // Try to find the target in the first partition
        int targetIndex = binarySearch(arr, 0, partitionIndex, target);

        if (targetIndex != -1) {
            return targetIndex;
        }
        // Try to find the target in the second partition
        return binarySearch(arr, partitionIndex + 1, arr.length - 1, target);
    }

    private int binarySearch(int[] arr, int low, int high, int target) {
        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (arr[mid] == target) {
                return mid;
            } else if (target < arr[mid]) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }

        return -1;
    }

    private int findPartitionIndex(int[] arr) {
        for (int i = 0; i < arr.length - 1; i++) {
            if (arr[i] > arr[i + 1]) {
                return i;
            }
        }
        // If no partition index is found, the array is sorted in ascending order and not rotated
        return arr.length - 1;
    }
}



//Better Approach
