//Bruteforce Approach

public class Solution {
    public int solve(ArrayList<Integer> arr, int k) {
        int n = arr.size();
        int bitonicPoint = findBitonicPoint(arr, n);

        int index = binarySearch(arr, 0, bitonicPoint, k, true);
        if (index != -1) {
            return index;
        }

        return binarySearch(arr, bitonicPoint + 1, n - 1, k, false);
    }

    private int findBitonicPoint(ArrayList<Integer> arr, int n) {
        for (int i = 0; i < n - 1; i++) {
            if (arr.get(i) > arr.get(i + 1)) {
                return i;
            }
        }
        return n - 1; // No bitonic point means strictly increasing array
    }

    private int binarySearch(ArrayList<Integer> arr, int low, int high, int key, boolean isAscending) {
        while (low <= high) {
            int mid = low + (high - low) / 2;
            int val = arr.get(mid);

            if (val == key) {
                return mid;
            }

            if (isAscending) {
                if (key < val) {
                    high = mid - 1;
                } else { // if (key > val)
                    low = mid + 1;
                }
            } else {
                if (key > val) {
                    high = mid - 1;
                } else { // if (key < val)
                    low = mid + 1;
                }
            }
        }

        return -1; // key doesnot exists
    }
}

// Optimal Approach

public class Solution {
    public int solve(ArrayList<Integer> arr, int k) {
        int n = arr.size();
        int bitonicPoint = findBitonicPoint(arr, n);

        // Perform binary search on the increasing part
        int increasingIndex = binarySearch(arr, 0, bitonicPoint, k, true);
        if (increasingIndex != -1) {
            return increasingIndex;
        }

        // Perform binary search on the decreasing part
        return binarySearch(arr, bitonicPoint + 1, n - 1, k, false);
    }

    private int findBitonicPoint(ArrayList<Integer> arr, int n) {
        int low = 0, high = n - 1;

        while (low <= high) {
            int mid = low + (high - low) / 2;
            // 3 <= arr.size() <= 10^5
            if (arr.get(mid) > arr.get(mid - 1) && arr.get(mid) > arr.get(mid + 1)) {
                return mid;
            }

            if (arr.get(mid) < arr.get(mid + 1)) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }

        return n - 1; // No bitonic point means strictly increasing array
    }

    private int binarySearch(ArrayList<Integer> arr, int low, int high, int key, boolean isAscending) {
        while (low <= high) {
            int mid = low + (high - low) / 2;
            int val = arr.get(mid);

            if (val == key) {
                return mid;
            }

            if (isAscending) {
                if (key < val) {
                    high = mid - 1;
                } else { // if (key > val)
                    low = mid + 1;
                }
            } else {
                if (key > val) {
                    high = mid - 1;
                } else { // if (key < val)
                    low = mid + 1;
                }
            }
        }

        return -1; // key does not exist
    }
}
