// Bruteforce Approach

class GfG{
    int maxLen(int arr[], int n){
      int maxLength=0;
      for(int start=0;start<n;start++)
        for(int end=start;end<n;end++)
        {
          int sum=0;
          for(int range=start;range<=end;range++)
            sum+=arr[range];
            
          if(sum==0)
              maxLength=Math.max((end-start+1),maxLength);
        }
        
      return maxLength;
    }
}


//Better Approach

class GfG{
    int maxLen(int arr[], int n){
      int maxLength=0;
      for(int start=0;start<n;start++)
      {
        int sum=0;
        for(int end=start;end<n;end++)
        {
          sum+=arr[end];
          
          if(sum==0)
             maxLength=Math.max((end-start+1),maxLength);
        }
      }    
        
      return maxLength;
    }
}


//Optimal Approach

class GfG{
    int maxLen(int arr[], int n){
        
        HashMap<Integer,Integer> hm=new HashMap<>();
        int prefixSum=0;
        int maxLen=0;
        
        for(int i=0;i<n;i++)
        {
            prefixSum+=arr[i];
            
            if(prefixSum==0)
            {
               int currLen=i+1;
               if(currLen>maxLen)
                 maxLen=currLen;
            }
              
            if(hm.containsKey(prefixSum))
            {
               int currLen=i-hm.get(prefixSum);
               if(currLen>maxLen)
                 maxLen=currLen;
            }
            else
                hm.put(prefixSum,i);
        }
        
        return maxLen;
    }
}
