//Bruteforce Approach

class Solution {
    public int[] twoSum(int[] arr, int target) {
        for (int i = 0; i < arr.length; i++) {
            for (int j = i + 1; j < arr.length; j++) {
                if ((arr[i] + arr[j]) == target) {
                    return new int[] { i, j };
                }
            }
        }

        return new int[0];
    }
}


//Better Approach

class Solution {
    public int[] twoSum(int[] arr, int target) {
        int[] temp = arr.clone();

        Arrays.sort(arr);
        int i = 0, j = (arr.length - 1), num1 = Integer.MIN_VALUE, num2 = Integer.MIN_VALUE;

        while (i < j) {
            if ((arr[i] + arr[j]) == target) {
                num1 = arr[i];
                num2 = arr[j];
                break;
            } else if ((arr[i] + arr[j]) < target) {
                i++;
            } else {
                j--;
            }
        }

        int[] indices = new int[2];
        boolean foundFirst = false;

        for (i = 0; i < temp.length; i++) {
            if (!foundFirst && num1 == temp[i]) {
                indices[0] = i;
                foundFirst = true;
            } else if (foundFirst && (i != indices[0] && num2 == temp[i])) {
                indices[1] = i;
                break;
            }
        }

        return indices;
    }
}


//Optimal Approach

class Solution {
    public int[] twoSum(int[] arr, int target) {
       int[]res=new int[2];
       HashMap<Integer,Integer>hm=new HashMap<>();

       for(int i=0;i<arr.length;i++)
       {
         if(hm.containsKey(target-arr[i]))
         {
            res[0]=hm.get(target-arr[i]);
            res[1]=i;
            break;
         }
         hm.put(arr[i],i);
       }
       
       return res;
    }
}
