//Method 1

class Solution {
    public static void findTwoRepeated(int arr[]) {
        int count = 0;

        for (int i = 0; i < arr.length; i++) {
            for (int j = i + 1; j < arr.length; j++) {
                if (arr[i] == arr[j]) {
                    System.out.print(arr[i] + " ");
                    count++;

                    if (count == 2) {
                        return;
                    }
                }
            }
        }
    }
}


//Method 2

class Solution {
    public static void findTwoRepeated(int arr[]) {
        int count = 0, i = 0;
        Arrays.sort(arr);
        while (i < (arr.length - 1)) {
            if (arr[i] == arr[i + 1]) {
                System.out.println(arr[i] + " ");
                i += 2;
                count++;
                if (count == 2) {
                    break;
                }
            } else {
                i++;
            }
        }
    }
}


//Method 3

class Solution {
    public static void findTwoRepeated(int arr[]) {
        int count = 0;
        Map<Integer, Integer> frequencyMap = new HashMap<>();

        for (int val : arr) {
            frequencyMap.put(val, frequencyMap.getOrDefault(val, 0) + 1);
        }

        for (int key : frequencyMap.keySet()) {
            if (frequencyMap.get(key) == 2) {
                System.out.println(key + " ");
                count++;
                if (count == 2) {
                    break;
                }
            }
        }
    }
}


//Method 4

class Solution {
    public static void findTwoRepeated(int arr[]) {
        int count = 0;
        Set<Integer> set = new HashSet<>();

        for (int val : arr) {
            if (set.contains(val)) {
                System.out.println(val + " ");
                count++;
                if (count == 2) {
                    break;
                }
            } else {
                set.add(val);
            }
        }
    }
}


//Method 5

class Solution {
    public static void findTwoRepeated(int arr[]) {
        int n = arr.length;
        int sum = ((n - 2) * ((n - 2) + 1)) / 2;// Sum of First 'n' Natural Numbers.
        int prod = factorial(n - 2);// Product of First n Natural Numbers.
        int arrSum = 0;
        int arrProd = 1;

        for (int i = 0; i < n; i++) {
            arrSum += arr[i];
            arrProd *= arr[i];
        }

        int sumOfTwoRepeating = arrSum - sum; // R1+R2=sumOfTwoRepeating
        int prodOfTwoRepeating = arrProd / prod; // R1*R2=prodOfTwoRepeating
        int differenceOfTwoRepeating = (int) Math.sqrt((sumOfTwoRepeating * sumOfTwoRepeating) - (4 * prodOfTwoRepeating));// R1-R2=differenceOfTwoRepeating i.e (X-Y)^2=((X+Y)^2 - 4*X*Y)
        int R1 = (sumOfTwoRepeating + differenceOfTwoRepeating) / 2;  // (R1+R2)+(R1-R2)=2R1 => R1=((R1+R2)+(R1-R2))/2
        int R2 = sumOfTwoRepeating - R1;  // R2=(R1+R2)-R1

        System.out.println(R1 + " " + R2);
    }

    public static int factorial(int num) {
        int[] fact = new int[num + 1];
        fact[0] = 1;

        for (int i = 1; i <= num; i++) {
            fact[i] = i * fact[i - 1];
        }

        return fact[num];
    }
}
 
 
//Method 6

class Solution {
    public static void findTwoRepeated(int arr[]) {
        int count = 0;
        boolean[] visited = new boolean[arr.length - 1];

        for (int val : arr) {
            if (visited[val]) {
                System.out.print(val + " ");
                count++;
                if (count == 2) {
                    break;
                }
            } else {
                visited[val] = true;
            }
        }
    }
}


// Method 7

class Solution {
    public static void findTwoRepeated(int arr[]) {
        int count = 0;

        for (int i = 0; i < arr.length; i++) {
            int ele = Math.abs(arr[i]);
            if (arr[ele] < 0) {
                System.out.print(ele + " ");
                count++;
                if (count == 2) {
                    break;
                }
            } else {
                arr[ele] *= -1;
            }
        }
    }
}

//Method 8 (Refer Question 47 and 48 for better understanding of this approach)

class Solution {
    public static void findTwoRepeated(int arr[]) {
        int x = 0, y = 0, xXory = 0;

        for (int i = 1; i <= (arr.length - 2); i++) {
            xXory = xXory ^ i;
        }

        for (int val : arr) {
            xXory = xXory ^ val;
        }

        int rmsbm = rightMostSetBitMask(xXory);

        for (int val : arr) {
            if ((val & rmsbm) == 0) {
                x = x ^ val;
            } else {
                y = y ^ val;
            }
        }

        for (int i = 1; i <= (arr.length - 2); i++) {
            if ((i & rmsbm) == 0) {
                x = x ^ i;
            } else {
                y = y ^ i;
            }
        }

        System.out.print(x + " " + y);
    }

    public static int rightMostSetBitMask(int n) {
        return n & twosCompliment(n);
    }

    public static int twosCompliment(int n) {
        return -n; // (~n+1);
    }
}
