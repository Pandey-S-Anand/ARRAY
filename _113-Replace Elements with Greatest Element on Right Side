//Bruteforce Approach

class Solution {
    public int[] replaceElements(int[] arr) {
        for (int i = 0; i < arr.length; i++) {
            arr[i] = largestOnRight(arr, i);
        }

        return arr;
    }

    public int largestOnRight(int[] arr, int index) {
        int max = -1;
        for (int i = index + 1; i < arr.length; i++) {
            if (arr[i] > max) {
                max = arr[i];
            }
        }

        return max;
    }
}


//Better Approach

class Solution {
    public int[] replaceElements(int[] arr) {
        int[] result = new int[arr.length];
        int maxSoFar = -1;

        for (int i = arr.length - 1; i >= 0; i--) {
            result[i] = maxSoFar;
            if (arr[i] > maxSoFar) {
                maxSoFar = arr[i];
            }
        }

        return result;
    }
}


// Optimal Approach

class Solution {
    public int[] replaceElements(int[] arr) {
        int maxSoFar = arr[arr.length - 1];
        arr[arr.length - 1] = -1;

        for (int i = arr.length - 2; i >= 0; i--) {
            int orginalVal = arr[i];
            arr[i] = maxSoFar;
            if (orginalVal > maxSoFar) {
                maxSoFar = orginalVal;
            }
        }

        return arr;
    }
}
