//Optimal Approach
/*
An Efficient Solution can find the required element in O(Log n) time. The idea is to use Binary Search without recursion.
All elements before the required have the first occurrence at even index (0, 2, ..and so on) and the next occurrence at odd index (1, 3, ..and so on). 
*/

class Solution {
    public int singleNonDuplicate(int[] arr) {
       int n=arr.length;
       if(n==1)
          return arr[0];
       if(arr[0]!=arr[1])
         return arr[0];
       else if(arr[n-1]!=arr[n-2])
         return arr[n-1];

       int low=0,high=(n-1),res=-1;
          while(low<=high)
          {
            int mid=(low+high)/2;
            
            if((mid%2)==0)//Mid is even
            {
                if(arr[mid]==arr[mid+1])
                   low=mid+2;               
                else//(arr[mid]!=arr[mid+1])
                {
                   if(arr[mid-1]==arr[mid-2]) 
                     return arr[mid];
                   else
                     high=mid-2;
                }
              /*
                Index:   0  1  2  3  4  5  6  7  8  9  10  11  12
                arr[] = {1, 1, 3, 3, 5, 5, 7, 7, 8, 9 ,9 ,10 ,10}
                Output:  8
                 
                Index:   0  1  2  3  4  5  6  7  8  9  10  11  12
                arr[] = {1, 1, 3, 3, 5, 5, 7, 8, 8, 9 ,9 ,10 ,10}
                Output:  7
                
                Index:   0  1  2  3  4  5  6  7  8  9   10  11  12
                arr[] = {1, 1, 3, 5, 5, 8, 8, 9 ,9 ,10 ,10 ,12, 12}
                Output:  3
                
              */
            }
            else//Mid is Odd
            {
                if(arr[mid]==arr[mid-1])
                   low=mid+1;
                else//(arr[mid]!=arr[mid-1])
                {
                   if(arr[mid-2]==arr[mid-3]) 
                     return arr[mid-1];
                   else
                     high=mid-1;
                }
                   
                /*    
                 Index:  0  1  2  3  4  5  6  7  8  9  10  
                arr[] = {1, 1, 3, 3, 5, 5, 7, 8, 8, 9 ,9 }
                Output:  7
                
                 Index:  0  1  2  3  4  5  6  7  8  9  10  
                arr[] = {1, 1, 3, 3, 5, 7, 7, 8, 8 ,9 ,9}
                Output:  5
                
                 Index:  0  1  2  3  4  5  6  7  8  9   10 
                arr[] = {1, 1, 3, 5, 5, 8, 8, 9 ,9 ,10 ,10}
                Output:  3
                
              */
            }
          }
          
          return res; 
    }
}
