//Bruteforce Approach

class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
      List<List<Integer>>res=new ArrayList<>();
      HashSet<List<Integer>>hs=new HashSet<>();
      List<Integer>arr=new ArrayList<>();

      for(int val:nums)
        arr.add(val);

      findAllPermutation(arr, 0, (arr.size()-1),hs);
      
      res.addAll(hs);

     return res;
    }

    private void findAllPermutation(List<Integer>arr, int start, int end,HashSet<List<Integer>>hs)
    {
        if (start == end)
          hs.add(new ArrayList<>(arr));
        else 
        {
          for (int i = start; i <= end; i++)
          {
            swap(arr, start, i);
            findAllPermutation(arr, start + 1, end,hs);
            swap(arr, start, i);
          }
        }
    }

    public void swap(List<Integer>arr, int i, int j)
    {
        int temp = arr.get(i);
        arr.set(i,arr.get(j));
        arr.set(j,temp);
    }
}


//Better Approach


class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
      List<List<Integer>>res=new ArrayList<>();
      
      List<Integer>arr=new ArrayList<>();
      for (int num : nums)
        arr.add(num);

      findAllPermutation(arr, 0, (arr.size()-1),res);

     return res;
    }

    private void findAllPermutation(List<Integer>arr, int start, int end,List<List<Integer>>res)
    {
        if (start == end)
        {
          List<Integer>perm=new ArrayList<>(arr);
          if(res.contains(perm)==false)
            res.add(perm);
        }
        else 
        {
          for (int i = start; i <= end; i++)
          {
            swap(arr, start, i);
            findAllPermutation(arr, start + 1, end,res);
            swap(arr, start, i);
          }
        }
    }

    public void swap(List<Integer>arr, int i, int j)
    {
        int temp = arr.get(i);
        arr.set(i,arr.get(j));
        arr.set(j,temp);
    }
}


//Optimal Approach

class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();

        List<Integer> arr = new ArrayList<>();
        for (int num : nums)
            arr.add(num);

        findAllPermutation(arr, 0, (arr.size() - 1), res);

        return res;
    }

    private void findAllPermutation(List<Integer> arr, int start, int end, List<List<Integer>> res) {
        if (start == end)
            res.add(new ArrayList<>(arr));
        else 
        {
            for (int i = start; i <= end; i++)
              if (hasDuplicate(arr, start, i)==false)   // Check for duplicates before swapping
              {
                  swap(arr, start, i);
                  findAllPermutation(arr, start + 1, end, res);
                  swap(arr, start, i);
              }
        }
    }

    public void swap(List<Integer> arr, int i, int j)
    {
        int temp = arr.get(i);
        arr.set(i, arr.get(j));
        arr.set(j, temp);
    }

    private boolean hasDuplicate(List<Integer> arr, int start, int end) 
    {
        for (int i = start; i < end; i++)
          if (arr.get(i).equals(arr.get(end)))
            return true;

        return false;
    }
}
