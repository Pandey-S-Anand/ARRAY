//Method 1

class Solution{
	public static int findOnlyRepeated(int arr[]){
  	int n=arr.length,res=-1;
	  for(int i=0;i<n;i++)
	    for(int j=i+1;j<n;j++)
	       if(arr[i]==arr[j])
	       {
	         res=arr[i];
	         break;
	       }

	    return res;
	}
}


//Method 2

class Solution{
	public static int findOnlyRepeated(int arr[]){
  	int n=arr.length,res=-1;
	  Arrays.sort(arr);
	  for(int i=0;i<n-1;i++)
	     if(arr[i]==arr[i+1])
	     {
	        res=arr[i];
	        break;
	     }
	      
	   return res;
	}
}


//Method 3

class Solution {
    public static int findOnlyRepeated(int arr[]){
       int n=arr.length,res=-1;
       HashMap<Integer,Integer>hm=new HashMap<>(n);
       
       for(int i=0;i<n;i++)
         if(hm.containsKey(arr[i]))
           hm.put(arr[i],hm.get(arr[i])+1);
         else
           hm.put(arr[i],1);
       
       for(int key:hm.keySet())
         if(hm.get(key)==2)
         {
            res=key;
            break;
         }
             
       return res; 
    }
}


//Method 4

class Solution {
    public static int findOnlyRepeated(int arr[]){
      int n=arr.length,repeating=-1;
      boolean[] visited=new boolean[n];
	    
      for(int i=1;i<n;i++)
         if(visited[i]==true)
         {
           repeating=i;
           break;
         }
         else
           visited[i]=true;
         
      return repeating;
    }
}


//Method 7
import java.util.*;
public class Test
{
     public static void main(String[] args) {
	  Scanner sc=new Scanner(System.in);
	  System.out.println("Enter the Size of the Array");
	  int n=sc.nextInt();
	  if(n>0)
	  {
	     int[] arr=new int[n];
	     System.out.printf("Enter %d Elements of the Array\n",n);
	     for(int i=0;i<n;i++)
	       arr[i]=sc.nextInt();
	        
	     System.out.println("Element occurring Twice is: "+findOnlyRepeated(arr));
	  }
	  else
	     System.out.println("Invalid Choice");
    }
	
    
    public static int findOnlyRepeated(int arr[])
    {
      int n=arr.length,repeating=-1;
      boolean[] isPresent=new boolean[n];
	  
      for(int i=0;i<n;i++)
         if(isPresent[arr[i]]==true)
         {
            repeating=arr[i];
            break;
         }
         else
           isPresent[arr[i]]=true;
      
      return repeating;
    }
}


//Method 8

import java.util.*;
public class Test
{
     public static void main(String[] args) {
	Scanner sc=new Scanner(System.in);
	System.out.println("Enter the Size of the Array");
	int n=sc.nextInt();
	if(n>0)
	{
	   int[] arr=new int[n];
	   System.out.printf("Enter %d Elements of the Array\n",n);
	   for(int i=0;i<n;i++)
	      arr[i]=sc.nextInt();
	        
	   System.out.println("Element occurring Twice is: "+findOnlyRepeated(arr));
	}
	else
	   System.out.println("Invalid Choice");
    }
	
    
    public static int findOnlyRepeated(int arr[])
    {
      int n=arr.length,res=-1;
      for(int i=0;i<n;i++)
      {
         int ele=Math.abs(arr[i]);
	 
         if(arr[ele]<0)
         {
           res=ele;
           break;
         }
	 arr[ele]*=-1;
      }
      
      return res;
    }
}

//Method 9

import java.util.*;
public class Test
{
     public static void main(String[] args) {
    	Scanner sc=new Scanner(System.in);
    	System.out.println("Enter the Size of the Array");
    	int n=sc.nextInt();
	if(n>0)
	{
	   int[] arr=new int[n];
	   System.out.printf("Enter %d Elements of the Array\n",n);
	   for(int i=0;i<n;i++)
	      arr[i]=sc.nextInt();
	        
	   System.out.println("Element occurring Twice is: "+findOnlyRepeated(arr));
    	}
    	else
	  System.out.println("Invalid Choice");
    }
	
    
    public static int findOnlyRepeated(int arr[])
    {
      HashSet<Integer>hs=new HashSet<>();
      int n=arr.length,res=-1;
        
      for(int i=0;i<n;i++)
       if(hs.contains(arr[i]))
       {
          res=arr[i];
          break;
       }
       else
         hs.add(arr[i]);
        
       return res;
    }
}


//Method 10
import java.util.*;
public class Test
{
	public static void main(String[] args) {
	    Scanner sc=new Scanner(System.in);
	    System.out.println("Enter the Size of the Array");
	    int n=sc.nextInt();
	    if(n>0)
	    {
	      int[] arr=new int[n];
	      System.out.printf("Enter %d Elements of the Array\n",n);
	      for(int i=0;i<n;i++)
	        arr[i]=sc.nextInt();
	        
	      System.out.println("Element occurring Twice is: "+findOnlyRepeated(arr));
	    }
	    else
	      System.out.println("Invalid Choice");
     }
	
    
    public static int findOnlyRepeated(int arr[])
    {
       int n=arr.length,arrSum=0,UniqueSum=0;
       HashSet<Integer>hs=new HashSet<>(n);
       for(int i=0;i<n;i++)
       {
          hs.add(arr[i]);
          arrSum+=arr[i];
       }
         
       for(int val: hs)
          UniqueSum+=val; 
        
       int repeated=arrSum-UniqueSum;
       return repeated;
    }
}


//Method 11
import java.util.*;
public class Test
{
       public static void main(String[] args) {
	 Scanner sc=new Scanner(System.in);
	 System.out.println("Enter the Size of the Array");
	 int n=sc.nextInt();
	 if(n>0)
	 {
	    int[] arr=new int[n];
	    System.out.printf("Enter %d Elements of the Array\n",n);
	    for(int i=0;i<n;i++)
	      arr[i]=sc.nextInt();
	        
	    System.out.println("Element occurring Twice is: "+findOnlyRepeated(arr));
	 }
	 else
	   System.out.println("Invalid Choice");
    }
	
    
    public static int findOnlyRepeated(int arr[])
    {
       int n=arr.length,arrSum=0,sum=((n-1)*((n-1)+1))/2;//sum of first (n-1) Natural Numbers
       for(int i=0;i<n;i++)
          arrSum+=arr[i];
          
       int repeating=arrSum-sum;
       return repeating;
    }
}


//Method 12
import java.util.*;
public class Test
{
	public static void main(String[] args) {
	  Scanner sc=new Scanner(System.in);
	  System.out.println("Enter the Size of the Array");
	  int n=sc.nextInt();
	  if(n>0)
	  {
	      int[] arr=new int[n];
	      System.out.printf("Enter %d Elements of the Array\n",n);
	      for(int i=0;i<n;i++)
	        arr[i]=sc.nextInt();
	        
	      System.out.println("Element occurring Twice is: "+findOnlyRepeated(arr));
	  }
	  else
	    System.out.println("Invalid Choice");
    }
	
    
    public static int findOnlyRepeated(int arr[])
    {
        int n=arr.length,XOR1=0,XOR2=0;
        for(int i=1;i<=(n-1);i++)
           XOR1=XOR1^i;
           
        for(int i=0;i<n;i++)
           XOR2=XOR2^arr[i];
           
        int repeating=XOR1^XOR2;
        return repeating;
    }
}


//Method 13 : (Cycle Sort)

import java.util.*;
public class Test
{
	public static void main(String[] args) {
	  Scanner sc=new Scanner(System.in);
	  System.out.println("Enter the Size of the Array");
	  int n=sc.nextInt();
	  if(n>0)
	  {
	     int[] arr=new int[n];
	     System.out.printf("Enter %d Elements of the Array\n",n);
	     for(int i=0;i<n;i++)
	        arr[i]=sc.nextInt();
	        
	     System.out.println("Element occurring Twice is: "+findOnlyRepeated(arr));
	  }
	  else
	    System.out.println("Invalid Choice");
    }
	
    public static int findOnlyRepeated(int arr[])
    {
        int n=arr.length,i=0,res=-1;
        while(i<n)
        {
           int correctIndex=arr[i]-1;
           if (arr[correctIndex]==arr[i])
	      i++;
	   else //if arr[i] is not at its correct index
           {
             int temp=arr[correctIndex];
             arr[correctIndex]=arr[i];
             arr[i]=temp;
           }      
        }  
	
        for(int i=0; i<n; i++) 
           if(arr[i]!=i+1)
           {
             res=arr[i];
             break;
           }
	   
	return res;  
    }
}

//Aliter Implementation

import java.util.*;
public class Test
{
	public static void main(String[] args) {
	  Scanner sc=new Scanner(System.in);
	  System.out.println("Enter the Size of the Array");
	  int n=sc.nextInt();
	  if(n>0)
	  {
	      int[] arr=new int[n];
	      System.out.printf("Enter %d Elements of the Array\n",n);
	      for(int i=0;i<n;i++)
	        arr[i]=sc.nextInt();
	        
	      System.out.println("Element occurring Twice is: "+findOnlyRepeated(arr));
	  }
	  else
	    System.out.println("Invalid Choice");
    }
	
    
    public static int findOnlyRepeated(int arr[])
    {
        int n=arr.length,i=0;
        while(i<n)
        {
           int correctIndex=arr[i]-1;
           if (arr[correctIndex]==arr[i])
	      i++;
	   else //if arr[i] is not at its correct index
           {
             int temp=arr[correctIndex];
             arr[correctIndex]=arr[i];
             arr[i]=temp;
           }      
        }  
        
	return arr[n-1];
    }
}

//Aliter 

import java.util.*;
public class Test
{
	public static void main(String[] args) {
	  Scanner sc=new Scanner(System.in);
	  System.out.println("Enter the Size of the Array");
	  int n=sc.nextInt();
	  if(n>0)
	  {
	      int[] arr=new int[n];
	      System.out.printf("Enter %d Elements of the Array\n",n);
	      for(int i=0;i<n;i++)
	        arr[i]=sc.nextInt();
	        
	      System.out.println("Element occurring Twice is: "+findOnlyRepeated(arr));
	  }
	  else
	    System.out.println("Invalid Choice");
    }
	
    
    public static int findOnlyRepeated(int arr[])
    {
        int n=arr.length,i=0;
        while(i<n)
          if((i+1)==arr[i])
	     i++;
	  else// if arr[i] is not at its correct index then put arr[i] at its correct index
          {
            int correctIndex=arr[i]-1;
            if(arr[correctIndex]==arr[i])
              break;
             
            //Swap
            int temp=arr[correctIndex];
            arr[correctIndex]=arr[i];
            arr[i]=temp;
          }      
	  
    	return arr[i];
    }
}

/*
 Ex-1:
 
 int[] arr={1,3,4,2,2};
 
 Iteration 1 :(i==0)
 arr[0]=1;
 correctIndexOf 1 in a sorted Array =0;
 clearly 1 is at its Correct index i.e 0
 so i++;
 
 Iteration 2 :(i==1)
 arr[1]=3;
 correctIndexOf 3 in a sorted Array =2;
 clearly 3 is not at its Correct index
 so Swap(arr[1],arr[2]);
 
 Resultant Array :
 arr={1,4,3,2,2};
 
 Now 3 is at its Correct Index.i.e 2
 
 
 Iteration 3 :(i==1)
 arr[1]=4;
 correctIndexOf 4 in a sorted Array =3;
 clearly 4 is not at its Correct index
 so Swap(arr[1],arr[3]);
 
 Resultant Array :
 arr={1,2,3,4,2};
 
 Now 4 is at its Correct Index.i.e 3
 
 
 Iteration 4 :(i==1)
 arr[1]=2;
 correctIndexOf 2 in a sorted Array = 1;
 clearly 2 is at its Correct index i.e 1
 so i++;
 
 
 Iteration 5 :(i==2)
 arr[2]=3;
 correctIndexOf 3 in a sorted Array = 2;
 clearly 3 is at its Correct index i.e 2
 so i++;
 
 
 Iteration 6 :(i==3)
 arr[3]=4;
 correctIndexOf 4 in a sorted Array = 3;
 clearly 4 is at its Correct index i.e 3
 so i++;
 
 Iteration 7 :(i==4)
 arr[4]=2;
 correctIndexOf 2 in a sorted Array = 1;
 clearly 2 is at its Correct index i.e 1
 so i++;
 
 //Loop terminates
 
 final Arrray:
 int[] arr={1,2,3,4,2};
 
 now print the element which is not at its correct index i.e arr[i]!=i+1
 Thus the Duplicate number is 2(at index 4).
 

 Ex-2
  
 int[] arr={1,3,2,4,2,2};
 
 Iteration 1 :(i==0)
 arr[0]=1;
 correctIndexOf 1 in a sorted Array =0;
 clearly 1 is at its Correct index i.e 0
 so i++;
 
 Iteration 2 :(i==1)
 arr[1]=3;
 correctIndexOf 3 in a sorted Array =2;
 clearly 3 is not at its Correct index
 so Swap(arr[1],arr[2]);
 
 Resultant Array :
 arr={1,2,3,4,2,2};
 
 Now 3 is at its Correct Index.i.e 2
 
 
 Iteration 3 :(i==1)
 arr[1]=2;
 correctIndexOf 2 in a sorted Array =1;
 clearly 2 is at its Correct index i.e 1
 so i++
 
 
 Iteration 4 :(i==2)
 arr[2]=3;
 correctIndexOf 3 in a sorted Array = 2;
 clearly 3 is at its Correct index i.e 2
 so i++;
 
 
 Iteration 5 :(i==3)
 arr[3]=4;
 correctIndexOf 4 in a sorted Array = 3;
 clearly 4 is at its Correct index i.e 3
 so i++;
 
 
 Iteration 6 :(i==4)
 arr[4]=2;
 correctIndexOf 2 in a sorted Array = 1;
 clearly 2 is at its Correct index
 so i++;


 Iteration 7 :(i==5)
 arr[5]=2;
 correctIndexOf 2 in a sorted Array = 1;
 clearly 2 is at its Correct index.
 so i++;
 
 //Loop terminates
 
 final Arrray:
 int[] arr=arr={1,2,3,4,2,2};
 
 now print the element which is not at its correct index i.e arr[i]!=i+1
 Thus the Duplicate number is 2(at index 4 or 5).
  
  
 /*Optimisation
 In other words all the distinct elements will occupy their correct index while remaining duplicate instances will occupy the remaining indexes,
 so this gurantees that last index will always carry duplicate number.
 */
   
*/
