//Bruteforce Approach

class Solution {
    public int[] plusOne(int[] digits) {
        boolean isAllNines = true;

        for (int digit : digits) {
            if (digit != 9) {
                isAllNines = false;
                break;
            }
        }

        if (isAllNines) {
            int[] incrementedNumber = new int[digits.length + 1]; // Ex: digits={9,9,9} +1 = incrementedNumber={1,0,0,0}
            incrementedNumber[0] = 1;
            return incrementedNumber;
        }

        return incrementDigits(digits);
    }

    public int[] incrementDigits(int[] digits) {
        int[] incrementedNumber = new int[digits.length];

        incrementedNumber[digits.length - 1] = (digits[digits.length - 1] + 1) % 10;
        int carry = (digits[digits.length - 1] + 1) / 10;

        for (int i = digits.length - 2; i >= 0; i--) {
            incrementedNumber[i] = (digits[i] + carry) % 10;
            carry = (digits[i] + carry) / 10;
        }

        return incrementedNumber;
    }
}


//Optimal Approach

class Solution {
    public int[] plusOne(int[] digits) {
        // Traverse the array from right to left
        for (int i = digits.length - 1; i >= 0; i--) {
            if (digits[i] < 9) {
                digits[i] += 1; // Add 1 and return the updated array
                return digits;
            } else {
                digits[i] = 0; // If the current digit is 9, set it to 0
            }
        }

        // If the array consists of all 9s, e.g., 99 or 999, return a new array
        int[] incrementedNumber = new int[digits.length + 1];
        incrementedNumber[0] = 1; // Set the first digit to 1

        return incrementedNumber;
    }
}
