//Bruteforce Approach

class Solution {
    public List<List<Integer>> threeSum(int[] arr) {
      int n=arr.length;
      List<List<Integer>>res=new ArrayList<>();
      Set<List<Integer>>hs= new HashSet<>();
    
      Arrays.sort(arr);
    
      for(int i=0;i<n-2; i++)
      {
        if(arr[i]>0)
          break;
         
        int remTarget=0-arr[i];
        int j=i+1;
        int k=n-1;
        
        while(j<k) 
        {
            if((arr[j]+arr[k])==remTarget)
            {
                List<Integer>triplet=new ArrayList<>(3);
                
                triplet.add(arr[i]);
                triplet.add(arr[j]);
                triplet.add(arr[k]);
                
                hs.add(triplet);
                j++;
                k--;
            } 
            else if((arr[j]+arr[k])>remTarget)
               k--;
            else
               j++;
        }
      }

      for(List<Integer>list :hs)
        res.add(list);
      
      return res; 
    }
}



//Optimal Approach

class Solution {
    public List<List<Integer>> threeSum(int[] arr) {
        int n=arr.length;    
        List<List<Integer>>res=new ArrayList<>();
       
        Arrays.sort(arr);
    
        for(int i = 0; i <(n-2); i++)
        {
          if(arr[i]>0)
            break;
         
          if(i>0 && arr[i]==arr[i-1])//To Avoid Duplicates
             continue;
          
          int remTarget=0-arr[i];
          int j=i+1;
          int k=n-1;
        
          while(j<k) 
          {
              if((arr[j]+arr[k])==remTarget)
              {
                 List<Integer> triplet=new ArrayList<>(3);
                
                 triplet.add(arr[i]);
                 triplet.add(arr[j]);
                 triplet.add(arr[k]);
                
                 res.add(triplet);
                
                 j++;
                 k--;
                
                 while(j<k && arr[j]==arr[j-1]) //To Avoid Duplicates
                    j++;
                
                 while(j<k && arr[k]==arr[k+1]) //To Avoid Duplicates
                    k--;
                
              } 
              else if((arr[j]+arr[k])>remTarget)
                k--;
              else
                j++;
          }
        }

       return res; 
    }
}
