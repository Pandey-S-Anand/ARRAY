//Bruteforce Approach

class Solution {
    public int trap(int[] arr) {
        /*
         * In a sorted array (ascending or descending), no water can be trapped because
         * there are no valleys where water can collect. Ascending arrays form an upward
         * slope, and descending arrays form a downward slope, causing water to flow
         * off. Valleys are essential for trapping water, which sorted arrays lack.
         */
        if (arr.length < 3 || isMonotonicallySorted(arr)) {
            return 0;
        }

        int totalUnitOfWaterTrapped = 0;

        for (int i = 0; i < arr.length; i++) {
            // Find the maximum height to the left of the current index
            int leftMax = maxOnLeft(arr, i);
            // Find the maximum height to the right of the current index
            int rightMax = maxOnRight(arr, i);
            /*
             * If both the left and right maximum heights are greater than the current
             * height, calculate the trapped water at this index and add it to the total.
             */
            if (leftMax > arr[i] && rightMax > arr[i]) {
                totalUnitOfWaterTrapped += (Math.min(leftMax, rightMax) - arr[i]) * 1;
            }
        }

        return totalUnitOfWaterTrapped;
    }

    private int maxOnLeft(int[] arr, int index) {
        int max = Integer.MIN_VALUE;
        for (int i = 0; i < index; i++) {
            max = Math.max(max, arr[i]);
        }

        return max;
    }

    private int maxOnRight(int[] arr, int index) {
        int max = Integer.MIN_VALUE;
        for (int i = index + 1; i < arr.length; i++) {
            max = Math.max(max, arr[i]);
        }
        return max;
    }

    private boolean isMonotonicallySorted(int[] arr) {
        boolean ascendingSorted = true;
        boolean descendingSorted = true;

        for (int i = 0; i < arr.length - 1; i++) {
            if (arr[i] > arr[i + 1]) {
                ascendingSorted = false;
            }

            if (arr[i] < arr[i + 1]) {
                descendingSorted = false;
            }

            if (!ascendingSorted && !descendingSorted) {
                return false;
            }
        }

        return true;
    }
}


//Good Approach

class Solution {
    public int trap(int[] arr) {
        if (arr.length < 3) {
            return 0;
        }

        int totalUnitOfWaterTrapped = 0;
        int[] maxOnLeft = computeMaxLeft(arr);
        int[] maxOnRight = computeMaxRight(arr);

        for (int i = 0; i < arr.length; i++) {
            int leftMax = maxOnLeft[i];
            int rightMax = maxOnRight[i];

            if (leftMax > arr[i] && rightMax > arr[i]) {
                totalUnitOfWaterTrapped += (Math.min(leftMax, rightMax) - arr[i]) * 1;
            }
        }

        return totalUnitOfWaterTrapped;
    }

    private int[] computeMaxLeft(int[] arr) {
        int[] maxOnLeft = new int[arr.length];
        int maxSoFarOnLeft = Integer.MIN_VALUE;

        for (int i = 0; i < arr.length; i++) {
            maxOnLeft[i] = maxSoFarOnLeft;
            maxSoFarOnLeft = Math.max(maxSoFarOnLeft, arr[i]);
        }

        return maxOnLeft;
    }

    private int[] computeMaxRight(int[] arr) {
        int[] maxOnRight = new int[arr.length];
        int maxSoFarOnRight = Integer.MIN_VALUE;

        for (int i = arr.length - 1; i >= 0; i--) {
            maxOnRight[i] = maxSoFarOnRight;
            maxSoFarOnRight = Math.max(maxSoFarOnRight, arr[i]);
        }

        return maxOnRight;
    }
}


//Better Approach

class Solution {
    public int trap(int[] arr) {
        if (arr.length < 3) {
            return 0;
        }

        int totalUnitOfWaterTrapped = 0;
        int maxSoFarOnLeft = Integer.MIN_VALUE;
        int[] maxOnRight = computeMaxRight(arr);

        for (int i = 0; i < arr.length; i++) {
            int rightMax = maxOnRight[i];

            if (maxSoFarOnLeft > arr[i] && rightMax > arr[i]) {
                totalUnitOfWaterTrapped += (Math.min(maxSoFarOnLeft, rightMax) - arr[i]) * 1;
            }

            maxSoFarOnLeft = Math.max(maxSoFarOnLeft, arr[i]);
        }

        return totalUnitOfWaterTrapped;
    }

    private int[] computeMaxRight(int[] arr) {
        int[] maxOnRight = new int[arr.length];
        int maxSoFarOnRight = Integer.MIN_VALUE;

        for (int i = arr.length - 1; i >= 0; i--) {
            maxOnRight[i] = maxSoFarOnRight;
            maxSoFarOnRight = Math.max(maxSoFarOnRight, arr[i]);
        }

        return maxOnRight;
    }
}


//Optimal Approach (Two Pointers)  
