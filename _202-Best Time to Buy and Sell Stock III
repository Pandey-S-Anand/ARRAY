//Bruteforce Approach

class Solution {
    public int maxProfit(int[] prices) {
        return calculateMaxProfit(0, prices, 1, 2);
    }

    private int calculateMaxProfit(int index, int[] prices, int canBuy, int transactionCount) {
        if (transactionCount == 0 || index == prices.length) {
            return 0;
        }

        if (canBuy == 1) {
            int buyStock = -prices[index] + calculateMaxProfit(index + 1, prices, 0, transactionCount);
            int skipBuy = calculateMaxProfit(index + 1, prices, 1, transactionCount);
            return Math.max(buyStock, skipBuy);
        }

        int sellStock = prices[index] + calculateMaxProfit(index + 1, prices, 1, transactionCount - 1);
        int skipSell = calculateMaxProfit(index + 1, prices, 0, transactionCount);
        return Math.max(sellStock, skipSell);
    }
}


//Better Approach

class Solution {
    private int[][][] memo;

    public int maxProfit(int[] prices) {
        memo = new int[prices.length][2][3];
        intializeMemo();
        return calculateMaxProfit(0, prices, 1, 2);
    }

    private int calculateMaxProfit(int index, int[] prices, int canBuy, int transactionCount) {
        if (transactionCount == 0 || index == prices.length) {
            return 0;
        }

        if (memo[index][canBuy][transactionCount] != -1) {
            return memo[index][canBuy][transactionCount];
        }

        if (canBuy == 1) {
            int buyStock = -prices[index] + calculateMaxProfit(index + 1, prices, 0, transactionCount);
            int skipBuy = calculateMaxProfit(index + 1, prices, 1, transactionCount);
            return memo[index][canBuy][transactionCount] = Math.max(buyStock, skipBuy);
        }

        int sellStock = prices[index] + calculateMaxProfit(index + 1, prices, 1, transactionCount - 1);
        int skipSell = calculateMaxProfit(index + 1, prices, 0, transactionCount);
        return memo[index][canBuy][transactionCount] = Math.max(sellStock, skipSell);
    }

    private void intializeMemo() {
        for (int i = 0; i < memo.length; i++) {
            for (int j = 0; j < memo[0].length; j++) {
                Arrays.fill(memo[i][j], -1);
            }
        }
    }
}


//Optimal Approach

//Naive Implementation 

class Solution {
    public int maxProfit(int[] prices) {
        /*
         * dp[day][canBuy][txnCount] represents the maximum profit achievable on a given day with specific conditions:
         *
         * - day: The current day (0-based index; for example, day = 0 corresponds to prices[0], the price on the first trading day).
         * - canBuy: A flag indicating if a stock can be bought (1 if you are allowed to buy, 0 if you are allowed to sell).
         * - txnCount: The number of transactions completed so far (up to 2 transactions are allowed, with txnCount values of 0, 1, or 2).
         */
        int[][][] dp = new int[prices.length][2][3];

        /*
         * On the first trading day, we have the option to buy the stock as we dont hold any stock
         * If we choose to skip buying on the first day, our profit will remain zero,
         * regardless of the number of transactions.
         * However, if we choose to buy the stock, we incur the cost of purchasing it,
         * which results in a negative profit, since profit is calculated as: profit = selling price - buying price.
         */
        dp[0][0][0] = dp[0][0][1] = dp[0][0][2] = 0;

        dp[0][1][0] = dp[0][1][1] = dp[0][1][2] = -prices[0];

        for (int day = 1; day < prices.length; day++) {
            for (int canBuy = 0; canBuy <= 1; canBuy++) {
                for (int txnCount = 0; txnCount <= 2; txnCount++) {
                    int profit;
                    if (canBuy == 1) {
                        int skipBuy = dp[day - 1][1][txnCount];
                        int buyStock = dp[day - 1][0][txnCount] - prices[day];
                        profit = Math.max(skipBuy, buyStock);
                    } else {
                        int skipSell = dp[day - 1][0][txnCount];
                        int sellStock = 0;
                        if (txnCount > 0) {
                            sellStock = dp[day - 1][1][txnCount - 1] + prices[day];
                        }
                        profit = Math.max(skipSell, sellStock);
                    }

                    dp[day][canBuy][txnCount] = profit;
                }
            }
        }
        // Result: Maximum profit on the last day, with all stocks sold and a maximum of 2 transactions completed.
        return dp[prices.length - 1][0][2];
    }
}


//Optimal Implementation 

class Solution {
    public int maxProfit(int[] prices) {
        int[][][] dp = new int[prices.length][2][3];

        dp[0][1][0] = dp[0][1][1] = dp[0][1][2] = -prices[0];

        for (int day = 1; day < prices.length; day++) {
            for (int canBuy = 0; canBuy <= 1; canBuy++) {
                for (int txnCount = 0; txnCount <= 2; txnCount++) {
                    if (canBuy == 1) {
                        dp[day][canBuy][txnCount] = Math.max(dp[day - 1][1][txnCount], dp[day - 1][0][txnCount] - prices[day]);
                    } else {
                        dp[day][canBuy][txnCount] = dp[day - 1][0][txnCount];
                        if (txnCount > 0) {
                            dp[day][canBuy][txnCount] = Math.max(dp[day][canBuy][txnCount], dp[day - 1][1][txnCount - 1] + prices[day]);
                        }
                    }
                }
            }
        }

        return dp[prices.length - 1][0][2];
    }
}


//Aliter (space optimised : 3D to 2 2D array)

class Solution {
    public int maxProfit(int[] prices) {
        int[][] previousRow = new int[2][3];
        int[][] currentRow = new int[2][3];

        previousRow[1][0] = previousRow[1][1] = previousRow[1][2] = -prices[0];

        for (int day = 1; day < prices.length; day++) {
            for (int canBuy = 0; canBuy <= 1; canBuy++) {
                for (int txnCount = 0; txnCount <= 2; txnCount++) {
                    if (canBuy == 1) {
                        currentRow[canBuy][txnCount] = Math.max(previousRow[1][txnCount], previousRow[0][txnCount] - prices[day]);
                    } else {
                        currentRow[canBuy][txnCount] = previousRow[0][txnCount];
                        if (txnCount > 0) {
                            currentRow[canBuy][txnCount] = Math.max(currentRow[canBuy][txnCount], previousRow[1][txnCount - 1] + prices[day]);
                        }
                    }
                }
            }
            int[][] temp = currentRow;
            currentRow = previousRow;
            previousRow = temp;
        }

        return previousRow[0][2];
    }
}


//Aliter (space optimised : 2 2D array to 1 2D array)

class Solution {
    public int maxProfit(int[] prices) {
        int[][] dp = new int[2][3];

        dp[1][0] = dp[1][1] = dp[1][2] = -prices[0];

        for (int day = 1; day < prices.length; day++) {
            for (int canBuy = 0; canBuy <= 1; canBuy++) {
                for (int txnCount = 0; txnCount <= 2; txnCount++) {
                    if (canBuy == 1) {
                        dp[1][txnCount] = Math.max(dp[1][txnCount], dp[0][txnCount] - prices[day]);
                    } else {
                        if (txnCount > 0) {
                            dp[0][txnCount] = Math.max(dp[0][txnCount], dp[1][txnCount - 1] + prices[day]);
                        }
                    }
                }
            }
        }

        return dp[0][2];
    }
}


//Aliter (space optimised : 2D array to 2 1D array)

class Solution {
    public int maxProfit(int[] prices) {
        int[] previousRow = new int[3];
        int[] currentRow = new int[3];

        previousRow[0] = previousRow[1] = previousRow[2] = -prices[0];

        for (int day = 1; day < prices.length; day++) {
            for (int canBuy = 0; canBuy <= 1; canBuy++) {
                for (int txnCount = 0; txnCount <= 2; txnCount++) {
                    if (canBuy == 1) {
                        previousRow[txnCount] = Math.max(previousRow[txnCount], currentRow[txnCount] - prices[day]);
                    } else {
                        if (txnCount > 0) {
                            currentRow[txnCount] = Math.max(currentRow[txnCount], previousRow[txnCount - 1] + prices[day]);
                        }
                    }
                }
            }
        }

        return currentRow[2];
    }
}
