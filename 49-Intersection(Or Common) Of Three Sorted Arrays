//Bruteforce Approach

class Solution {	
    public static List<Integer> intersectionOfThreeSortedArray(int[] arr1,int[] arr2,int[] arr3){
        List<Integer>intersection2=intersectionOfTwoSortedArray(arr1,arr2);
        
        int len=intersection2.size();
        int[] common=new int[len];
        for(int i=0;i<len;i++)
          common[i]=intersection2.get(i);
          
        return intersectionOfTwoSortedArray(common,arr3);
    }
	
    public static List<Integer> intersectionOfTwoSortedArray(int[] arr1,int[] arr2)
    {
        int i=0,j=0,m=arr1.length,n=arr2.length,min;
        List<Integer>intersection=new ArrayList<>();
           
        while(i<m && j<n)
           if(arr1[i]==arr2[j])
           {
              intersection.add(arr1[i]);
              i++;
              j++;
           }
           else
           {
              min=Math.min(arr1[i],arr2[j]);
              if(min==arr1[i])
                i++;
              else if(min==arr2[j])
                j++;
           }
	       
     	return intersection;
    }
}


//Better Approach

class Solution {	
    public static List<Integer> intersectionOfThreeSortedArray(int[] arr1,int[] arr2,int[] arr3){
       HashMap<Integer,Integer>hm=new HashMap<>();
       
       for(int val:arr1)
         if(hm.containsKey(val))
            hm.put(val,hm.get(val)+1);
         else
            hm.put(val,1);
        
        
       for(int val :arr2)
         if(hm.containsKey(val))
            hm.put(val,hm.get(val)+1);
         else
            hm.put(val,1);
        
        
       for(int val :arr3)
         if(hm.containsKey(val))
            hm.put(val,hm.get(val)+1);
         else
            hm.put(val,1);    
       
       int minLen=Math.min(arr1.length,Math.min(arr2.length,arr3.length));
       List<Integer>intersection=new ArrayList<>();
       
       if(minLen==arr1.length)
       {
          for(int val:arr1)
            if(hm.get(val)==3)
	            intersection.add(val); 
       }
       else if(minLen==arr2.length)
       {
          for(int val:arr2)
            if(hm.get(val)==3)
	            intersection.add(val);
       }
       else
       {
          for(int val:arr3)
            if(hm.get(val)==3)
	            intersection.add(val);
       }
       
       return intersection;
    }
}


//Optimal Approach

class Solution{
    public static List<Integer> intersectionOfThreeSortedArray(int[] arr1,int[] arr2,int[] arr3){
        int i=0,j=0,k=0,m=arr1.length,n=arr2.length,o=arr3.length,min;
        List<Integer>intersection=new ArrayList<>();
        
        while(i<m && j<n && k<o)
          if(arr1[i]==arr2[j] && arr2[j]==arr3[k])
          {
              intersection.add(arr1[i]);
              i++;
              j++;
              k++;
          }
          else
          {
              min=Math.min(arr1[i],Math.min(arr2[j],arr3[k]));
              if(min==arr1[i])
                i++;
              else if(min==arr2[j])
                j++;
              else if(min==arr3[k])
                k++;
          }
	     
        return intersection; 
    }
}
