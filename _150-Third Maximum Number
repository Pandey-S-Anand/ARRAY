//Bruteforce Approach

class Solution {
    public int thirdMax(int[] arr) {
      Arrays.sort(arr);
      int newLen=removeDuplicatesFromSortedArray(arr);
      if(newLen<3)
        return arr[newLen-1];
     
      return arr[newLen-3]; 
    }

    public int  removeDuplicatesFromSortedArray(int[] arr)
    {
      int n=arr.length,j=0;
      for(int i=0;i<(n-1);i++)
        if(arr[i]!=arr[i+1])
           arr[j++]=arr[i];
            
       arr[j++]=arr[n-1];
        
      return j;
    }
}



//Better Approach

class Solution {
    public int thirdMax(int[] arr) {
        TreeSet<Integer>ts = new TreeSet<>();
        for(int val:arr) 
          ts.add(val);
        
        if(ts.size()>=3)
        {
           ts.pollLast();
           ts.pollLast();
        }
        
        return ts.last();
    }
}


//Optimal Approach

class Solution {
    public int thirdMax(int[] arr) {
      	long max=Long.MIN_VALUE,secondMax=Long.MIN_VALUE,thirdMax=Long.MIN_VALUE;
        int n=arr.length;
      
        for(int i=0;i<n;i++)
          if(arr[i]>max)
          {
             thirdMax=secondMax;
             secondMax=max;
             max=arr[i];
          }
          else if(arr[i]<max && arr[i]>secondMax)
          {
             thirdMax=secondMax;
             secondMax=arr[i];
          }
          else if(arr[i]<secondMax && arr[i]>thirdMax)
             thirdMax=arr[i]; 
         
        
        if(thirdMax==Long.MIN_VALUE)
          return (int)max;
        else
          return (int)thirdMax;   
    }
}
