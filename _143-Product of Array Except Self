//Bruteforce Approach

class Solution {
    public int[] productExceptSelf(int[] arr) {
        int totalProduct = 1, countZeroes = 0, productWithoutZero = 1;
        int[] productExceptSelf = new int[arr.length];

        for (int val : arr) {
            if (val != 0) {
                productWithoutZero *= val;
            } else {
                countZeroes++;
                if (countZeroes > 1) {
                    return productExceptSelf;
                }
            }

            totalProduct *= val;
        }

        for (int i = 0; i < arr.length; i++) {
            if (arr[i] != 0) {
                productExceptSelf[i] = totalProduct / arr[i];
            } else { // arr[i]==0 and countZeroes==1
                productExceptSelf[i] = productWithoutZero;
            }
        }

        return productExceptSelf;
    }
}


//Better Approach

//Intuitive Implementation

class Solution {
    public int[] productExceptSelf(int[] arr) {
        int[] prefixProduct = new int[arr.length];
        int[] suffixProduct = new int[arr.length];
        int[] productExceptSelf = new int[arr.length];

        prefixProduct[0] = 1;
        for (int i = 1; i < arr.length; i++) {
            prefixProduct[i] = prefixProduct[i - 1] * arr[i - 1];
        }

        suffixProduct[arr.length - 1] = 1;
        for (int i = arr.length - 2; i >= 0; i--) {
            suffixProduct[i] = suffixProduct[i + 1] * arr[i + 1];
        }

        for (int i = 0; i < arr.length; i++) {
            productExceptSelf[i] = prefixProduct[i] * suffixProduct[i];
        }

        return productExceptSelf;
    }
}


//Optimal Implementation

class Solution {
    public int[] productExceptSelf(int[] arr) {
        int[] prefixProduct = new int[arr.length];
        int[] suffixProduct = new int[arr.length];
        int[] productExceptSelf = new int[arr.length];

        for (int i = 0; i < arr.length; i++) {
            if (i == 0) {
                prefixProduct[i] = 1;
                suffixProduct[arr.length - 1 - i] = 1;
            } else {
                prefixProduct[i] = prefixProduct[i - 1] * arr[i - 1];
                suffixProduct[arr.length - 1 - i] = suffixProduct[arr.length - i] * arr[arr.length - i];
            }
        }

        for (int i = 0; i < arr.length; i++) {
            productExceptSelf[i] = prefixProduct[i] * suffixProduct[i];
        }

        return productExceptSelf;
    }
}


//Optimal Approach

class Solution {
    public int[] productExceptSelf(int[] arr) {
        int[] prefixProduct = new int[arr.length];
        int[] productExceptSelf = new int[arr.length];

        prefixProduct[0] = 1;
        for (int i = 1; i < arr.length; i++) {
            prefixProduct[i] = prefixProduct[i - 1] * arr[i - 1];
        }

        int suffixProduct = 1;
        for (int i = arr.length - 1; i >= 0; i--) {
            productExceptSelf[i] = prefixProduct[i] * suffixProduct;
            suffixProduct *= arr[i];
        }

        return productExceptSelf;
    }
}
