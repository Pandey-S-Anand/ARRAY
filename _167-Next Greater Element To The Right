//Bruteforce Approach

class Solution{
    public static long[] nextLargerElement(long[] arr, int n){ 
       long[] res=new long[n];
	   
       for(int i=0;i<n;i++)
	res[i]=nextGreater(i,arr,n);

      return res;
    } 
    
    public static long nextGreater(int idx,long[] arr,int n)
    {
      for(int i=idx+1;i<n;i++)
	if(arr[i]>arr[idx])
           return arr[i];
          
       return -1;
    }
}


//Optimal Approach (Using Stack)

class Solution{
    public static long[] nextLargerElement(long[] arr, int n){ 
        ArrayDeque<Long>stack=new ArrayDeque<>();
        long[] res=new long[n];
      
        for(int i=n-1;i>=0;i--)
  	{
	   while(stack.size()!=0 && stack.peek()<=arr[i])
	     stack.pop();
	     
	   if(stack.size()==0)
	     res[i]=-1;
	   else
	     res[i]=stack.peek();
	    
	  stack.push(arr[i]);
	}
	  
      return res;
    } 
}
