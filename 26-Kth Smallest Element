class Solution{
    public static int kthSmallest(int[] arr, int l, int r, int k) 
    { 
        Arrays.sort(arr);
        return arr[k-1];
    } 
}


//Using MaxHeap
class Solution{
    public static int kthSmallest(int[] arr, int l, int r, int k){ 
      int n=arr.length;
      buildMaxHeap(arr,n);
      
      for(int i=1;i<=(n-k);i++)
      {
         swap(arr,0,n-i);
         heapify(arr,n-i,0);
      }

      return arr[0];
    } 
    
    static void buildMaxHeap(int arr[], int n)
    {
      for(int i=((n/2)-1);i>=0;i--)
        heapify(arr,n,i);
    }
 
    //Heapify function to maintain MaxHeap property.
    static void heapify(int arr[], int n, int i)
    {
      int max=i;
      int lc=(2*i)+1;
      int rc=(2*i)+2;
      
      if(lc<n && arr[max]<arr[lc])
        max=lc;
      if(rc<n && arr[max]<arr[rc])
        max=rc;
        
      if(max!=i)
      {
        swap(arr,i,max);
        heapify(arr,n,max);
      }
    }
    
    static void swap(int[] arr,int i,int j)
    {
        int temp=arr[i];
        arr[i]=arr[j];
        arr[j]=temp;  
    }
}

//Aliter

class Solution{
    public static int kthSmallest(int[] arr, int l, int r, int k) { 
       PriorityQueue<Integer>maxHeap=new PriorityQueue<>(new comp());
       int n=arr.length;

       for(int i=0;i<n;i++)
         maxHeap.add(arr[i]);

       for(int cnt=1;cnt<=(n-k);cnt++)
         maxHeap.poll();

       return maxHeap.poll();  
    } 
}

class comp implements Comparator<Integer>{
    public int compare(Integer a,Integer b){
      int res=a.compareTo(b);
      if(res==0)
        return 0;
      else if(res<0)
        return 1;
      else
        return -1;
    }
}


//Using MinHeap

class Solution{
    public static int kthSmallest(int[] arr, int l, int r, int k) { 
      int n=arr.length;
      buildMinHeap(arr,n);
      
      for(int i=1;i<=(k-1);i++)
      {
         swap(arr,0,n-i);
         heapify(arr,n-i,0);
      }

      return arr[0];
    } 
    
    static void buildMinHeap(int arr[], int n)
    {
      for(int i=((n/2)-1);i>=0;i--)
        heapify(arr,n,i);
    }
 
    //Heapify function to maintain MinHeap property.
    static void heapify(int arr[], int n, int i)
    {
      int min=i;
      int lc=(2*i)+1;
      int rc=(2*i)+2;
      
      if(lc<n && arr[min]>arr[lc])
        min=lc;
      if(rc<n && arr[min]>arr[rc])
        min=rc;
        
      if(min!=i)
      {
        swap(arr,i,min);
        heapify(arr,n,min);
      }
    }
    
    static void swap(int[] arr,int i,int j)
    {
        int temp=arr[i];
        arr[i]=arr[j];
        arr[j]=temp;  
    }
}


//Aliter

class Solution{
    public static int kthSmallest(int[] arr, int l, int r, int k) { 
       PriorityQueue<Integer>minHeap=new PriorityQueue<>();
       int n=arr.length;
       
       for(int i=0;i<n;i++)
         minHeap.add(arr[i]);

       for(int cnt=1;cnt<=(k-1);cnt++)
         minHeap.poll();

       return minHeap.poll();  
    } 
}



//Using QuickSelect
class Solution
{
   public static int kthSmallest(int[] arr, int lb, int ub, int k) 
   { 
      return quickSelect(arr,lb,ub,k);
   } 
    
   public static int quickSelect(int[]arr,int lb,int ub,int k)
   {
      if(lb<ub)
      {
          int index=partition(arr,lb,ub);
          int n=arr.length;
          if((k-1)==index)
            return arr[k-1];
          else if((k-1)<index)
            return quickSelect(arr,lb,index-1,k);
          else
            return quickSelect(arr,index+1,ub,k);
      }
      //if(lb==ub)
      return arr[lb]; //return arr[ub];
   }
   
   
   public static int partition(int[] arr,int lb,int ub)
   {
     int i=lb,j=ub,pivot=arr[lb],n=arr.length;
     
     while(true)
     {
        while(i<n && arr[i]<=pivot )
          i++;
          
        while(j>=0 && arr[j]>pivot)
          j--;
          
        if(i<j) //Swap arr[i] and arr[j]
          swap(arr,i,j);
        else //if i>j => Swap Pivot(i.e arr[lb]) and arr[j]
        {
          swap(arr,lb,j);
          break;
        }
     }
     
     return j;  //index of pivot element    
   }
   
    
   public static void swap(int[]arr,int i,int j)
   {
       int temp=arr[i];
       arr[i]=arr[j];
       arr[j]=temp;
   }
}
