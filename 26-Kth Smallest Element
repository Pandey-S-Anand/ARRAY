//Bruteforce Approach: (Sort in Ascending Order using inbuilt Arrays.sort() method or using any Sorting Algorithm and return Kth Element From the Begining)

class Solution{
    public static int kthSmallest(int[] arr, int l, int r, int k) { 
        Arrays.sort(arr);
        return arr[k-1];
    } 
}

//Better Approach: (Using Descending Bubble Sort)

class Solution{
    public static int kthSmallest(int[] arr, int l, int r, int k) {
      for(int pass=1;pass<=k;pass++){
            boolean swap=false;
            
            for(int j=0;j<(arr.length-pass);j++){
              if(arr[j]<arr[j+1]){
                 swap=true;
                 //Swapping
                 int temp=arr[j];
                 arr[j]=arr[j+1];
                 arr[j+1]=temp;
              }
            }
              
           if(swap==false){
             break;
           }
      }
      return arr[arr.length-k];//Kth element from Last i.e Kth smallest element in the Array
    } 
}


//Good Approach (Using QuickSelect)

class Solution{
   public static int kthSmallest(int[] arr, int lb, int ub, int k) { 
      return quickSelect(arr,lb,ub,k);
   } 
    
   public static int quickSelect(int[]arr,int lb,int ub,int k){
      if(lb<ub){
          int index=partition(arr,lb,ub);
          
          if((k-1)==index){
            return arr[k-1];
          }else if((k-1)<index){
            return quickSelect(arr,lb,index-1,k);
          }else{
            return quickSelect(arr,index+1,ub,k);
          }
      }
      //if(lb==ub)
      return arr[lb]; //return arr[ub];
   }
   
   
   public static int partition(int[] arr,int lb,int ub){
     int i=lb,j=ub,pivot=arr[lb],n=arr.length;
     
     while(true){
        while(i<arr.length && arr[i]<=pivot){
          i++;
        }
          
        while(j>=0 && arr[j]>pivot){
          j--;
        }
          
        if(i<j){ //Swap arr[i] and arr[j]
          swap(arr,i,j);
        }else{ //if i>j => Swap Pivot(i.e arr[lb]) and arr[j]
          swap(arr,lb,j);
          break;
        }
     }
     
     return j;  //index of pivot element    
   }
   
    
   public static void swap(int[]arr,int i,int j){
       int temp=arr[i];
       arr[i]=arr[j];
       arr[j]=temp;
   }
}

//Optimal Approach

//Method 1 : Using MaxHeap

class Solution{
    public static int kthSmallest(int[] arr, int l, int r, int k){ 
      buildMaxHeap(arr,arr.length);
      
      for(int i=1;i<=(arr.length-k);i++){
         arr[0]=arr[arr.length-i];
         heapify(arr,arr.length-i,0);
      }

      return arr[0];
    } 
    
    static void buildMaxHeap(int arr[], int n){
      for(int i=((n/2)-1);i>=0;i--){
        heapify(arr,n,i);
      }
    }
 
    //Heapify function to maintain MaxHeap property.
    static void heapify(int arr[], int n, int i){
      int maxIdx=i;
      int leftChildIdx=(2*i)+1;
      int rightChildIdx=(2*i)+2;
      
      if(leftChildIdx<n && arr[maxIdx]<arr[leftChildIdx]){
        maxIdx=leftChildIdx;
      }
      
      if(rightChildIdx<n && arr[maxIdx]<arr[rightChildIdx]){
        maxIdx=rightChildIdx;
      }
        
      if(maxIdx!=i){
        swap(arr,i,maxIdx);
        heapify(arr,n,maxIdx);
      }
    }
    
    static void swap(int[] arr,int i,int j){
        int temp=arr[i];
        arr[i]=arr[j];
        arr[j]=temp;  
    }
}

//Aliter

class Solution{
    public static int kthSmallest(int[] arr, int l, int r, int k) { 
       PriorityQueue<Integer>maxHeap=new PriorityQueue<>(new MaxHeapComparator());

       for(int num:arr){
         maxHeap.add(num);
       }

       for(int cnt=1;cnt<=(arr.length-k);cnt++){
         maxHeap.poll();
       }

       return maxHeap.poll();  
    } 
}

class MaxHeapComparator implements Comparator<Integer>{
    public int compare(Integer num1,Integer num2){
       return num2.compareTo(num1);
    }
}



//Method 2- Using MinHeap

class Solution{
    public static int kthSmallest(int[] arr, int l, int r, int k) { 
      buildMinHeap(arr);
      
      for(int i=1;i<=(k-1);i++){
         arr[0]=arr[arr.length-i];
         heapify(arr,arr.length-i,0);
      }

      return arr[0];
    } 
    
    static void buildMinHeap(int arr[]){
      for(int i=((arr.length/2)-1);i>=0;i--){
        heapify(arr,arr.length,i);
      }
    }
 
    //Heapify function to maintain MinHeap property.
    static void heapify(int arr[], int n, int i){
      int minIdx=i,leftChildIdx=(2*i)+1,rightChildIdx=(2*i)+2;
      
      if(leftChildIdx<n && arr[minIdx]>arr[leftChildIdx]){
        minIdx=leftChildIdx;
      }
      
      if(rightChildIdx<n && arr[minIdx]>arr[rightChildIdx]){
        minIdx=rightChildIdx;
      }
        
      if(minIdx!=i){
        swap(arr,i,minIdx);
        heapify(arr,n,minIdx);
      }
    }
    
    static void swap(int[] arr,int i,int j){
        int temp=arr[i];
        arr[i]=arr[j];
        arr[j]=temp;  
    }
}

//Aliter

class Solution{
    public static int kthSmallest(int[] arr, int l, int r, int k) { 
       PriorityQueue<Integer>minHeap=new PriorityQueue<>();

       for(int num:arr){
         minHeap.add(num);
       }

       for(int cnt=1;cnt<=(k-1);cnt++){
         minHeap.poll();
       }

       return minHeap.poll();  
    } 
}
