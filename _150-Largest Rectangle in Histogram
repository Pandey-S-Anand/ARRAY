// Bruteforce Approach

class Solution {
    public int largestRectangleArea(int[] heights) {
        int maxArea = 0;
        for (int i = 0; i < heights.length; i++) {
            int height = heights[i];
            int width = nextSmallerElementIndex(heights, i) - (previousSmallerElementIndex(heights, i) + 1);
            int area = height * width;
            maxArea = Math.max(maxArea, area);
        }
        return maxArea;
    }

    private int previousSmallerElementIndex(int[] heights, int index) {
        for (int i = index - 1; i >= 0; i--) {
            if (heights[i] < heights[index]) {
                return i;
            }
        }
        return -1;
    }

    private int nextSmallerElementIndex(int[] heights, int index) {
        for (int i = index + 1; i < heights.length; i++) {
            if (heights[i] < heights[index]) {
                return i;
            }
        }
        return heights.length;
    }
}



//Optimal Approach

class Solution {
    public int largestRectangleArea(int[] heights) {
        int maxArea = 0;
        int[] nextSmallerElementIndex = nextSmallerElementIndex(heights);
        int[] previousSmallerElementIndex = previousSmallerElementIndex(heights);

        for (int i = 0; i < heights.length; i++) {
            int height = heights[i];
            int width = nextSmallerElementIndex[i] - (previousSmallerElementIndex[i] + 1);
            int area = height * width;
            maxArea = Math.max(maxArea, area);
        }

        return maxArea;
    }

    private int[] previousSmallerElementIndex(int[] arr) {
        Deque<Integer> stack = new ArrayDeque<>();
        int[] previousSmallerElementIndex = new int[arr.length];

        for (int i = 0; i < arr.length; i++) {
            while (!stack.isEmpty() && arr[stack.peek()] >= arr[i]) {
                stack.pop();
            }

            if (stack.isEmpty()) {
                previousSmallerElementIndex[i] = -1;
            } else {
                previousSmallerElementIndex[i] = stack.peek();
            }

            stack.push(i);
        }

        return previousSmallerElementIndex;
    }

    private int[] nextSmallerElementIndex(int[] arr) {
        Deque<Integer> stack = new ArrayDeque<>();
        int[] nextSmallerElementIndex = new int[arr.length];

        for (int i = arr.length - 1; i >= 0; i--) {
            while (!stack.isEmpty() && arr[stack.peek()] >= arr[i]) {
                stack.pop();
            }

            if (stack.isEmpty()) {
                nextSmallerElementIndex[i] = arr.length;
            } else {
                nextSmallerElementIndex[i] = stack.peek();
            }

            stack.push(i);
        }

        return nextSmallerElementIndex;
    }
}
