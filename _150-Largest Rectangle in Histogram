// Bruteforce Approach

class Solution {
    public int largestRectangleArea(int[] heights) {
        int maxArea = 0;
        for (int i = 0; i < heights.length; i++) {
            int height = heights[i];
            int width = findNextSmallerElementIndices(heights, i) - (findPreviousSmallerElementIndices(heights, i) + 1);
            int area = height * width;
            maxArea = Math.max(maxArea, area);
        }
        return maxArea;
    }

    private int findPreviousSmallerElementIndices(int[] heights, int index) {
        for (int i = index - 1; i >= 0; i--) {
            if (heights[i] < heights[index]) {
                return i;
            }
        }
        return -1;
    }

    private int findNextSmallerElementIndices(int[] heights, int index) {
        for (int i = index + 1; i < heights.length; i++) {
            if (heights[i] < heights[index]) {
                return i;
            }
        }
        return heights.length;
    }
}



//Optimal Approach

//Naive Implementation

class Solution {
    public int largestRectangleArea(int[] heights) {
        int maxArea = 0;
        int[] nextSmallerElementIndex = findNextSmallerElementIndices(heights);
        int[] previousSmallerElementIndex = findPreviousSmallerElementIndices(heights);

        for (int i = 0; i < heights.length; i++) {
            int height = heights[i];
            int width = nextSmallerElementIndex[i] - previousSmallerElementIndex[i] - 1;
            int area = height * width;
            maxArea = Math.max(maxArea, area);
        }

        return maxArea;
    }

    private int[] findPreviousSmallerElementIndices(int[] heights) {
        Deque<Integer> stack = new ArrayDeque<>();
        int[] previousSmallerElementIndex = new int[heights.length];

        for (int i = 0; i < heights.length; i++) {
            while (!stack.isEmpty() && heights[stack.peek()] >= heights[i]) {
                stack.pop();
            }

            if (stack.isEmpty()) {
                previousSmallerElementIndex[i] = -1;
            } else {
                previousSmallerElementIndex[i] = stack.peek();
            }

            stack.push(i);
        }

        return previousSmallerElementIndex;
    }

    private int[] findNextSmallerElementIndices(int[] heights) {
        Deque<Integer> stack = new ArrayDeque<>();
        int[] nextSmallerElementIndex = new int[heights.length];

        for (int i = heights.length - 1; i >= 0; i--) {
            while (!stack.isEmpty() && heights[stack.peek()] >= heights[i]) {
                stack.pop();
            }

            if (stack.isEmpty()) {
                nextSmallerElementIndex[i] = heights.length;
            } else {
                nextSmallerElementIndex[i] = stack.peek();
            }

            stack.push(i);
        }

        return nextSmallerElementIndex;
    }
}


//Optimal Implementation

class Solution {
    public int largestRectangleArea(int[] heights) {
        int maxArea = 0;
        Deque<Integer> stack = new ArrayDeque<>();
        int[] nextSmallerElementIndex = findNextSmallerElementIndices(heights, stack);

        stack.clear();

        for (int i = 0; i < heights.length; i++) {
            while (!stack.isEmpty() && heights[stack.peek()] >= heights[i]) {
                stack.pop();
            }

            int previousSmallerElementIndex = stack.isEmpty() ? -1 : stack.peek();
            int width = nextSmallerElementIndex[i] - (previousSmallerElementIndex + 1);
            int area = heights[i] * width;
            maxArea = Math.max(maxArea, area);

            stack.push(i);
        }

        return maxArea;
    }

    private int[] findNextSmallerElementIndices(int[] heights, Deque<Integer> stack) {
        int[] nextSmallerElementIndex = new int[heights.length];

        for (int i = heights.length - 1; i >= 0; i--) {
            while (!stack.isEmpty() && heights[stack.peek()] >= heights[i]) {
                stack.pop();
            }

            if (stack.isEmpty()) {
                nextSmallerElementIndex[i] = heights.length;
            } else {
                nextSmallerElementIndex[i] = stack.peek();
            }

            stack.push(i);
        }

        return nextSmallerElementIndex;
    }
}
