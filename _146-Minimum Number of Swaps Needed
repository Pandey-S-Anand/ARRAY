
class Solution {
    int countSwaps(int arr[], int n) {
       return countInversion(arr,n);
    }
    
    public int countInversion(int arr[], int n)
    {
        return mergeSort(arr,0,(n-1));
    }
    
    public int mergeSort(int[] arr,int lb,int ub)
    {
      int inv_count = 0;
      if(lb<ub)
      {
        int mid = (lb + ub)/2;
        inv_count+=mergeSort(arr,lb,mid);
        inv_count+=mergeSort(arr,mid+1,ub);
        inv_count+=merge(arr,lb,mid,ub);
      }
      return inv_count;
    }
   
    public int merge(int arr[],int lb,int mid,int ub)
    {
      int size1=mid-lb+1,size2=ub-mid,invCount=0;
      int[] left=new int[size1];
      int[]right=new int[size2];
      
      for(int i=0;i<size1;i++)
        left[i]=arr[lb+i];
        
      for(int i=0;i<size2;i++)
        right[i]=arr[mid+1+i];
      
      int i=0,j=0,k=lb;
      while((i < size1) && (j < size2))
        if(left[i] <= right[j])
          arr[k++] = left[i++];
        else
        {
          arr[k++] = right[j++];
          invCount = invCount + (size1- i);
        }
    
      while(i < size1)
        arr[k++]=left[i++];
        
      while(j < size2)
        arr[k++] = right[j++];
	
    return invCount;
  }
}

/*

This Problem is very similar to Find the number of reverse Pairs in an array (i<j => arr[i]>arr[j]) All these reverse pairs needed to be swapped in order to sort the array in 
Ascending order,and that count (number of reverse Pairs in an array)  will be the minimum number of adjacent swaps to sort the array in ascending order.

Example :

arr[]={2,20,15,6,10};

Reverse Pairs are :
(20,15)
(20,6)
(20,10)
(15,6)
(15,10)

Swap(20,15);
arr[]={2,15,20,6,10};

Swap(20,6);
arr[]={2,15,6,20,10};

Swap(20,10);
arr[]={2,15,6,10,20};

Swap(15,6);
arr[]={2,6,15,10,20};

Swap(15,10);
arr[]={2,6,10,15,20}; ==>Sorted Array(Ascending Order)

Note :
* A Sorted array (Ascending order) has no Reverse Pairs coz for every i<j => arr[i] < arr[j] so no inversions are Formed.
* A Sorted array (Descending order) has Maximum Reverse Pairs coz for every i<j => arr[i] > arr[j] so Maximum inversions are Formed.
*/
