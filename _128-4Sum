//Bruteforce Approach

class Solution {
    public List<List<Integer>> fourSum(int[] arr, int target) {
        Arrays.sort(arr);
        Set<List<Integer>>hs = new HashSet<>();
        List<List<Integer>> res = new ArrayList<>();
        int n=arr.length;

        for (int i = 0; i < n; i++) 
        {
            for (int j = i + 1; j < n; j++)
            {
                int k = j + 1;
                int l = n - 1;

                while (k < l)
                {
                    long sum = (long)arr[i]+arr[j]+arr[k]+arr[l];
                    
                    if (sum == target) 
                    {
                        List<Integer>quad=new ArrayList<>();
                        quad.add(arr[i]);
                        quad.add(arr[j]);
                        quad.add(arr[k]);
                        quad.add(arr[l]);
                        
                        hs.add(quad);
                        k++;
                        l--;
                    } 
                    else if (sum < target)
                       k++;
                    else
                       l--;
                }
            }
        }

        res.addAll(hs);
        
        return res; 
    }
}


//Optimal Approach


class Solution {
    public List<List<Integer>> fourSum(int[] arr, int target) {
        Arrays.sort(arr);
        List<List<Integer>> res = new ArrayList<>();
        int n=arr.length;

        for (int i = 0; i < n; i++) 
        {
            if(i > 0 && (arr[i-1]==arr[i]))
              continue;

            for (int j = i + 1; j < n; j++)
            {
               if((j-1)>i && arr[j]==arr[j-1]) //To Avoid Duplicates
                  continue;

                int k = j + 1;
                int l = n - 1;

                while (k < l)
                {
                    long sum = (long)arr[i]+arr[j]+arr[k]+arr[l];
                    
                    if (sum == target) 
                    {
                        List<Integer>quad=new ArrayList<>();
                        quad.add(arr[i]);
                        quad.add(arr[j]);
                        quad.add(arr[k]);
                        quad.add(arr[l]);
                        
                        res.add(quad);
                        k++;
                        l--;

                        while(k<l && arr[k]==arr[k-1]) //To Avoid Duplicates
                          k++;
                
                        while(k<l && arr[l]==arr[l+1]) //To Avoid Duplicates
                          l--;
                    } 
                    else if (sum < target)
                       k++;
                    else
                       l--;
                }
            }
        }

        return res; 
    }
}
