//Bruteforce Approach

class Solution {
    public int[] maxSlidingWindow(int[] arr, int k) {
      int n=arr.length;
      int[] res=new int[n-(k-1)];
       
      for(int i=0;i<=(n-k);i++)
      {
          int max=Integer.MIN_VALUE;
          for(int j=i;j<(i+k);j++) 
             if(arr[j]>max)
                max=arr[j];
          
          res[i]=max;
      }
       
     return res; 
    }
}


//Better Approach

class Solution {
    public int[] maxSlidingWindow(int[] arr, int k) {
           int n=arr.length;
           int[] ngeIdx=new int[n];
           ArrayDeque<Integer>stack=new ArrayDeque<>();

           for(int i=(n-1);i>=0;i--)
           {
             while(stack.size()!=0 && arr[stack.peek()]<=arr[i])
               stack.pop();
          
             if(stack.size()==0)
              ngeIdx[i]=n;
             else
              ngeIdx[i]=stack.peek();
          
             stack.push(i);
           }
       
           int[] res=new int[n-(k-1)];
	   
           for(int i=0;i<=(n-k);i++)
           {
              int j=i;
	
              while(ngeIdx[j]<(i+k))
                j=ngeIdx[j];
          
              res[i]=arr[j];
           }
       
        return res; 
    }
}



//Optimal Approach

class Solution {
    public int[] maxSlidingWindow(int[] arr, int k) {
           int n=arr.length;
           int[] ngeIdx=new int[n];
           ArrayDeque<Integer>stack=new ArrayDeque<>();

           for(int i=(n-1);i>=0;i--)
           {
             while(stack.size()!=0 && arr[stack.peek()]<=arr[i])
               stack.pop();
          
             if(stack.size()==0)
              ngeIdx[i]=n;
             else
              ngeIdx[i]=stack.peek();
          
             stack.push(i);
           }
       
           int[] res=new int[n-(k-1)];
           int j=0;
	   
           for(int i=0;i<=(n-k);i++)
           {
	            if(j<i)
                j=i;
	
              while(ngeIdx[j]<(i+k))
                j=ngeIdx[j];
          
              res[i]=arr[j];
           }
       
        return res; 
    }
}
