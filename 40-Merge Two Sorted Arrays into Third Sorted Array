//Bruteforce Approach

class Solution {
    public void merge(int[] arr1, int m, int[] arr2, int n) {
        int idx=0;

	    for(int i=0;i<m;i++)
	      arr1[idx++]=arr1[i];
	      
	    for(int i=0;i<n;i++)
	      arr1[idx++]=arr2[i];
	   
	    Arrays.sort(arr1); 
    }
}


//Better Approach

class Solution {
    public void merge(int[] arr1, int m, int[] arr2, int n) {
       int[] arr=new int[m+n];
	    
	    int idx=0;
      for(int i=0;i<m;i++)
        arr1[idx++]=arr1[i];
        
      for(int i=0;i<n;i++)
      {
         arr1[idx]=arr2[i];
         modifiedInsertionSort(arr1,idx);
         idx++;
      }  
    }

		public void modifiedInsertionSort(int[]arr1,int i)
    {
        int temp=arr1[i],j=i-1;
        while(j>=0 && arr1[j]>temp)
        {
           arr1[j+1]=arr1[j];
           j--;
        }
        arr1[j+1]=temp;
    }
}


//Optimal Approach

class Solution {
    public void merge(int[] arr1, int m, int[] arr2, int n) {
       int i=0,j=0,idx=0;
	     int temp[]=new int[m+n];

	     while(i<m && j<n)
	       if(arr1[i]<=arr2[j])
	         temp[idx++]=arr1[i++];
	       else
	         temp[idx++]=arr2[j++];
           
	     while(i<m)
	       temp[idx++]=arr1[i++];
	          
	     while(j<n)
	       temp[idx++]=arr2[j++];

			 for(int k=0;k<(m+n);k++)
	        arr1[k]=temp[k];
    }
}
