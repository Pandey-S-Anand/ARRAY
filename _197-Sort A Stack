//Iterative Approach

public class Solution {
	public static void sortStack(Stack<Integer> stack) {
		Stack<Integer> auxStack = new Stack<>();

        while (!stack.isEmpty()) {
            int temp = stack.pop();

            while (!auxStack.isEmpty() && temp > auxStack.peek()) {
                stack.push(auxStack.pop());
            }

            auxStack.push(temp);
        }

        while (!auxStack.isEmpty()) {
            stack.push(auxStack.pop());
        }
	}
}


//Recursive Approach

public class Solution {
    public static void sortStack(Stack<Integer> stack) {
        if (stack.isEmpty()) {
            return;
        }

        int topElement = stack.pop();

        sortStack(stack);

        insertInSortedOrder(stack, topElement);
    }

    private static void insertInSortedOrder(Stack<Integer> stack, int element) {
        if (stack.isEmpty() || element > stack.peek()) {
            stack.push(element);
            return;
        }

        int top = stack.pop();

        insertInSortedOrder(stack, element);

        stack.push(top);
    }
}
