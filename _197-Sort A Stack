//Iterative Approach

//Using Extra Space



//Recursive Approach

//Using Extra Space

class GfG {
    public Stack<Integer> sort(Stack<Integer> stack) {
        Stack<Integer> auxStack = new Stack<>();
        sortUsingAuxiliaryStack(stack, auxStack);
        return auxStack;
    }

    private void sortUsingAuxiliaryStack(Stack<Integer> stack, Stack<Integer> auxStack) {
        if (stack.isEmpty()) {
            return;
        }

        int topElement = stack.pop();

        sortUsingAuxiliaryStack(stack, auxStack);

        insertInSortedOrder(auxStack, topElement);
    }

    private void insertInSortedOrder(Stack<Integer> auxStack, int element) {
        if (auxStack.isEmpty() || element > auxStack.peek()) {
            auxStack.push(element);
            return;
        }

        int top = auxStack.pop();

        insertInSortedOrder(auxStack, element);

        auxStack.push(top);
    }
}


//Without Extra Space

class GfG {
    public Stack<Integer> sort(Stack<Integer> stack) {
        sortStackInDescendingOrder(stack);
        return stack;
    }

    private void sortStackInDescendingOrder(Stack<Integer> stack) {
        if (stack.isEmpty()) {
            return;
        }

        int topElement = stack.pop();

        sortStackInDescendingOrder(stack);

        insertInSortedOrder(stack, topElement);
    }

    private void insertInSortedOrder(Stack<Integer> stack, int element) {
        if (stack.isEmpty() || element > stack.peek()) {
            stack.push(element);
            return;
        }

        int top = stack.pop();

        insertInSortedOrder(stack, element);

        stack.push(top);
    }
}
