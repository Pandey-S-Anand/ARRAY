public class Solution {
    public String infixToPrefix(String infixExpression) {
        // Step 1: Reverse the infix expression
        StringBuilder reversedInfixExpression = new StringBuilder(infixExpression).reverse();

        // Step 2: Swap parentheses
        swapParentheses(reversedInfixExpression);

        // Step 3: Convert the reversed infix expression to postfix
        String postfixExpression = infixToPostfix(reversedInfixExpression.toString());

        // Step 4: Reverse the postfix expression to get the final prefix expression
        return new StringBuilder(postfixExpression).reverse().toString();
    }

    private void swapParentheses(StringBuilder expression) {
        for (int i = 0; i < expression.length(); i++) {
            if (expression.charAt(i) == '(') {
                expression.setCharAt(i, ')');
            } else if (expression.charAt(i) == ')') {
                expression.setCharAt(i, '(');
            }
        }
    }

    private String infixToPostfix(String expression) {
        StringBuilder postfix = new StringBuilder();
        Stack<Character> stack = new Stack<>();

        for (int i = 0; i < expression.length(); i++) {
            char ch = expression.charAt(i);

            if (Character.isLetterOrDigit(ch)) {
                postfix.append(ch);
            } else if (ch == '(') {
                stack.push(ch);
            } else if (ch == ')') {
                while (!stack.isEmpty() && stack.peek() != '(') {
                    postfix.append(stack.pop());
                }
                stack.pop();
            } else {
                while (!stack.isEmpty() && stack.peek() != '(' && precedence(ch) < precedence(stack.peek())) {
                    postfix.append(stack.pop());
                }

                if (stack.isEmpty() || stack.peek() == '(') {
                    stack.push(ch);
                } else {
                    if (precedence(ch) == precedence(stack.peek()) && isLeftToRightAssociative(ch)) {
                        postfix.append(stack.pop());
                    }
                    stack.push(ch);
                }
            }
        }

        while (!stack.isEmpty()) {
            postfix.append(stack.pop());
        }

        return postfix.toString();
    }

    private int precedence(char operator) {
        switch (operator) {
            case '^':
                return 3;
            case '*':
            case '/':
                return 2;
            case '+':
            case '-':
                return 1;
            default:
                return -1;
        }
    }

    /**
     * Determines whether the given operator has left-to-right associativity.
     * All operators from the set (+, -, *, /) are left-to-right associative,
     * except for '^', which is right-to-left associative.
     */
    private boolean isLeftToRightAssociative(char operator) {
        return operator != '^'; 
    }
}
