//Bruteforce Approach

class Solution {
    public void nextPermutation(int[] arr) {
      StringBuilder sb=new StringBuilder();

      for(int i=0;i<arr.length;i++)
         sb.append(arr[i]);
      
      List<String>res=findPermutation(sb.toString());

      for(int i=0;i<res.size()-1;i++)
        if(res.get(i).equals(sb.toString()))
        {
          String ans=res.get(i+1);
          for(int j=0;j<ans.length();j++)
           arr[j]=ans.charAt(j)-'0';
          return; 
        }

      Arrays.sort(arr);
    }

    public List<String> findPermutation(String str)
    {
      List<String>res=new ArrayList<>();
      permute(str.toCharArray(), 0, (str.length()-1),res);
     
      Collections.sort(res);
     
     return res;
    }
    
    private void permute(char[]arr, int start, int end,List<String>res)
    {
        if (start == end)
        {
          if(res.contains(String.valueOf(arr))==false)
            res.add(String.valueOf(arr));
        }
        else 
        {
          for (int i = start; i <= end; i++)
          {
            swap(arr, start, i);
            permute(arr, start + 1, end,res);
            swap(arr, start, i);
          }
        }
    }

    public void swap(char[]arr, int i, int j)
    {
        char temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}


//Better Approach

class Solution {
    public void nextPermutation(int[] arr) {
        int bp=-1;

        for(int i=arr.length-2;i>=0;i--)
            if(arr[i]<arr[i+1])
            {
                bp=i;
                break;
            }
  
        if(bp==-1)
          Arrays.sort(arr);
        else
        {
            int idx=-1;
            for(int i=arr.length-1;i>=(bp+1);i--)
                if(arr[i]>arr[bp])
                {
                  idx=i;
                  break;
                }

            swap(arr,bp,idx);
            Arrays.sort(arr,bp+1,arr.length);
        }
    }
    void swap(int[] arr,int i,int j)
    {
        int temp=arr[i];
        arr[i]=arr[j];
        arr[j]=temp;
    }
}


//Optimal Approach

class Solution {
    public void nextPermutation(int[] arr) {
        int bp=-1;

        for(int i=arr.length-2;i>=0;i--)
            if(arr[i]<arr[i+1])
            {
                bp=i;
                break;
            }
  
        if(bp==-1)
          reverse(arr,0);
        else
        {
            int idx=-1;
            for(int i=arr.length-1;i>=(bp+1);i--)
                if(arr[i]>arr[bp])
                {
                  idx=i;
                  break;
                }

            swap(arr,bp,idx);
            reverse(arr,bp+1);
        }
    }

    
    void swap(int[] arr,int i,int j)
    {
        int temp=arr[i];
        arr[i]=arr[j];
        arr[j]=temp;
    }

    void reverse(int[] arr,int start)
    {
        int i=start;
        int j=arr.length-1;
        while(i<j)
        {
          swap(arr,i,j);
          i++;
          j--;
        }
    }
}


/*

Note 1:

An array/string of length N has N! permutations. 

For example, for arr = [1,2,3.4]

The following are all the permutations of arr: 

[1, 2, 3, 4] 
[1, 2, 4, 3] 
[1, 3, 2, 4] 
[1, 3, 4, 2] 
[1, 4, 3, 2] 
[1, 4, 2, 3] 
[2, 1, 3, 4] 
[2, 1, 4, 3] 
[2, 3, 1, 4] 
[2, 3, 4, 1] 
[2, 4, 3, 1] 
[2, 4, 1, 3] 
[3, 2, 1, 4] 
[3, 2, 4, 1] 
[3, 1, 2, 4] 
[3, 1, 4, 2] 
[3, 4, 1, 2] 
[3, 4, 2, 1] 
[4, 2, 3, 1] 
[4, 2, 1, 3] 
[4, 3, 2, 1] 
[4, 3, 1, 2] 
[4, 1, 3, 2]
[4, 1, 2, 3] 

If all the permutations of the array are sorted in ascending order ,then the next permutation of that array is the permutation that follows it in the sorted(Ascending) order.

The following are all the permutations of arr in sorted order: 

[1,2,3,4] 
[1,2,4,3] 
[1,3,2,4] 
[1,3,4,2] 
[1,4,2,3] 
[1,4,3,2] 
[2,1,3,4] 
[2,1,4,3] 
[2,3,1,4] 
[2,3,4,1] 
[2,4,1,3] 
[2,4,3,1] 
[3,1,2,4] 
[3,1,4,2] 
[3,2,1,4] 
[3,2,4,1] 
[3,4,1,2] 
[3,4,2,1] 
[4,1,2,3] 
[4,1,3,2] 
[4,2,1,3] 
[4,2,3,1] 
[4,3,1,2] 
[4,3,2,1]

so the next permutation of {1,2,3,4} is {1,2,4,3}

Note 2:

If all the permutations of an array are sorted in ascending order,On careful observation we find that every permutation has the following structure :

same as immediate previous permutation | break point | Sorted in Descending Order 

Ex:

[4,1,2,3]
   ^  
   |
[4,1,3,2]
4 | 1 | 3, 2

(Immediate previous permutation of [4,1,3,2] is [4,1,2,3])

Note 3:

Approach to solve the problem :

The steps are the following:

1: Find the break-point, i: Break-point means the first index i from the back of the given array where arr[i] becomes smaller than arr[i+1].
For example, if the given array is {2,1,5,4,3,0,0}, the break-point will be index 1(0-based indexing). Here from the back of the array, index 1 is the first index where arr[1] i.e. 1 is smaller than arr[i+1] i.e. 5.

2:
If a break-point does not exist i.e.if the array is sorted in decreasing order, the given permutation is the last one in the sorted order of all possible permutations. So, the next permutation must be the first i.e. the permutation in increasing order.
since the array is sorted in descending order and an array sorted in descending order can be sorted into ascending order either by using Arrays.sort() or by reversing the array.(Note : Reversing the array is the effecient way to sort an array in descending order into ascending order)

3:
If a break-point exists:
(Note: In every permutation after breakpoint(index) the sequence is sorted in descending order)
Find the smallest number in the right half of the breakpoint(bp) (index) 
(i.e.Right half range: (bp+1) to (n-1)) and swap it with arr[bp].

Now sort the right half(sequence) of the breakpoint(index) in ascending order.
(i.e.Right half range: (bp+1) to (n-1)) 

Since the right half(sequence) of the breakpoint is already sorted in descending order so an effecient method to sort it in ascending order is to reverse the entire right half and finally, return the array.

*/
