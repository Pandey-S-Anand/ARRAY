//Bruteforce Approach

class Solution {
    static void reArrange(int[] arr, int n) {

	int[] even=new int[n/2];
	int[] odd=new int[n/2];
	   
	int e=0,o=0;
	   
	for(int i=0;i<n;i++)
	  if((arr[i]%2)==0)
	    even[e++]=arr[i];
	  else
	    odd[o++]=arr[i];
	     
	e=0;o=0;  
	   
	for(int i=0;i<n;i++)
	  if((i%2)==0)
	     arr[i]=even[e++];
	  else
	     arr[i]=odd[o++];
    }
}


//Better Approach

class Solution {
    static void reArrange(int[] arr, int n) {
       int evenIndex=0,oddIndex=1;
       while(evenIndex<n && oddIndex<n)
       {
          while(evenIndex<n && (arr[evenIndex]%2)==0)
            evenIndex+=2;
          while(oddIndex<n && (arr[oddIndex]%2)==1)
            oddIndex+=2;
              
          if(evenIndex<n && oddIndex<n)
          {
                //Swapping
            int temp=arr[evenIndex];
            arr[evenIndex]=arr[oddIndex];
            arr[oddIndex]=temp;
          }
       }
    }
}



//Optimal Approach (Order Of Appearence is Maintained)

class Solution {
    static void reArrange(int[] arr, int n) {
      int wrongIndex = -1;//No Wrong Index
      for (int i=0;i<n;i++)
      {
         if(wrongIndex>=0)
            if((arr[wrongIndex]%2==0 && arr[i]%2!=0) || (arr[wrongIndex]%2!= 0 && arr[i]%2==0))
            {
                rightRotate(arr,wrongIndex,i);
                if((i - wrongIndex)==1)
                   wrongIndex = -1;
                else if ((i - wrongIndex)>= 2)
                   wrongIndex+=2; 
            }
 
         if(wrongIndex==-1)
            if(((i%2)==0 && arr[i]%2!=0)|| ((i%2)!=0 && arr[i]%2==0))
              wrongIndex = i;
      }
    }
    
    public static void rightRotate(int[]arr, int wrongIndex, int index)
    {
       int temp=arr[index];
       for(int i=index;i>wrongIndex;i--)
         arr[i]=arr[i-1];
	      
       arr[wrongIndex]=temp;
    }
}
