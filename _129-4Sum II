//Bruteforce Approach

class Solution {
    public int fourSumCount(int[] arr1, int[] arr2, int[] arr3, int[] arr4) {
      int n=arr1.length,fourSumCount=0;
      for(int i=0;i<n;i++)
        for(int j=0;j<n;j++)
          for(int k=0;k<n;k++)
             for(int l=0;l<n;l++)
                if((arr1[i]+arr2[j]+arr3[k]+arr4[l])==0)
                  fourSumCount++;
      
       return fourSumCount;  
    }
}



//Better Approach

class Solution {
    public int fourSumCount(int[] arr1, int[] arr2, int[] arr3, int[] arr4) {
        HashMap<Integer,Integer>hm=new HashMap<>();
        int n=arr1.length,fourSumCount=0;
      
        for(int l=0;l<n;l++)
          if(hm.containsKey(arr4[l]))
             hm.put(arr4[l],hm.get(arr4[l])+1);
          else
             hm.put(arr4[l],1);
      
      
        for(int i=0;i<n;i++)
         for(int j=0;j<n;j++)
           for(int k=0;k<n;k++)
           {
              int tripletSum=arr1[i]+arr2[j]+arr3[k];
              int remSum=(0-tripletSum);
            
              if(hm.containsKey(remSum))
                fourSumCount+=hm.get(remSum);
           }
      
        return fourSumCount;
    }
}


//Optimal Approach

class Solution {
    public int fourSumCount(int[] arr1, int[] arr2, int[] arr3, int[] arr4) {
      HashMap<Integer,Integer>hm=new HashMap<>();
      int n=arr1.length,fourSumCount=0;
      
      for(int i=0;i<n;i++)
        for(int j=0;j<n;j++)
        {
          int pairSum=arr1[i]+arr2[j];
            
          if(hm.containsKey(pairSum))
            hm.put(pairSum,hm.get(pairSum)+1);
          else
            hm.put(pairSum,1);
        }
          
 
      for(int k=0;k<n;k++)
        for(int l=0;l<n;l++)
        {
          int pairSum=arr3[k]+arr4[l];
          int remPairSum=(0-(arr3[k]+arr4[l]));
            
          if(hm.containsKey(remPairSum))
             fourSumCount+=hm.get(remPairSum);
        }
      
      return fourSumCount;
    }
}
