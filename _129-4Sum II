//Bruteforce Approach

class Solution {
    public int fourSumCount(int[] arr1, int[] arr2, int[] arr3, int[] arr4) {
        int fourSumCount = 0;
        for (int val1 : arr1) {
            for (int val2 : arr2) {
                for (int val3 : arr3) {
                    for (int val4 : arr4) {
                        if (val1 + val2 + val3 + val4 == 0) {
                            fourSumCount++;
                        }
                    }
                }
            }
        }

        return fourSumCount;
    }
}


//Better Approach

class Solution {
    public int fourSumCount(int[] arr1, int[] arr2, int[] arr3, int[] arr4) {
        Map<Integer, Integer> frequencyMap = new HashMap<>();
        int fourSumCount = 0;

        for (int val : arr4) {
            frequencyMap.put(val, frequencyMap.getOrDefault(val, 0) + 1);
        }

        for (int val1 : arr1) {
            for (int val2 : arr2) {
                for (int val3 : arr3) {
                    int remainingSum = (0 - (val1 + val2 + val3));

                    if (frequencyMap.containsKey(remainingSum)) {
                        fourSumCount += frequencyMap.get(remainingSum);
                    }
                }
            }
        }

        return fourSumCount;
    }
}


//Optimal Approach

class Solution {
    public int fourSumCount(int[] arr1, int[] arr2, int[] arr3, int[] arr4) {
      HashMap<Integer,Integer>hm=new HashMap<>();
      int n=arr1.length,fourSumCount=0;
      
      for(int i=0;i<n;i++)
        for(int j=0;j<n;j++)
        {
          int pairSum=arr1[i]+arr2[j];
            
          if(hm.containsKey(pairSum))
            hm.put(pairSum,hm.get(pairSum)+1);
          else
            hm.put(pairSum,1);
        }
          
 
      for(int k=0;k<n;k++)
        for(int l=0;l<n;l++)
        {
          int pairSum=arr3[k]+arr4[l];
          int remPairSum=(0-(arr3[k]+arr4[l]));
            
          if(hm.containsKey(remPairSum))
             fourSumCount+=hm.get(remPairSum);
        }
      
      return fourSumCount;
    }
}
