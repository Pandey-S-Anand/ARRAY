//Bruteforce Approach

class Solution {
    public int trap(int[] arr) {
      int n=arr.length;
      if(n<3 || isAscSorted(arr) || isDescSorted(arr))
	      return 0;
	     
	    int sum=0;

      for(int i=0;i<n;i++)
      {
        int maxLeft=maxOnLeft(arr,n,i);
        int maxRight=maxOnRight(arr,n,i);

        if(maxLeft!=-1 && maxRight!=-1)
          sum+=Math.min(maxLeft,maxRight)-arr[i];
      }
	   
      return sum;  
    }

    public int maxOnLeft(int[] arr,int n,int idx)
    {
        int max=Integer.MIN_VALUE;
        for(int i=0;i<idx;i++)
          if(arr[i]>max)
            max=arr[i];
       
        if(max<=arr[idx])
          return -1;

      return max;
    }

    public int maxOnRight(int[] arr,int n,int idx)
    {
        int max=Integer.MIN_VALUE;
        for(int i=idx+1;i<n;i++)
          if(arr[i]>max)
            max=arr[i];

        if(max<=arr[idx])
          return -1;

      return max; 
    }

    public boolean isAscSorted(int[]arr)
    {
      for(int i=0;i<arr.length-1;i++)
        if(arr[i]>arr[i+1])
          return false;
      return true;
    }

    public boolean isDescSorted(int[]arr)
    {
      for(int i=0;i<arr.length-1;i++)
        if(arr[i]<arr[i+1])
          return false;
      return true;
    }
}


//Optimal Approach

class Solution {
    public int trap(int[] arr) {
      int n=arr.length;
      if(n<3 || isAscSorted(arr) || isDescSorted(arr))
	      return 0;
	     
	    int sum=0;
      
      int[]maxLeft=maxOnLeft(arr,n);
      int[]maxRight=maxOnRight(arr,n);

      for(int i=0;i<n;i++)
      {
        int maxL=maxLeft[i];
        int maxR=maxRight[i];

        if(maxL!=-1 && maxR!=-1)
          sum+=Math.min(maxL,maxR)-arr[i];
      }
	   
      return sum;  
    }

    public int[] maxOnLeft(int[] arr,int n)
    {
        int[] maxLeft=new int[n];
        maxLeft[0]=-1;
        int leftMax=arr[0];
	   
        for(int i=1;i<n;i++)
        {
          if(leftMax>arr[i])
            maxLeft[i]=leftMax;
          else
            maxLeft[i]=-1;

          if(arr[i]>leftMax)
            leftMax=arr[i];
        }

      return maxLeft;
    }

    public int[] maxOnRight(int[] arr,int n)
    {
        int[] maxRight=new int[n];
        maxRight[n-1]=-1;
        int rightMax=arr[n-1];
	  
        for(int i=n-2;i>=0;i--)
        {
          if(rightMax>arr[i])
            maxRight[i]=rightMax;
          else
            maxRight[i]=-1;

          if(arr[i]>rightMax)
            rightMax=arr[i]; 
        }
      return maxRight;
    }

    public boolean isAscSorted(int[]arr)
    {
      for(int i=0;i<arr.length-1;i++)
        if(arr[i]>arr[i+1])
          return false;
      return true;
    }

    public boolean isDescSorted(int[]arr)
    {
      for(int i=0;i<arr.length-1;i++)
        if(arr[i]<arr[i+1])
          return false;
      return true;
    }
}
