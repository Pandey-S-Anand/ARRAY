//Bruteforce Approach

class Solution {
    public int[] singleNumber(int[] arr) {  
      int k=0,n=arr.length;
      int[] res=new int[2];
      for(int i=0;i<n;i++)
      {
          int j;
          for(j=0;j<n;j++)
            if(j!=i && arr[i]==arr[j])
               break;
               
          if(j==n)
          {
             res[k++]=arr[i];
             
             if(k==2)
              break;
          }
      }
      
      return res;
    }
}

//Better Approach

class Solution {
    public int[] singleNumber(int[] arr) {  
      int k=0,n=arr.length;
      int[] res=new int[2];
      HashMap<Integer,Integer>hm=new HashMap<>(n);
      for(int i=0;i<n;i++)
         if(hm.containsKey(arr[i]))
           hm.put(arr[i],hm.get(arr[i])+1);
         else
           hm.put(arr[i],1);
       
      for(int i=0;i<n;i++)
         if(hm.get(arr[i])==1)
         {
           res[k++]=arr[i];
	   if(k==2)
	     break;  
         }
         
      return res;
    }
}


//Optimal Approach

class Solution {
    public int[] singleNumber(int[] arr) {
        int xXory=0;
        for(int val:arr)
          xXory=xXory^val;
             
        int rmsbm=rMSBM(xXory);         
        int x=0,y=0;
        for(int val:arr)
          if((val & rmsbm)==0)
            x=x^val;
          else
            y=y^val;
        
        int[] res=new int[2];
        res[0]=x;
        res[1]=y;
        
        return res;  
    }

    public static int rMSBM(int n)
    {
       int rsbm= n & twosCompliment(n);
       return rsbm;
    }
		
    public static int twosCompliment(int n)
    {
       return -n;//(~n+1);
    }
}
