//Bruteforce Approach

//Forward recursive approach 

class Solution {
    int maxLengthLis = 0;
    private ArrayList<Integer> longestIncreasingSubsequence;

    public ArrayList<Integer> longestIncreasingSubsequence(int n, int arr[]) {
        generateLIS(arr, 0, -1, n, new ArrayList<>());
        return longestIncreasingSubsequence;
    }

    private void generateLIS(int[] arr, int index, int lastIncludedIndex, int n, List<Integer> increasingSubsequence) {
        if (index == n) {
            if (increasingSubsequence.size() > maxLengthLis) {
                maxLengthLis = increasingSubsequence.size();
                longestIncreasingSubsequence = new ArrayList<>(increasingSubsequence);
            }
            return;
        }

        if (lastIncludedIndex == -1 || arr[lastIncludedIndex] < arr[index]) {
            increasingSubsequence.add(arr[index]);
            generateLIS(arr, index + 1, index, n, increasingSubsequence);
            increasingSubsequence.remove(increasingSubsequence.size() - 1); // Backtrack
        }

        generateLIS(arr, index + 1, lastIncludedIndex, n, increasingSubsequence);
    }
}


//Backward recursive approach 

class Solution {
    int maxLengthLis = 0;
    private ArrayList<Integer> longestIncreasingSubsequence;

    public ArrayList<Integer> longestIncreasingSubsequence(int n, int arr[]) {
        generateLIS(arr, n - 1, n, n, new ArrayList<>());
        return longestIncreasingSubsequence;
    }

    private void generateLIS(int[] arr, int index, int n, int lastIncludedIndex, List<Integer> increasingSubsequence) {
        if (index < 0) {
            if (increasingSubsequence.size() >= maxLengthLis) {
                maxLengthLis = increasingSubsequence.size();
                longestIncreasingSubsequence = new ArrayList<>(increasingSubsequence);
            }
            return;
        }

        if (lastIncludedIndex == n || arr[index] < arr[lastIncludedIndex]) {
            increasingSubsequence.add(0, arr[index]);
            generateLIS(arr, index - 1, n, index, increasingSubsequence);
            increasingSubsequence.remove(0); // Backtrack
        }

        generateLIS(arr, index - 1, n, lastIncludedIndex, increasingSubsequence);
    }
}


//Optimal Approach

//Using Forward DP

class Solution {
    public ArrayList<Integer> longestIncreasingSubsequence(int n, int arr[]) {
        int[][] dp = new int[n + 1][n + 1];

        // Fill the dp table to compute the maximum LIS length for each subproblem
        for (int index = 1; index <= n; index++) {
            for (int lastIncludedIdx = index; lastIncludedIdx <= n; lastIncludedIdx++) {
                int include = 0;
                if (lastIncludedIdx == n || arr[index - 1] < arr[lastIncludedIdx]) {
                    include = 1 + dp[index - 1][index - 1];
                }
                int exclude = dp[index - 1][lastIncludedIdx];
                dp[index][lastIncludedIdx] = Math.max(include, exclude);
            }
        }

        ArrayList<Integer> longestIncreasingSubsequence = new ArrayList<>();
        int lastIncludedIdx = n;
        // dp[n][n] stores the length of the LIS
        int currentLISLength = dp[n][n]; // Length we aim to reconstruct

        // Traverse from the end of the array to reconstruct the LIS
        for (int index = n; index >= 1; index--) {
            int include = 0;
            if (lastIncludedIdx == n || arr[index - 1] < arr[lastIncludedIdx]) {
                include = 1 + dp[index - 1][index - 1];
            }
            int exclude = dp[index - 1][lastIncludedIdx];

            /*
             * The value dp[index][lastIncludedIdx] represents the maximum possible length
             * of the LIS from the start of the array up to index `index - 1`.
             * We use this value to determine if including the current element will help form
             * the LIS. If including it yields a higher length, we add it to the result;
             * otherwise, we skip it.
             */

            /*
             * In reconstructing the LIS, using include > exclude ensures we get the longest
             * subsequence that also respects lexicographical order. By favoring elements 
             * later in the sequence when they give equal LIS lengths, we ensure each 
             * position in the LIS is filled by the last qualifying element, resulting 
             * in the smallest possible subsequence in lexicographical terms.
             * 
             * If we used include >= exclude, we would prefer the earliest possible element
             * in the array, which would result in earlier elements appearing in the LIS, 
             * creating a lexicographically larger sequence.
             */
            if (include > exclude) {
                longestIncreasingSubsequence.add(0, arr[index - 1]);
                lastIncludedIdx = index - 1;
                currentLISLength--;  // Reduce the target LIS length by 1
                if (currentLISLength == 0) {
                    break; // Stop once we've collected the full LIS
                }
            }
        }

        return longestIncreasingSubsequence;
    }
}


//Using Backward DP

class Solution {
    public ArrayList<Integer> longestIncreasingSubsequence(int n, int arr[]) {
        int[][] dp = new int[n + 1][n + 1];

        for (int index = n - 1; index >= 0; index--) {
            for (int lastIncludedIdx = index - 1; lastIncludedIdx >= -1; lastIncludedIdx--) {
                int include = 0;
                if (lastIncludedIdx == -1 || arr[lastIncludedIdx] < arr[index]) {
                    include = 1 + dp[index + 1][index + 1];
                }
                int exclude = dp[index + 1][lastIncludedIdx + 1];
                dp[index][lastIncludedIdx + 1] = Math.max(include, exclude);
            }
        }

        ArrayList<Integer> longestIncreasingSubsequence = new ArrayList<>();
        int lastIncludedIdx = -1;
        // dp[0][0] stores the length of the longest increasing subsequence (LIS)
        int currentLISLength = dp[0][0]; // Target length of the LIS sequence to stop at

        for (int index = 0; index < n; index++) {
            int include = 0;
            if (lastIncludedIdx == -1 || arr[lastIncludedIdx] < arr[index]) {
                include = 1 + dp[index + 1][index + 1];
            }
            int exclude = dp[index + 1][lastIncludedIdx + 1];
            /*
             * The value dp[index][lastIncludedIdx + 1] stores the maximum possible length of the LIS
             * starting from index `index`. We can use this value to decide whether to include
             * the current element in our result. If including the element contributes to forming the
             * LIS, we add it to the result; otherwise, we skip it.
             */

            /*
             * In reconstructing the LIS, the condition include >= exclude not only ensures
             * we get the longest increasing subsequence, but it also guarantees the
             * lexicographically smallest version when multiple LIS of the same maximum
             * length exist. By including elements as early as possible, we make sure each
             * position in our LIS is filled by the first eligible element, resulting in the
             * smallest possible subsequence lexicographically.
             * 
             * The = in include >= exclude is essential because it lets us prioritize the
             * earlier element in the array whenever two subsequences of the same length are
             * possible. If we used only include > exclude (excluding the =), then in cases
             * where include and exclude yield the same length, we would skip the current
             * element in favor of a later one. This would allow later elements to enter the
             * LIS, creating a lexicographically larger sequence as it would favor elements
             * from later indices in the array.
             */
            if (include >= exclude) {
                longestIncreasingSubsequence.add(arr[index]);
                lastIncludedIdx = index;
                currentLISLength--; // Reduce the target LIS length by 1
                if (currentLISLength == 0) {
                    break; // Stop once we've collected the full LIS
                }
            }
        }

        return longestIncreasingSubsequence;
    }
}
