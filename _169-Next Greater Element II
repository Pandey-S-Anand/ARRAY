//Bruteforce Approach

class Solution {
    public int[] nextGreaterElements(int[] arr) {
      int n=arr.length;
      int[] res=new int[n];
      
      for(int i=0;i<n;i++)
        res[i]=nge(arr,n,i);
      
      return res;
    }

    public int nge(int[] arr,int n,int idx)
    {
      for(int i=idx+1;i<n;i++)
       if(arr[i]>arr[idx])
         return arr[i];
      
      for(int i=0;i<n;i++)
        if(arr[i]>arr[idx])
          return arr[i];
      
      return -1;
    }
}


//Optimal Approach

class Solution {
    public int[] nextGreaterElements(int[] arr) {
      int n=arr.length;
      ArrayDeque<Integer>stack=new ArrayDeque<>();
      int[] res=new int[n];
      
      for(int i=n-1;i>=0;i--)
      {
	       while(stack.size()!=0 && stack.peek()<=arr[i])
	         stack.pop();
	     
	       if(stack.size()==0)
	         res[i]=-1;
	       else
	         res[i]=stack.peek();
	    
	       stack.push(arr[i]);
       }
	  
       for(int i=n-1;i>=0;i--)
       {
	       while(stack.size()!=0 && stack.peek()<=arr[i])
	         stack.pop();
	     
	       if(stack.size()==0)
	         res[i]=-1;
	       else
	         res[i]=stack.peek();
	    
	      stack.push(arr[i]);
	     }
	  
       return res;
    }
}


//Aliter

class Solution {
    public int[] nextGreaterElements(int[] arr) {
      int n=arr.length;
      ArrayDeque<Integer>stack=new ArrayDeque<>();
      int[] res=new int[n];
      
      for(int i= (2*n)-1; i >= 0; i--)
      {
          while(stack.size()!=0 && stack.peek()<=arr[i % n])
            stack.pop();
            
          if(stack.size()==0) 
            res[i% n] = -1;
          else 
            res[i % n] = stack.peek();
            
        stack.push(arr[i % n]);
      }
	
      return res;
    }
}
