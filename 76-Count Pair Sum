//Bruteforce Approach

class Solution{ 
    static int countPairs(int arr1[],int arr2[], int m, int n, int target) { 
      int cnt=0;
      for(int i=0;i<m;i++)
        for(int j=0;j<n;j++)
          if((arr1[i]+arr2[j])==target)
             cnt++;
      return cnt;
    }
}

//Better Approach

class Solution{ 
    static int countPairs(int arr1[],int arr2[], int m, int n, int target) { 
      int cnt=0;
      for(int i=0;i<m;i++)
          if(binarySearch(arr2,target-arr1[i]))
             cnt++;
             
      return cnt;
    }
    
    public static boolean binarySearch(int[]arr,int key)
    {
      int low=0;
      int high=arr.length-1;
      while(low<=high)
      {
          int mid=(low+high)/2;
          if(arr[mid]==key)
            return true;
          else if(key<arr[mid])
            high=mid-1;
          else if(key>arr[mid])
            low=mid+1;
      }
      return false;//key doesnot exists
    }
}

//Good Approach

class Solution{ 
    static int countPairs(int arr1[],int arr2[], int m, int n, int target) { 
      HashSet<Integer>hs=new HashSet<>();
      for(int val : arr2)
        hs.add(val);
        
      int cnt=0;
      for(int i=0;i<m;i++)
        if(hs.contains(target-arr1[i]))
           cnt++;
           
      return cnt;
    }
}


//Optimal Approach

class Solution{ 
    static int countPairs(int arr1[],int arr2[], int m, int n, int target) { 
       int i=0,j=n-1,cnt=0;
       while(i<m & j>=0)
         if((arr1[i]+arr2[j])==target)
         {
           cnt++;
           i++;
           j--;
         }
         else if((arr1[i]+arr2[j])<target)
           i++;
         else//((arr1[i]+arr2[j])>target)
           j--;
      
      return cnt;
    }
}
