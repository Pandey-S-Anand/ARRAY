//Method 1

class Solution{
	public static int findOnlyRepeated(int arr[]){
  	int n=arr.length,res=-1;
	  for(int i=0;i<n;i++)
	    for(int j=i+1;j<n;j++)
	       if(arr[i]==arr[j])
	       {
	         res=arr[i];
	         break;
	       }

	    return res;
	}
}


//Method 2

class Solution{
	public static int findOnlyRepeated(int arr[]){
  	int n=arr.length,res=-1;
	  Arrays.sort(arr);
	  for(int i=0;i<n-1;i++)
	     if(arr[i]==arr[i+1])
	     {
	        res=arr[i];
	        break;
	     }
	      
	   return res;
	}
}


//Method 3

class Solution {
    public static int findOnlyRepeated(int arr[]){
       int n=arr.length,res=-1;
       HashMap<Integer,Integer>hm=new HashMap<>(n);
       
       for(int i=0;i<n;i++)
         if(hm.containsKey(arr[i]))
           hm.put(arr[i],hm.get(arr[i])+1);
         else
           hm.put(arr[i],1);
       
       for(int key:hm.keySet())
         if(hm.get(key)==2)
         {
            res=key;
            break;
         }
             
       return res; 
    }
}


//Method 4

class Solution {
    public int findDuplicate(int[] arr) {
      int n=arr.length,repeating=-1;
      boolean[] visited=new boolean[n];

      for(int i=0;i<n;i++)
         if(visited[arr[i]]==false)
           visited[arr[i]]=true;
         else
         {
           repeating=arr[i];
           break;
         }

      return repeating;
    }
}

//Method 5

class Solution {
    public int findDuplicate(int[] arr) {
      int n=arr.length,repeated=-1;
      for(int i=0;i<n;i++)
      {
         int ele=Math.abs(arr[i]);
	 
         if(arr[ele]<0)
         {
           repeated=ele;
           break;
         }
	
         arr[ele]*=-1;
      }
      
      return repeated;  
    }
}


//Method 6

class Solution {
    public int findDuplicate(int[] arr) {
      HashSet<Integer>hs=new HashSet<>();
      int n=arr.length,repeated=-1;
        
      for(int i=0;i<n;i++)
       if(hs.contains(arr[i]))
       {
          repeated=arr[i];
          break;
       }
       else
         hs.add(arr[i]);
        
       return repeated;
    }
}

//Method 7

class Solution {
    public int findDuplicate(int[] arr) {
       int n=arr.length,arrSum=0,UniqueSum=0;
       HashSet<Integer>hs=new HashSet<>(n);
       for(int i=0;i<n;i++)
       {
          hs.add(arr[i]);
          arrSum+=arr[i];
       }
         
       for(int val: hs)
          UniqueSum+=val; 
        
       int repeated=arrSum-UniqueSum;
       return repeated;
    }
}


//Method 8

class Solution{
    public static int findOnlyRepeated(int arr[]){
       int n=arr.length,arrSum=0,sum=((n-1)*((n-1)+1))/2;//sum of first (n-1) Natural Numbers
       for(int i=0;i<n;i++)
          arrSum+=arr[i];
          
       int repeating=arrSum-sum;
       return repeating;
    }
}


//Method 9

class Solution{
    public static int findOnlyRepeated(int arr[]) {
        int n=arr.length,XOR1=0,XOR2=0;
        for(int i=1;i<=(n-1);i++)
           XOR1=XOR1^i;
           
        for(int i=0;i<n;i++)
           XOR2=XOR2^arr[i];
           
        int repeating=XOR1^XOR2;
        return repeating;
    }
}


//Method 10 : (Cycle Sort)

class Solution {
    public static int findOnlyRepeated(int arr[]){
        int n=arr.length,i=0,res=-1;
        while(i<n)
        {
           int correctIndex=arr[i]-1;
           if (arr[correctIndex]==arr[i])
	      i++;
	   else //if arr[i] is not at its correct index
           {
             int temp=arr[correctIndex];
             arr[correctIndex]=arr[i];
             arr[i]=temp;
           }      
        }  
	
        for(int j=0; j<n; j++) 
           if(arr[j]!=j+1)
           {
             res=arr[j];
             break;
           }
	   
	return res;  
    }
}

//Aliter Implementation

class Solution {
    public static int findOnlyRepeated(int arr[]){
        int n=arr.length,i=0;
        while(i<n)
        {
           int correctIndex=arr[i]-1;
           if (arr[correctIndex]==arr[i])
	      i++;
	   else //if arr[i] is not at its correct index
           {
             int temp=arr[correctIndex];
             arr[correctIndex]=arr[i];
             arr[i]=temp;
           }      
        }  
        
	return arr[n-1];
    }
}

/*
 Ex-1:
 
 int[] arr={1,3,4,2,2};
 
 Iteration 1 :(i==0)
 arr[0]=1;
 correctIndexOf 1 in a sorted Array =0;
 clearly 1 is at its Correct index i.e 0
 so i++;
 
 Iteration 2 :(i==1)
 arr[1]=3;
 correctIndexOf 3 in a sorted Array =2;
 clearly 3 is not at its Correct index
 so Swap(arr[1],arr[2]);
 
 Resultant Array :
 arr={1,4,3,2,2};
 
 Now 3 is at its Correct Index.i.e 2
 
 
 Iteration 3 :(i==1)
 arr[1]=4;
 correctIndexOf 4 in a sorted Array =3;
 clearly 4 is not at its Correct index
 so Swap(arr[1],arr[3]);
 
 Resultant Array :
 arr={1,2,3,4,2};
 
 Now 4 is at its Correct Index.i.e 3
 
 
 Iteration 4 :(i==1)
 arr[1]=2;
 correctIndexOf 2 in a sorted Array = 1;
 clearly 2 is at its Correct index i.e 1
 so i++;
 
 
 Iteration 5 :(i==2)
 arr[2]=3;
 correctIndexOf 3 in a sorted Array = 2;
 clearly 3 is at its Correct index i.e 2
 so i++;
 
 
 Iteration 6 :(i==3)
 arr[3]=4;
 correctIndexOf 4 in a sorted Array = 3;
 clearly 4 is at its Correct index i.e 3
 so i++;
 
 Iteration 7 :(i==4)
 arr[4]=2;
 correctIndexOf 2 in a sorted Array = 1;
 clearly 2 is at its Correct index i.e 1
 so i++;
 
 //Loop terminates
 
 final Arrray:
 int[] arr={1,2,3,4,2};
 
 now print the element which is not at its correct index i.e arr[i]!=i+1
 Thus the Duplicate number is 2(at index 4).
 

 Ex-2
  
 int[] arr={1,3,2,4,2,2};
 
 Iteration 1 :(i==0)
 arr[0]=1;
 correctIndexOf 1 in a sorted Array =0;
 clearly 1 is at its Correct index i.e 0
 so i++;
 
 Iteration 2 :(i==1)
 arr[1]=3;
 correctIndexOf 3 in a sorted Array =2;
 clearly 3 is not at its Correct index
 so Swap(arr[1],arr[2]);
 
 Resultant Array :
 arr={1,2,3,4,2,2};
 
 Now 3 is at its Correct Index.i.e 2
 
 
 Iteration 3 :(i==1)
 arr[1]=2;
 correctIndexOf 2 in a sorted Array =1;
 clearly 2 is at its Correct index i.e 1
 so i++
 
 
 Iteration 4 :(i==2)
 arr[2]=3;
 correctIndexOf 3 in a sorted Array = 2;
 clearly 3 is at its Correct index i.e 2
 so i++;
 
 
 Iteration 5 :(i==3)
 arr[3]=4;
 correctIndexOf 4 in a sorted Array = 3;
 clearly 4 is at its Correct index i.e 3
 so i++;
 
 
 Iteration 6 :(i==4)
 arr[4]=2;
 correctIndexOf 2 in a sorted Array = 1;
 clearly 2 is at its Correct index
 so i++;


 Iteration 7 :(i==5)
 arr[5]=2;
 correctIndexOf 2 in a sorted Array = 1;
 clearly 2 is at its Correct index.
 so i++;
 
 //Loop terminates
 
 final Arrray:
 int[] arr=arr={1,2,3,4,2,2};
 
 now print the element which is not at its correct index i.e arr[i]!=i+1
 Thus the Duplicate number is 2(at index 4 or 5).
  
  
 /*Optimisation
 In other words all the distinct elements will occupy their correct index while remaining duplicate instances will occupy the remaining indexes,
 so this gurantees that last index will always carry duplicate number.
 */
   
*/
