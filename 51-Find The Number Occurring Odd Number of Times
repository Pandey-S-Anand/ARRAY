//Bruteforce Approach

class Solution{
   static int findSingle(int n, int arr[]){
      int res=-1;
	    for(int i=0;i<n;i++)
	    {
	        int count=0;
	        for(int j=0;j<n;j++)
	            if(arr[i]==arr[j])
	              count++;
		      
	        if((count%2)!=0)
  	    	{
		        res=arr[i];
		        break;
	  	    }
	    }
	    
	    return res;
   }
}

//Better Approach

class Solution{
    static int findSingle(int n, int arr[]){
        int res=-1;
        HashMap<Integer,Integer>hm=new HashMap<>(n);
       
        for(int i=0;i<n;i++)
          if(hm.containsKey(arr[i]))
             hm.put(arr[i],hm.get(arr[i])+1);
          else
             hm.put(arr[i],1);
           
        for(int key:hm.keySet())
           if((hm.get(key)%2)!=0)
	         {
	           res=key;
		         break;
           }
	     
      return res;
    }
}


//Optimal Approach

class Solution{
    static int findSingle(int n, int arr[]){
      int res=0;
	    for(int i=0;i<n;i++)
	       res=res^arr[i];
	       
	    return res;
    }
}
