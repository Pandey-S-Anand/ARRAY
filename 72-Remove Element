//Bruteforce Approach

class Solution {
    public int removeElement(int[] arr, int target) {
      int n=arr.length,j=0;
      for(int i=0;i<n;i++)
        if(arr[i]!=target)
          arr[j++]=arr[i];

      return j;
    }
}


//Better Approach

class Solution {
    public int removeElement(int[] arr, int target) {
        Arrays.sort(arr);
        int first=firstIndex(arr,target);
        if(first==-1)
          return arr.length;

        int last=lastIndex(arr,target);
        
        int j=0;
        for(int i=0;i<first;i++)
          arr[j++]=arr[i];
        for(int i=last+1;i<arr.length;i++)
          arr[j++]=arr[i];
          
        return j; 
    }

    public static int firstIndex(int[]arr,int key)
    {
        int low=0,high=arr.length-1,first=-1,mid;
        while(low<=high)
        {
            mid=(low+high)/2;
            if(arr[mid]==key)
            {
             first=mid;
             high=mid-1;
            }
            else if(key<arr[mid])
             high=mid-1;
           else if(key>arr[mid])
             low=mid+1;
        }

      return first;
    }
   
   
    public static int lastIndex(int[]arr,int key)
    {
        int low=0,high=arr.length-1,last=-1;
        while(low<=high)
        {
          int mid=(low+high)/2;
          if(arr[mid]==key)
          {
             last=mid;
             low=mid+1;
          }
          else if(key<arr[mid])
            high=mid-1;
          else if(key>arr[mid])
            low=mid+1;
        }
       return last;
    }
}


//Optimal Approach

class Solution {
    public int removeElement(int[] arr, int target) {
        return segregateTarget(arr,target);
    }

    public int segregateTarget(int[]arr, int target)
    {
         int n=arr.length,i=0,j=0;
         while(i<n)
          if(arr[i]!=target)
          {
              //Swapping
             int temp=arr[i];
             arr[i]=arr[j];
             arr[j]=temp;
             i++;
             j++;
          }
          else
            i++;

        return j;
    }
}
