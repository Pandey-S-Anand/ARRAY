/*
# Understanding Permutations

Finding all permutations of an array of size n is equivalent to calculating nPr where n = r and r is the length of the array.

nPr :  It is a way to count how many different ways you can arrange r items selected from a larger set of ùëõ distinct items, where the order of selection matters.

When you generate all permutations of an array of size n, you are essentially arranging n distinct items into n positions.

### Formula for Permutations

The formula for permutations is:

nPr = n! / (n - r)!

Numerator n!: Represents all possible arrangements of ùëõ items.
Denominator (n‚àír)!: Divides out the arrangements of the items not chosen, leaving only those arrangements of the r items.

When r = n, this simplifies to:

nPn = n! / (n - n)! = n!

### Example

For an array of size 3, say [a, b, c], the permutations are:

- [a, b, c]
- [a, c, b]
- [b, a, c]
- [b, c, a]
- [c, a, b]
- [c, b, a]

There are 3! = 6 permutations in total, which matches 3P3.

### Additional Information

- Unlike combinations, where the order does not matter, in permutations, different orders of the same items are counted as different arrangements. For example, if you select 2 letters from the set {A, B, C}, the arrangements AB and BA are considered different.
*/

// Method 1

class Solution {
    public List<List<Integer>> permute(int[] arr) {
        List<List<Integer>> permutations = new ArrayList<>();
        findPermutations(arr, new ArrayList<>(), permutations, new boolean[arr.length]);
        return permutations;
    }

    private void findPermutations(int[] arr, List<Integer> currentPermutation, List<List<Integer>> permutations,boolean[] visited) {
        if (currentPermutation.size() == arr.length) {
            permutations.add(new ArrayList<>(currentPermutation));
            return;
        }

        for (int i = 0; i < arr.length; i++) {
            if (!visited[i]) {
                visited[i] = true;
                currentPermutation.add(arr[i]);
                findPermutations(arr, currentPermutation, permutations, visited);
                currentPermutation.remove(currentPermutation.size() - 1);
                visited[i] = false;
            }
        }
    }
}


//Method 2

class Solution {
    public List<List<Integer>> permute(int[] arr) {
        List<List<Integer>> permutations = new ArrayList<>();
        findPermutations(arr, 0, permutations);
        return permutations;
    }

    private void findPermutations(int[] arr, int index, List<List<Integer>> permutations) {
        if (index == arr.length) {
            List<Integer> currentPermutation = new ArrayList<>();
            for (int num : arr) {
                currentPermutation.add(num);
            }
            permutations.add(currentPermutation);
            return;
        }

        for (int i = index; i < arr.length; i++) {
            swap(arr, index, i);
            findPermutations(arr, index + 1, permutations);
            swap(arr, index, i);
        }
    }

    private void swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}
