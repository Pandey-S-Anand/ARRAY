//Method 1

class Solution {
    public List<Integer> findDuplicates(int[] arr) {
        List<Integer>al=new ArrayList<>();
        int n=arr.length;
        for(int i=0;i<n;i++)
          for(int j=i+1;j<n;j++)
            if(arr[i]==arr[j])
              al.add(arr[i]);
            
        return al;
    }
}

//Method 2

class Solution {
    public List<Integer> findDuplicates(int[] arr) {
        List<Integer>al=new ArrayList<>();
        HashMap<Integer,Integer>hm=new HashMap<>();
        int n=arr.length;
        
        for(int i=0;i<n;i++)
           if(hm.containsKey(arr[i]))
             hm.put(arr[i],hm.get(arr[i])+1);
           else
             hm.put(arr[i],1);
        
        for(int key:hm.keySet())
          if(hm.get(key)==2)
            al.add(key);
        
        return al;
    }
}


//Method 3

class Solution {
    public List<Integer> findDuplicates(int[] arr) {
        List<Integer>al=new ArrayList<>();
        int n=arr.length;
        boolean[]visited=new boolean[n+1];
      
        for(int i=0;i<n;i++)
          if(visited[arr[i]]==true)
            al.add(arr[i]);
          else
            visited[arr[i]]=true;
             
      return al;
    }
}


//Method 4

class Solution {
    public List<Integer> findDuplicates(int[] arr) {
        List<Integer>al=new ArrayList<>();
        HashSet<Integer>hs=new HashSet<>();
        int n=arr.length;
        
        for(int i=0;i<n;i++)
          if(hs.contains(arr[i]))
             al.add(arr[i]);
          else
             hs.add(arr[i]);
        
        return al;
    }
}


//Method 5

class Solution {
    public List<Integer> findDuplicates(int[] arr) {
        List<Integer>al=new ArrayList<>();
        Arrays.sort(arr);
        int n=arr.length;
      
        for(int i=0;i<n-1;i++)
          if(arr[i]==arr[i+1])
          {
            al.add(arr[i]);
            i++;
          }     

       return al;
    }
}


//Method 6

class Solution {
    public List<Integer> findDuplicates(int[] arr) {
      List<Integer>al=new ArrayList<>();
      int n=arr.length;
      for(int i=0;i<n;i++)
      {
          int ele=Math.abs(arr[i]);
          int idx=ele-1;
	 
          if(arr[idx]<0)
            al.add(ele);
	  else
            arr[idx]*=-1;
      }
      
      return al;
    }
}

//Method 7

class Solution {
    public List<Integer> findDuplicates(int[] arr) {
        int n=arr.length,i=0;
        while(i<n)
        {
          int correctIndex=arr[i]-1;
          if(arr[correctIndex]==arr[i])
	     i++;
	  else //if arr[i] is not at its correct index
          {
            int temp=arr[correctIndex];
            arr[correctIndex]=arr[i];
            arr[i]=temp;
          }      
        }  
        
        List<Integer>al=new ArrayList<>();
        for (i=0; i<n; i++) 
          if(arr[i]!=i+1)
            al.add(arr[i]);
             
      return al;
    }
}
