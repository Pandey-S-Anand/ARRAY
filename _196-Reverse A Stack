//Recursive Approach

//Naive Implementation (Using Extra Space)

class Solution {
    static void reverseStack(Stack<Integer> stack) {
        if (stack.isEmpty()) {
            return;
        }

        int topElement = stack.pop();
        reverseStack(stack);

        Stack<Integer> temporaryStack = new Stack<>();
        while (!stack.isEmpty()) {
            temporaryStack.push(stack.pop());
        }

        stack.push(topElement);
        while (!temporaryStack.isEmpty()) {
            stack.push(temporaryStack.pop());
        }
    }
}


//Without Exta Space

class Solution {
    static void reverse(Stack<Integer> stack) {
        if (stack.isEmpty()) {
            return;
        }

        int topElement = stack.pop();
        reverse(stack);
        insertAtBottom(stack, topElement);
    }

    private static void insertAtBottom(Stack<Integer> stack, int element) {
        if (stack.isEmpty()) {
            stack.push(element);
            return;
        }

        int topElement = stack.pop();
        insertAtBottom(stack, element);
        stack.push(topElement);
    }
}
