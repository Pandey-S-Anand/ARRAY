// Bruteforce Approach

class Solution {
    public int[] searchRange(int[] arr, int target) {
       int[]res=new int[2];
       int index=binarySearch(arr,target);
       if(index==-1)
       {
          res[0]=-1;
          res[1]=-1;
          return res;
       }

       int firstIndex=index-1;
       while(firstIndex>=0 && arr[firstIndex]==target)
        firstIndex--;

       firstIndex++;

       res[0]=firstIndex; 
       
       int lastIndex=index+1;
       while(lastIndex<arr.length &&arr[lastIndex]==target)
         lastIndex++;

       lastIndex--; 
          
       res[1]=lastIndex;
           
       return res;  
    }

    public int binarySearch(int[]arr,int key)
    {
        int low=0,high=arr.length-1;
        while(low<=high)
        {
            int mid=(low+high)/2;
            if(arr[mid]==key)
              return mid;
            else if(key<arr[mid])
              high=mid-1;
            else if(key>arr[mid])
              low=mid+1;
        }
          
        return -1;//key doesnot exists
    }
}

//Optimal Approach

class Solution {
    public int[] searchRange(int[] arr, int target) {
       int[]res=new int[2];
       res[0]=firstIndex(arr,target);
       if(res[0]==-1)
       {
          res[1]=-1;
          return res;
       }

       res[1]=lastIndex(arr,target);

       return res;  
    }

    public int firstIndex(int[]arr,int key)
    {
        int low=0,high=arr.length-1,first=-1,mid;
        while(low<=high)
        {
            mid=(low+high)/2;
            if(arr[mid]==key)
            {
              first=mid;
              high=mid-1;
            }
            else if(key<arr[mid])
              high=mid-1;
            else if(key>arr[mid])
              low=mid+1;
        }

        return first;
    }
   
   
    public int lastIndex(int[]arr,int key)
    {
        int low=0,high=arr.length-1,last=-1,mid;
        while(low<=high)
        {
          mid=(low+high)/2;
          if(arr[mid]==key)
          {
            last=mid;
            low=mid+1;
          }
          else if(key<arr[mid])
            high=mid-1;
          else if(key>arr[mid])
            low=mid+1;
        }
          
        return last;
    }
}
