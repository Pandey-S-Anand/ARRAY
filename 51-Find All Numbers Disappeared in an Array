//Method 1 

class Solution {
    public List<Integer> findDisappearedNumbers(int[] arr) {
        List<Integer> notPresent = new ArrayList<>();

        for (int num = 1; num <= arr.length; num++) {
            if (!linearSearch(arr, num)) {
                notPresent.add(num);
            }
        }

        return notPresent;
    }

    public boolean linearSearch(int[] arr, int key) {
        int low = 0, high = arr.length - 1;

        while (low <= high) {
            if (arr[low] == key || arr[high] == key) {
                return true;
            }
            low++;
            high--;
        }

        return false;
    }
}


//Method 2

class Solution {
    public List<Integer> findDisappearedNumbers(int[] arr) {
        Set<Integer> set = new HashSet<>();
        List<Integer> notPresent = new ArrayList<>();

        for (int val : arr) {
            set.add(val);
        }

        for (int num = 1; num <= arr.length; num++) {
            if (!set.contains(num)) {
                notPresent.add(num);
            }
        }

        return notPresent;
    }
}


//Method 3

class Solution {
    public List<Integer> findDisappearedNumbers(int[] arr) {
        boolean[] visited = new boolean[arr.length + 1];
        List<Integer> notPresent = new ArrayList<>();

        for (int val : arr) {
            visited[val] = true;
        }

        for (int num = 1; num <= arr.length; num++) {
            if (!visited[num]) {
                notPresent.add(num);
            }
        }

        return notPresent;
    }
}


//Method 4 (Optimal Approach)

/*
For each value in the array mark its presence by making the number negative at that place in array
eg. if you hae array [3,1,4,1] for 3, i will go to index 2 and make its value negative ie. now nums[2] becomes -4. present array: [3,1,-4,1]
for 1, i will go to index 0 and make its value negative ie. now nums[0] becomes -3. present array: [-3,1,-4,1]
for 4, (take abs value), i will go to index 3 and make its value negative ie. now nums[3] becomes -1. present array: [-3,1,-4,-1]
for 1 take abs value), i will go to index 0 as it is already -ve do nothing. present array: [-3,1,-4,-1]
At last I will have [-3,1,-4,-1]. now i will iterate over the array, whichever idx has positive value that number will not be in the array so as we have nums[1]>0 so 2 is not in the list.
*/

class Solution {
    public List<Integer> findDisappearedNumbers(int[] arr) {
        List<Integer> notPresent = new ArrayList<>();

        for (int i = 0; i < arr.length; i++) {
            int ele = Math.abs(arr[i]);

            if (arr[ele - 1] > 0) {
                arr[ele - 1] *= -1;
            }
        }

        for (int i = 0; i < arr.length; i++) {
            if (arr[i] > 0) {
                notPresent.add(i + 1);
            }
        }

        return notPresent;
    }
}
