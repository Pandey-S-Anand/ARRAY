//Bruteforce Approach

class Solution {
    public int[] nextGreaterElement(int[] subset, int[] arr) {
        Map<Integer, Integer> valueAndNextGreaterValueMap = new HashMap<>();

        for (int i = 0; i < arr.length; i++) {
            valueAndNextGreaterValueMap.put(arr[i], nextGreaterValue(i, arr));
        }

        int[] nextGreaterValue = new int[subset.length];
        for (int i = 0; i < subset.length; i++) {
            nextGreaterValue[i] = valueAndNextGreaterValueMap.get(subset[i]);
        }

        return nextGreaterValue;
    }

    private int nextGreaterValue(int index, int[] arr) {
        for (int i = index + 1; i < arr.length; i++) {
            if (arr[i] > arr[index]) {
                return arr[i];
            }
        }

        return -1;
    }
}


//Optimal Approach

class Solution {
    public int[] nextGreaterElement(int[] subset, int[] arr) {
        Deque<Integer> stack = new ArrayDeque<>();
        HashMap<Integer, Integer> valueAndNextGreaterValueMap = new HashMap<>();
        int[] nextGreaterValue = new int[subset.length];

        for (int i = arr.length - 1; i >= 0; i--) {
            while (!stack.isEmpty() && stack.peek() <= arr[i]) {
                stack.pop();
            }

            if (stack.isEmpty()) {
                valueAndNextGreaterValueMap.put(arr[i], -1);
            } else {
                valueAndNextGreaterValueMap.put(arr[i], stack.peek());
            }

            stack.push(arr[i]);
        }

        for (int i = 0; i < subset.length; i++) {
            nextGreaterValue[i] = valueAndNextGreaterValueMap.get(subset[i]);
        }

        return nextGreaterValue;
    }
}
