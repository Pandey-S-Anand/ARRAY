//Bruteforce Approach

class Solution {
    public int maximalSquare(char[][] matrix) {
        int maxSquareArea = 0;
        for (int row = 0; row < matrix.length; row++) {
            for (int col = 0; col < matrix[0].length; col++) {
                if (matrix[row][col] == '1') {
                    int currentMaxSideLength = getMaxSquareSideFromCell(matrix, row, col);
                    int currentSquareArea = currentMaxSideLength * currentMaxSideLength;
                    maxSquareArea = Math.max(maxSquareArea, currentSquareArea);
                }
            }
        }

        return maxSquareArea;
    }

    private int getMaxSquareSideFromCell(char[][] matrix, int row, int col) {
        if (row == matrix.length || col == matrix[0].length) {
            return 0;
        }

        if (matrix[row][col] == '0') {
            return 0;
        }

        int rightCount = getMaxSquareSideFromCell(matrix, row, col + 1);
        int diagonalCount = getMaxSquareSideFromCell(matrix, row + 1, col + 1);
        int downCount = getMaxSquareSideFromCell(matrix, row + 1, col);

        return 1 + Math.min(rightCount, Math.min(diagonalCount, downCount));
    }
}


//Improved Approach

class Solution {
    private int[][] cache;

    public int maximalSquare(char[][] matrix) {
        cache = new int[matrix.length][matrix[0].length];
        intializeCache();

        int maxSquareArea = 0;
        for (int row = 0; row < matrix.length; row++) {
            for (int col = 0; col < matrix[0].length; col++) {
                if (matrix[row][col] == '1') {
                    int currentMaxSideLength = getMaxSquareSideFromCell(matrix, row, col);
                    int currentSquareArea = currentMaxSideLength * currentMaxSideLength;
                    maxSquareArea = Math.max(maxSquareArea, currentSquareArea);
                }
            }
        }

        return maxSquareArea;
    }

    private int getMaxSquareSideFromCell(char[][] matrix, int row, int col) {
        if (row == matrix.length || col == matrix[0].length) {
            return 0;
        }

        if (cache[row][col] != -1) {
            return cache[row][col];
        }

        if (matrix[row][col] == '0') {
            return 0;
        }

        int rightCount = getMaxSquareSideFromCell(matrix, row, col + 1);
        int diagonalCount = getMaxSquareSideFromCell(matrix, row + 1, col + 1);
        int downCount = getMaxSquareSideFromCell(matrix, row + 1, col);

        return cache[row][col] = 1 + Math.min(rightCount, Math.min(diagonalCount, downCount));
    }

    private void intializeCache() {
        for (int i = 0; i < cache.length; i++) {
            Arrays.fill(cache[i], -1);
        }
    }
}
