//Recursive Approach

//Method 1

//Intuitive Implementation 

class Solution {
    private List<List<Integer>> targetSumcombinations;

    public List<List<Integer>> combinationSum(int[] arr, int targetSum) {
        targetSumcombinations = new ArrayList<>();
        findCombinationsWithSumk(arr, 0, targetSum, new ArrayList<>(), 0);
        return targetSumcombinations;
    }

    private void findCombinationsWithSumk(int[] arr, int index, int targetSum, List<Integer> currentCombination, int currentCombinationSum) {
        if (currentCombinationSum == targetSum) {
            targetSumcombinations.add(new ArrayList<>(currentCombination));
            return;
        }

        if (currentCombinationSum > targetSum || index == arr.length) {
            return;
        }

        currentCombination.add(arr[index]);
        currentCombinationSum += arr[index];
        findCombinationsWithSumk(arr, index, targetSum, currentCombination, currentCombinationSum);
        currentCombination.remove(currentCombination.size() - 1);
        currentCombinationSum -= arr[index];
        findCombinationsWithSumk(arr, index + 1, targetSum, currentCombination, currentCombinationSum);
    }
}


//Optimal Implementation 

class Solution {
    private List<List<Integer>> targetSumcombinations;

    public List<List<Integer>> combinationSum(int[] arr, int targetSum) {
        targetSumcombinations = new ArrayList<>();
        findCombinationsWithSumk(arr, 0, targetSum, new ArrayList<>());
        return targetSumcombinations;
    }

    private void findCombinationsWithSumk(int[] arr, int index, int targetSum, List<Integer> currentCombination) {
        if (targetSum == 0) {
            targetSumcombinations.add(new ArrayList<>(currentCombination));
            return;
        }

        if (targetSum < 0 || index == arr.length) {
            return;
        }

        currentCombination.add(arr[index]);
        findCombinationsWithSumk(arr, index, targetSum - arr[index], currentCombination);
        currentCombination.remove(currentCombination.size() - 1);
        findCombinationsWithSumk(arr, index + 1, targetSum, currentCombination);
    }
}


//Method 2

//Intuitive Implementation 

class Solution {
    private List<List<Integer>> targetSumcombinations;

    public List<List<Integer>> combinationSum(int[] arr, int target) {
        targetSumcombinations = new ArrayList<>();
        findCombinationsWithSumk(arr, 0, target, new ArrayList<>(), 0);
        return targetSumcombinations;
    }

    private void findCombinationsWithSumk(int[] arr, int index, int target, List<Integer> currentCombination, int currentCombinationSum) {
        if (currentCombinationSum == target) {
            targetSumcombinations.add(new ArrayList<>(currentCombination));
            return;
        }

        if (currentCombinationSum > target) {
            return;
        }

        for (int i = index; i < arr.length; i++) {
            currentCombination.add(arr[i]);
            currentCombinationSum += arr[i];
            findCombinationsWithSumk(arr, i, target, currentCombination, currentCombinationSum);
            currentCombination.remove(currentCombination.size() - 1);
            currentCombinationSum -= arr[i];
        }
    }
}



//Optimal Implementation 

class Solution {
    private List<List<Integer>> targetSumcombinations;

    public List<List<Integer>> combinationSum(int[] arr, int targetSum) {
        targetSumcombinations = new ArrayList<>();
        findCombinationsWithSumk(arr, 0, targetSum, new ArrayList<>());
        return targetSumcombinations;
    }

    private void findCombinationsWithSumk(int[] arr, int index, int targetSum, List<Integer> currentCombination) {
        if (targetSum == 0) {
            targetSumcombinations.add(new ArrayList<>(currentCombination));
            return;
        }

        if (targetSum < 0) {
            return;
        }

        for (int i = index; i < arr.length; i++) {
            currentCombination.add(arr[i]);
            findCombinationsWithSumk(arr, i, targetSum - arr[i], currentCombination);
            currentCombination.remove(currentCombination.size() - 1);
        }
    }
}
