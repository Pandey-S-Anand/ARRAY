//Bruteforce Approach

class Solution {
	public static List<Integer> unionOfTwoSortedArrayContainingDuplicates(int[] arr1,int[] arr2)
	{
	    int newLen1=removeDuplicatesFromSortedArray(arr1);
	    int newLen2=removeDuplicatesFromSortedArray(arr2);
	    return unionOfTwoSortedArray(arr1,newLen1,arr2,newLen2);
	}
	
  public static int removeDuplicatesFromSortedArray(int[] arr)
	{
     int n=arr.length,j=0;
	   for(int i=0;i<(n-1);i++)
        if(arr[i]!=arr[i+1])
           arr[j++]=arr[i];
	       
     arr[j++]=arr[n-1];
	   
	   return j;
	}
	
  public static List<Integer> unionOfTwoSortedArray(int[] arr1,int m,int[] arr2,int n)
	{
      int i=0,j=0,min;
      List<Integer>union=new ArrayList<>();
	    
      while(i<m && j<n)
        if(arr1[i]==arr2[j])
        {
          union.add(arr1[i]);
          i++;
          j++;
        }
        else
        {
            min=Math.min(arr1[i],arr2[j]);
            if(min==arr1[i])
              union.add(arr1[i++]);
            else // if(min==arr2[j])
              union.add(arr2[j++]);
        }
          
        while(i<m)
          union.add(arr1[i++]);
          
        while(j<n)
          union.add(arr2[j++]);
               
    return union;
  }
}


//Better Approach

class Solution {
	public static List<Integer> unionOfTwoSortedArrayContainingDuplicates(int[] arr1,int[] arr2){
    TreeSet<Integer>ts=new TreeSet<>();
    List<Integer>union=new ArrayList<>();
      
    for(int val :arr1)
      ts.add(val);
	    
    for(int val :arr2)
      ts.add(val);
            
	  for(int key:ts)
      union.add(key);
          
    return union;
	}
}


//Optimal Approach

class Solution {
	public static List<Integer> unionOfTwoSortedArrayContainingDuplicates(int[] arr1,int[] arr2){
     int i=0,j=0,m=arr1.length,n=arr2.length,min,prev1=Integer.MIN_VALUE,prev2=Integer.MIN_VALUE;
     List<Integer>union=new ArrayList<>();
	    
     while(i<m && j<n)
     {     
        while(i<m && prev1==arr1[i])
          i++;
          
        while(j<n && prev2==arr2[j])
          j++;

        if(i<m && j<n)
        {
            if(arr1[i]==arr2[j])
            {
                union.add(arr1[i]);
                prev1=arr1[i++];
                prev2=arr2[j++];
            }
            else
            {
                min=Math.min(arr1[i],arr2[j]); 
                if(min==arr1[i])
                {
                   prev1=arr1[i];
                   union.add(arr1[i++]);
                }
                else //if(min==arr2[j])
                {
                   prev2=arr2[j]; 
                   union.add(arr2[j++]); 
                }
            }
        }
     }
            
           if(i<m)
           {
              while(i<m && arr1[i]==arr1[i-1])
                i++;
            
              while(i<(m-1))
                if(arr1[i]!=arr1[i+1])
                  union.add(arr1[i++]);
            
              if(i==(m-1))
                union.add(arr1[i]);   
           } 
        
      
           if(j<n)
           {
               while(j<n && arr2[j]==arr2[j-1])
                 j++;
            
               while(j<(n-1))
                 if(arr2[j]!=arr2[j+1])
                   union.add(arr2[j++]);
            
               if(j==(n-1))
                 union.add(arr2[j]);
           }
          
         return union;
	}
}
