//Bruteforce Approach

class Solution {
	    public static List<Integer> unionOfTwoSortedArray(int[] arr1,int[] arr2){
	       List<Integer>union=new ArrayList<>();
	
         for(int val: arr1)
           union.add(val);
        
         for(int val:arr2)
           if(binarySearch(arr1,val)==false)
              union.add(val);
              
          Collections.sort(union);
        
          return union;
      }
	
	
       public static boolean binarySearch(int[]arr,int key)
       {
         int low=0,high=arr.length-1,mid;
         while(low<=high)
         {
          mid=(low+high)/2;
          if(arr[mid]==key)
            return true;
          else if(key<arr[mid])
            high=mid-1;
          else if(key>arr[mid])
            low=mid+1;
         }
        return false;//key doesnot exists
       }
}



//Better Approach

class Solution {
	public static List<Integer> unionOfTwoSortedArray(int[] arr1,int[] arr2){
     TreeSet<Integer>ts=new TreeSet<>();
     List<Integer>union=new ArrayList<>();
        
     for(int val : arr1)
       ts.add(val);
	    
     for(int val : arr2)
       ts.add(val);
         
	   for(int val:ts)
       union.add(val);
	    
	   return union;
  }
}


//Optimal Approach

class Solution{	
	public static List<Integer> unionOfTwoSortedArray(int[] arr1,int[] arr2){
      int i=0,j=0,m=arr1.length,n=arr2.length;
      List<Integer>union=new ArrayList<>();
	    
      while(i<m && j<n)
         if(arr1[i]==arr2[j])
         {
            union.add(arr1[i]);
            i++;
            j++;
         }
         else
         {
            int min=Math.min(arr1[i],arr2[j]);
            if(min==arr1[i])
              union.add(arr1[i++]);
            else // if(min==arr2[j])
              union.add(arr2[j++]);
         }
          
         while(i<m)
           union.add(arr1[i++]);
          
         while(j<n)
           union.add(arr2[j++]);
               
      return union;
   }
}
