//Naive Approach

class Solution{
    static ArrayList<Integer> sieveOfEratosthenes(int n){
       ArrayList<Integer>primes=new ArrayList<>();
       
       if(n<2){
	     return primes;
       }
	   
       boolean isPrime[]=new boolean[n+1];
       Arrays.fill(isPrime,2,n+1,true);
          
        for(int num=2;num<=n;num++){
          if(isPrime[num]==true){
             for(int mark=(num*2);mark<=n;mark+=num){
                isPrime[mark]=false;
             }
          }
        }
                
        for(int i=2;i<=n;i++){
          if(isPrime[i]==true){
             primes.add(i);
          }
        }
        
        return primes;
    }
}

//Good Implementation

class Solution{
    static ArrayList<Integer> sieveOfEratosthenes(int n){
       ArrayList<Integer>primes=new ArrayList<>();
       
       if(n<2){
	 return primes;
       }
	   
       boolean isPrime[]=new boolean[n+1];
       Arrays.fill(isPrime,2,n+1,true);
          
        for(int num=2;num<=(n/2);num++){
          if(isPrime[num]==true){
             for(int mark=(num*2);mark<=n;mark+=num){
                isPrime[mark]=false;
             }
          }
        }
                
        for(int i=2;i<=n;i++){
          if(isPrime[i]==true){
             primes.add(i);
          }
        }
        
        return primes;
    }
}


//Optimal Implementation

class Solution{
    static ArrayList<Integer> sieveOfEratosthenes(int n){
       ArrayList<Integer>primes=new ArrayList<>();
       
       if(n<2){
	 return primes;
       }
	   
       boolean isPrime[]=new boolean[n+1];
       Arrays.fill(isPrime,2,n+1,true);
          
        for(int num=2;num<=Math.sqrt(n);num++){
          if(isPrime[num]==true){
             for(int mark=(num*num);mark<=n;mark+=num){
                isPrime[mark]=false;
             }
          }
        }
                
        for(int i=2;i<=n;i++){
          if(isPrime[i]==true){
             primes.add(i);
          }
        }
        
        return primes;
    }
}
