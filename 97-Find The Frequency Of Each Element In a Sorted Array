//Intuitive Approach

class Solution{
    public static void printFreq(int arr[]){
       int n=arr.length;
       HashMap<Integer,Integer>hm=new HashMap<>();
       
       for(int i=0;i<n;i++)
         if(hm.containsKey(arr[i]))
           hm.put(arr[i],hm.get(arr[i])+1); 
         else
           hm.put(arr[i],1);
       
       for(int i=0;i<n;i++)
          if(hm.containsKey(arr[i]))
          {
            System.out.println(arr[i]+"=>"+hm.get(arr[i]));
            hm.remove(arr[i]);
          }
    }
}

//Better Approach


class Solution{
    public static void printFreq(int arr[]){
       int n=arr.length;
       TreeMap<Integer,Integer>tm=new TreeMap<>();
       
       for(int i=0;i<n;i++)
         if(tm.containsKey(arr[i]))
           tm.put(arr[i],tm.get(arr[i])+1); 
         else
           tm.put(arr[i],1);
       
       for(int key:tm.keySet())
           System.out.println(key+"=>"+tm.get(key));
    }
}


//Optimal Approach

class Solution{
   public static void printFreq(int[] arr){
       int i,freq=1,n=arr.length;
       for(i=0;i<(n-1);i++)
	  if(arr[i]==arr[i+1])
	     freq++;
	  else
	  {
	     System.out.println(arr[i]+"=>"+freq);
	     freq=1;
	  }
	       
       if(i==(n-1))
	 System.out.println(arr[i]+"=>"+freq);
   }
}
