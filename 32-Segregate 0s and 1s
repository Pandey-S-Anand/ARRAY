//Bruteforce Approach

class Solution {
    void segregate0and1(int[] arr, int n) {
       int k=0;
       int temp[]=new int[n];
             
       for(int i=0;i<n;i++)
          if(arr[i]==0)
             k++;
       
       for(int i=0;i<n;i++)
          if(arr[i]==1)
             temp[k++]=arr[i];
             
       for(int i=0;i<n;i++)
         arr[i]=temp[i];
    }
}

//Improved Approach

class Solution {
    void segregate0and1(int[] arr, int n) {
      int count0=0;
      for(int i=0;i<n;i++)
         if(arr[i]==0)
            count0++;
      
      int idx=0;        
      for(int i=1;i<=count0;i++)
         arr[idx++]=0;
      for(int i=1;i<=(n-count0);i++)
         arr[idx++]=1;
    }
}


//Better Approach

class Solution {
    void segregate0and1(int[] arr, int n) {
      int start=0,end=(n-1);
      
      while(start<end)
      {
          while(start<n && arr[start]==0)
            start++;
            
          while(end>=0 && arr[end]==1)
            end--;
            
          if(start<end)
          {
             swap(arr,start,end);
             start++;
             end--;
          }
       }
    }
    
    public void swap(int[]arr,int start,int end)
    {
      int temp=arr[start];
      arr[start]=arr[end];
      arr[end]=temp;
    }
}


//Optimal Approach

class Solution {
    void segregate0and1(int[] arr, int n) {
       int i=0,j=0;
       while(i<n)
          if(arr[i]==0)
          {
             swap(arr,i,j);
             i++;
             j++;
          }
          else
            i++;
    }
    
   public void swap(int[]arr,int i,int j)
   {
       int temp=arr[i];
       arr[i]=arr[j];
       arr[j]=temp;
   }
}


