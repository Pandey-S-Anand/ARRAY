/*
There can only be three scenarios :
No elements with count more than n/3 exists in the array
1 elements with count more than n/3 exists in the array
2 elements with count more than n/3 exists in the array

Therefore, at most two elements can each appear more than ùëõ / 3 times in the array.
*/

//Bruteforce Approach

class Solution {
    public List<Integer> majorityElement(int[] arr) {
        List<Integer> majorityElements = new ArrayList<>();
        boolean[] visited = new boolean[arr.length];

        for (int i = 0; i < arr.length; i++) {
            int count = 1;

            if (visited[i]) {
                continue;
            }

            for (int j = i + 1; j < arr.length; j++) {
                if (arr[i] == arr[j]) {
                    count++;
                    visited[j] = true;
                }
            }

            if (count > (arr.length / 3)) {
                majorityElements.add(arr[i]);
            }

            if (majorityElements.size() == 2) {
                break;
            }
        }

        return majorityElements;
    }
}



//Good Approach

class Solution {
    public List<Integer> majorityElement(int[] arr) {
        List<Integer> majorityElements = new ArrayList<>();

        for (int i = 0; i < arr.length; i++) {
            int count = 1;

            for (int j = i + 1; j < arr.length; j++) {
                if (arr[i] == arr[j]) {
                    count++;
                }
            }

            if (count > (arr.length / 3) && !majorityElements.contains(arr[i])) {
                majorityElements.add(arr[i]);
            }

            if (majorityElements.size() == 2) {
                break;
            }
        }

        return majorityElements;
    }
}


//Better Approach

class Solution {
    public List<Integer> findMajorityElements(int[] nums) {
        List<Integer> majorityElements = new ArrayList<>();
        Map<Integer, Integer> frequencyMap = new HashMap<>();

        for (int num : nums) {
            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);
        }

        for (int num : frequencyMap.keySet()) {
            if (frequencyMap.get(num) > (nums.length / 3)) {
                majorityElements.add(num);
            }

            if (majorityElements.size() == 2) {
                break;
            }
        }

        return majorityElements;
    }
}



//Optimal Approach

class Solution {
    public List<Integer> majorityElement(int[] arr) {
        int majorityCandidate1 = -1, majorityCandidate2 = -1, voteCount1 = 0, voteCount2 = 0;

        for (int num : arr) {
            /*
             * When voteCount1 is zero, it indicates that majorityCandidate1 is no
             * longer a potential majority candidate and a new candidate should be
             * considered for majorityCandidate1. However, this new candidate should not
             * be the same as majorityCandidate2 to maintain distinct candidates. This is
             * why we use the check 'num != majorityCandidate2'.
             * Similarly, when voteCount2 is zero, it indicates that majorityCandidate2
             * is no longer a potential majority candidate and a new candidate should be
             * considered for majorityCandidate2. However, this new candidate should not
             * be the same as majorityCandidate1 to maintain distinct candidates.
             * Thus, we use the check 'num != majorityCandidate1'.
             */
            if (voteCount1 == 0 && num != majorityCandidate2) {
                majorityCandidate1 = num;
                voteCount1 = 1;
            } else if (num == majorityCandidate1) {
                voteCount1++;
            } else if (voteCount2 == 0 && num != majorityCandidate1) {
                majorityCandidate2 = num;
                voteCount2 = 1;
            } else if (num == majorityCandidate2) {
                voteCount2++;
            } else {
                voteCount1--;
                voteCount2--;
            }
        }

        List<Integer> majorityElements = new ArrayList<>();
        voteCount1 = 0;
        voteCount2 = 0;

        for (int num : arr) {
            if (num == majorityCandidate1) {
                voteCount1++;
            } else if (num == majorityCandidate2) {
                voteCount2++;
            }
        }

        if (voteCount1 > (arr.length / 3)) {
            majorityElements.add(majorityCandidate1);
        }

        if (voteCount2 > (arr.length / 3)) {
            majorityElements.add(majorityCandidate2);
        }

        return majorityElements;
    }
}
