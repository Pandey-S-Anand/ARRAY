//Naive Approach

class Solution {
    public List<Integer> addToArrayForm(int[] num1, int num2) {
        int i = num1.length - 1, carry = 0;
        List<Integer> result = new ArrayList<>();

        while (i >= 0 && num2 != 0) {
            int sum = num1[i] + (num2 % 10) + carry;

            int base = sum % 10;
            carry = sum / 10;

            result.add(0, base);
            i--;
            num2 = num2 / 10;
        }

        while (i >= 0) {
            int sum = (num1[i] + carry);
            int base = sum % 10;
            carry = sum / 10;

            result.add(0, base);
            i--;
        }

        while (num2 != 0) {
            int sum = (num2 % 10 + carry);
            int base = sum % 10;
            carry = sum / 10;

            result.add(0, base);
            num2 = num2 / 10;
        }

        if (carry == 1) {
            result.add(0, carry);
        }

        return result;
    }
}


//Optimal Implementation

class Solution {
    public List<Integer> addToArrayForm(int[] num1, int num2) {
        int i = num1.length - 1, carry = 0;
        List<Integer> result = new LinkedList<>();
        //LinkedList provides O(1) complexity for adding elements at the beginning, whereas ArrayList has O(n) complexity for the same operation.

        while (i >= 0 || num2 != 0 || carry != 0) {
            int sum = carry;
            if (i >= 0) {
                sum += num1[i--];
            }
            if (num2 != 0) {
                sum += num2 % 10;
                num2 = num2 / 10;
            }

            carry = sum / 10;
            result.add(0, sum % 10);
        }

        return result;
    }
}
