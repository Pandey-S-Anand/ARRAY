//Bruteforce Approach

class Solution{
    static List<Integer> leftSmaller(int n, int arr[]){
      ArrayDeque<Integer>stack=new ArrayDeque<>();
      List<Integer>res=new ArrayList<>();
      
      for(int i=0;i<n;i++)
        res.add(0);
	   
      for(int i=0;i<n;i++)
	    res.set(i,previousSmallerElement(arr,n,i));
	   
     return res;
    }
    
   public static int previousSmallerElement(int[]arr,int n,int idx)
   {
     for(int i=idx-1;i>=0;i--)
       if(arr[i]<arr[idx])
	     return arr[i];
	      
     return -1;
   }
}


//Optimal Approach

class Solution{
    static List<Integer> leftSmaller(int n, int arr[]){
      ArrayDeque<Integer>stack=new ArrayDeque<>();
      List<Integer>res=new ArrayList<>();
      
      for(int i=0;i<n;i++)
        res.add(0);
	   
      for(int i=0;i<n;i++)
      {
	      while(stack.size()!=0 && stack.peek()>=arr[i])
	        stack.pop();
	     
	      if(stack.size()==0)
	        res.set(i,-1);
	      else
	        res.set(i,stack.peek());
	    
	      stack.push(arr[i]);
      }
	   
     return res;
    }
}
