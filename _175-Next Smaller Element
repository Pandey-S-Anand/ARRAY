//Bruteforce Approach

class Solution {
	public static int[] help_classmate(int arr[], int n) { 
	   int[] res=new int[n];
	   res[n-1]=-1;
	   
	   for(int i=n-2;i>=0;i--)
         res[i]=nextSmallerElement(arr,n,i);
	   
	   return res;
	} 
	
	public static int nextSmallerElement(int[]arr,int n,int idx)
	{
	  for(int i=idx+1;i<n;i++)
	    if(arr[i]<arr[idx])
	      return arr[i];
	      
	  return -1;
	}
}



//Optimal Approach

class Solution {
	public static int[] help_classmate(int arr[], int n) { 
	   ArrayDeque<Integer>stack=new ArrayDeque<>();
	   int[] res=new int[n];
	   
	   for(int i=n-1;i>=0;i--)
	   {
	     while(stack.size()!=0 && stack.peek()>=arr[i])
	       stack.pop();
	     
	     if(stack.size()==0)
	       res[i]=-1;
	     else
	       res[i]=stack.peek();
	    
	    stack.push(arr[i]);
	   }
	   
	   return res;
	} 
}
