//Bruteforce Approach

class Solution {
    public int findTheDistanceValue(int[] arr1, int[] arr2, int d) {
       int m=arr1.length,n=arr2.length,distance=0;
       for(int i=0;i<m;i++)
       {
          int j;
          for(j=0;j<n;j++)
            if(Math.abs(arr1[i]-arr2[j])<=d)
               break;
           
           if(j==n)
             distance++;
       }
       return distance;   
    }
}


/* Optimal Approach :
   
The math rule is: |x| <= a equals to -a <= x <= a. Check it and you'll see that it's correct. So:

the initial/Given inequality is: |arr1[i] - arr2[j]| <= d

according to the rule: -d <= (arr1[i] - arr2[j]) <= d

then move arr1[i] to the other sides: (-d - arr1[i]) <= -arr2[j] <= (d - arr1[i])

then multiply it by -1 and flip inequality signs: (d + arr1[i]) >= arr2[j] >= (arr1[i] - d)

that's the same as: (arr1[i] - d) <= arr2[j] <= (arr1[i] + d)

Expression |arr1[i] - arr2[j]| <= d equals to (arr1[i] - d) <= arr2[j] <= (arr1[i] + d)  

So for every value val in the array arr1 we need to check (using binary search) if the array arr2 contains any value in range from val - d to val + d. If not, increment distance.

*/


class Solution {
    public int findTheDistanceValue(int[] arr1, int[] arr2, int d) {
       Arrays.sort(arr2);    
       int distance = 0;
        
       for(int val : arr1)
         if(isNotInRange(arr2, val - d, val + d))
            distance++;
        
       return distance;
    }

     // Checks if the array doesn't contain any value in range (from <= value <= to) using binary search
    private boolean isNotInRange(int[] arr, int from, int to) 
    {
        int low= 0,high=arr.length - 1,mid;
        
        while (low<=high)
        {
            mid =low+(high-low)/2;
            if(arr[mid]>=from && arr[mid]<=to)//arr2 contains value in range (from <= value <= to) so return false
                return false;
            else if(arr[mid]<from)
                low=mid+1;
            else if(arr[mid]>to)
                high=mid-1;
        }
        //arr2 doesn't contain any value in range (from <= value <= to) so return true
        return true;
    }
}
