//Iterative Approach

//Method 1

//Naive Implementation

class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        return generateKSizeTargetSumSubsets(k, n);
    }

    private List<List<Integer>> generateKSizeTargetSumSubsets(int k, int targetSum) {
        List<List<Integer>> sizeKTargetSumSubsets = new ArrayList<>();
        List<List<Integer>> subsets = new ArrayList<>();
        subsets.add(new ArrayList<>());

        for (int num = 1; num <= 9; num++) {
            int size = subsets.size();
            for (int i = 0; i < size; i++) {
                List<Integer> currentSubset = new ArrayList<>(subsets.get(i));
                currentSubset.add(num);

                if (currentSubset.size() == k && findSubsetSum(currentSubset) == targetSum) {
                    sizeKTargetSumSubsets.add(currentSubset);
                }

                if (currentSubset.size() < k) {
                    subsets.add(currentSubset);
                }
            }
        }

        return sizeKTargetSumSubsets;
    }

    private int findSubsetSum(List<Integer> subset) {
        int subsetSum = 0;
        for (int val : subset) {
            subsetSum += val;
        }

        return subsetSum;
    }
}


//Optimal Implementation

class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        return generateKSizeTargetSumSubsets(k, n);
    }

    private List<List<Integer>> generateKSizeTargetSumSubsets(int k, int targetSum) {
        Map<List<Integer>, Integer> subsetsAndSumMap = new HashMap<>();
        List<List<Integer>> targetSumKSizeSubsets = new ArrayList<>();
        subsetsAndSumMap.put(new ArrayList<>(), 0);

        for (int num = 1; num <= 9; num++) {
            List<Map.Entry<List<Integer>, Integer>> existingSubsetsAndSum = new ArrayList<>(subsetsAndSumMap.entrySet());

            for (Map.Entry<List<Integer>, Integer> existingSubsetAndSum : existingSubsetsAndSum) {
                int currentSubsetSize = existingSubsetAndSum.getKey().size() + 1;
                int currentSubsetSum = existingSubsetAndSum.getValue() + num;

                if (currentSubsetSize <= k) {
                    List<Integer> currentSubset = new ArrayList<>(existingSubsetAndSum.getKey());
                    currentSubset.add(num);

                    if ((currentSubsetSize == k) && (currentSubsetSum == targetSum)) {
                        targetSumKSizeSubsets.add(currentSubset);
                    }

                    if (currentSubsetSize < k) {
                        subsetsAndSumMap.put(currentSubset, currentSubsetSum);
                    }
                }
            }
        }

        return targetSumKSizeSubsets;
    }
}


//Method 2


class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        return generateKSizeTargetSumSubsets(k, n);
    }

    private List<List<Integer>> generateKSizeTargetSumSubsets(int k, int targetSum) {
        List<List<Integer>> kSizetargetSumSubsets = new ArrayList<>();
        List<Integer> currentSubset = new ArrayList<>();
        int currentSubsetSum = 0, totalSubsets = 1 << 9;

        for (int num = 0; num < totalSubsets; num++) {
            for (int i = 0; i < 9; i++) {
                if ((num & (1 << i)) != 0) {
                    currentSubset.add(i + 1);
                    currentSubsetSum = currentSubsetSum + i + 1;

                    if (currentSubsetSum > targetSum) {
                        break;
                    }
                }
            }

            if (currentSubset.size() == k && currentSubsetSum == targetSum) {
                kSizetargetSumSubsets.add(new ArrayList<>(currentSubset));
            }

            currentSubset.clear();
            currentSubsetSum = 0;
        }

        return kSizetargetSumSubsets;
    }
}


//Recursive Approach

//Method 1

//Naive Implementation 

class Solution {
    private List<List<Integer>> sizeKTargetSumSubsets;

    public List<List<Integer>> combinationSum3(int k, int n) {
        sizeKTargetSumSubsets = new ArrayList<>();
        generateSizeKTargetSumSubsets(1, k, n, new ArrayList<>());
        return sizeKTargetSumSubsets;
    }

    private void generateSizeKTargetSumSubsets(int currentNumber, int k, int targetSum, List<Integer> currentSubset) {
        if (currentSubset.size() == k && targetSum == 0) {
            sizeKTargetSumSubsets.add(new ArrayList<>(currentSubset));
            return;
        }

        if (currentSubset.size() > k || targetSum < 0 || currentNumber > 9) {
            return;
        }

        currentSubset.add(currentNumber);
        generateSizeKTargetSumSubsets(currentNumber + 1, k, targetSum - currentNumber, currentSubset);
        currentSubset.remove(currentSubset.size() - 1);
        generateSizeKTargetSumSubsets(currentNumber + 1, k, targetSum, currentSubset);
    }
}


//Optimal Implementation

class Solution {
    private List<List<Integer>> sizeKTargetSumSubsets;

    public List<List<Integer>> combinationSum3(int k, int n) {
        sizeKTargetSumSubsets = new ArrayList<>();
        generateSizeKTargetSumSubsets(1, k, n, new ArrayList<>());
        return sizeKTargetSumSubsets;
    }

    private void generateSizeKTargetSumSubsets(int currentNumber, int k, int targetSum, List<Integer> currentSubset) {
        if (currentSubset.size() == k && targetSum == 0) {
            sizeKTargetSumSubsets.add(new ArrayList<>(currentSubset));
            return;
        }

        if (currentSubset.size() > k || currentNumber > targetSum || currentNumber > 9) {
            return;
        }

        currentSubset.add(currentNumber);
        generateSizeKTargetSumSubsets(currentNumber + 1, k, targetSum - currentNumber, currentSubset);
        currentSubset.remove(currentSubset.size() - 1);
        generateSizeKTargetSumSubsets(currentNumber + 1, k, targetSum, currentSubset);
    }
}



//Method 2

//Naive Implementation

class Solution {
    private List<List<Integer>> sizeKTargetSumSubsets;

    public List<List<Integer>> combinationSum3(int k, int n) {
        sizeKTargetSumSubsets = new ArrayList<>();
        generateSizeKTargetSumSubsets(1, k, n, new ArrayList<>());
        return sizeKTargetSumSubsets;
    }

    private void generateSizeKTargetSumSubsets(int currentNumber, int k, int targetSum, List<Integer> currentSubset) {
        if (currentSubset.size() == k && targetSum == 0) {
            sizeKTargetSumSubsets.add(new ArrayList<>(currentSubset));
            return;
        }
        
        if (currentSubset.size() > k || targetSum < 0) {
            return;
        }

        for (int num = currentNumber; num <= 9; num++) {
            currentSubset.add(num);
            generateSizeKTargetSumSubsets(num + 1, k, targetSum - num, currentSubset);
            currentSubset.remove(currentSubset.size() - 1);
        }
    }
}


//Optimal Implementation

class Solution {
    private List<List<Integer>> sizeKTargetSumSubsets;

    public List<List<Integer>> combinationSum3(int k, int n) {
        sizeKTargetSumSubsets = new ArrayList<>();
        generateSizeKTargetSumSubsets(1, k, n, new ArrayList<>());
        return sizeKTargetSumSubsets;
    }

    private void generateSizeKTargetSumSubsets(int currentNumber, int k, int targetSum, List<Integer> currentSubset) {
        if (currentSubset.size() == k && targetSum == 0) {
            sizeKTargetSumSubsets.add(new ArrayList<>(currentSubset));
            return;
        }

        if (currentSubset.size() > k) {
            return;
        }

        for (int num = currentNumber; num <= 9; num++) {
            /*
             * Since numbers are in increasing order, if the current number exceeds
             * targetSum, all subsequent numbers will also be larger. No point in exploring
             * further in this path.
             */
            if (num > targetSum) {
                break;
            }
            currentSubset.add(num);
            generateSizeKTargetSumSubsets(num + 1, k, targetSum - num, currentSubset);
            currentSubset.remove(currentSubset.size() - 1);
        }
    }
}
