
//Optimal

class Solution {
    public int[] AllPrimeFactors(int num) {
        ArrayList<Integer>prime= sieveOfEratosthenes(num);

        LinkedHashSet<Integer> uniquePrimeFactors = new LinkedHashSet<>();
        for(int primeNum : prime)
        {
            while ((num % primeNum) == 0)
            {
                uniquePrimeFactors.add(primeNum);
                num=num/primeNum;
            }
            
            if(num==1)
              break;
        }

        int[] primeFactors = new int[uniquePrimeFactors.size()];
        int idx = 0;
        
        for (int pf : uniquePrimeFactors)
          primeFactors[idx++] = pf;
        

        return primeFactors;
    }

    static ArrayList<Integer> sieveOfEratosthenes(int n) {
        ArrayList<Integer> res = new ArrayList<>();
        if (n < 2)
            return res;

        boolean isPrime[] = new boolean[n + 1];
        for (int i = 2; i <= n; i++)
            isPrime[i] = true;

        for (int num = 2; num <= (int) Math.sqrt(n); num++)
            if (isPrime[num] == true)
                for (int mark = (num * num); mark <= n; mark += num)
                    isPrime[mark] = false;

        for (int i = 2; i <= n; i++)
            if (isPrime[i] == true)
                res.add(i);

        return res;
    }
}
