//Bruteforce Approach

class Solution {
    public int[] replaceElements(int[] arr) {
        int n=arr.length;
        for(int i=0;i<(n-1);i++)
          arr[i]=largestOnRight(arr,n,i);
	     
        arr[n-1]=-1;

      return arr;
    }

    public int largestOnRight(int[] arr,int n,int idx)
	  {
	      int max=Integer.MIN_VALUE;
        for(int i=idx+1;i<n;i++)
         if(arr[i]>max)
            max=arr[i];
		
        return max;
  	}
}

// Optimal Approach

class Solution {
    public int[] replaceElements(int[] arr) {
      int n=arr.length,maxSoFar=arr[n-1];
      int[]res=new int[n];
      res[n-1]=-1;

      for(int i=n-2;i>=0;i--)
      {
         res[i]=maxSoFar;
         if(arr[i]>maxSoFar)
           maxSoFar=arr[i];
      }

      return res;
    }
}
