 class Solution {
    public boolean check(int[] arr) {
      int cnt=0;
      for(int i=0;i<arr.length-1;i++)
        if(arr[i]>arr[i+1])
          cnt++;
      
      if(cnt==0)
        return true; //was originally sorted in Asc. order but not Left/Right rotated (i.e left/right rotated by 0 positions) 
      else if(cnt==1)
      {
        if(arr[0]<arr[arr.length-1]) // was not originally sorted
          return false;
        else
          return true; // was originally sorted in Asc. order and then Left/Right Rotated by some positions
      }
      return false; //cnt>1
    }
}

/*
Examples:

arr[]={1,2,3,4,5};

Was originally sorted in Asc. order but not Left/Right rotated (i.e left/right rotated by 0 positions) 

arr[]={4,5,1,2,3};

Was originally sorted in Asc. order and Right rotated by 2 positions / or Left rotated by 3 positions

arr[]={3,4,5,1,2};

Was originally sorted in Asc. order and Left rotated by 2 positions / or Right rotated by 3 positions

arr[]={5,1,2,3,4}

Was originally sorted in Asc. order and Right rotated by 1 position / or Left rotated by 4 positions

arr[]={2,3,4,5,1};

Was originally sorted in Asc. order and Left rotated by 1 position / or Right rotated by 4 positions

arr[]={5,1,3,2,4}

Was not originally sorted in Asc. order

arr[]={2,1,3,4,5}

Was not originally sorted in Asc. order


Note:

Left Rotation count = arr.length - Right rotation count

or 

Right Rotation count = arr.length - Left Rotation count

Note:

If an array is originally sorted in ascending order and then rotated(either left or right) by some positions(can be 0) then the first element is always greater than the last element. 

*/
