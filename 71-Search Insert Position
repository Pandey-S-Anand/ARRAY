//Bruteforce Approach

class Solution {
    public int searchInsert(int[] arr, int target) {
      int n=arr.length;
      int idx=binarySearch(arr,n,target);
      if(idx!=-1)
        return idx;

       int[] temp=new int[n+1];
       for(int i=0;i<n;i++)
         temp[i]=arr[i];
         
       temp[n]=target;
          
       Arrays.sort(temp);

       return binarySearch(temp,n+1,target); 
    }

    public int binarySearch(int[]arr,int n,int key)
    {
      int low=0;
      int high=n-1;
      while(low<=high)
      {
          int mid=low+(high-low)/2;
          if(arr[mid]==key)
            return mid;
          else if(key<arr[mid])
            high=mid-1;
          else if(key>arr[mid])
            low=mid+1;
      }
      return -1;//key doesnot exists
    }
}


//Better Approach

class Solution {
    public int searchInsert(int[] arr, int target) {
      int n=arr.length;
      int idx=binarySearch(arr,n,target);
      
      if(idx!=-1)
        return idx;

       int[] temp=new int[n+1];
       for(int i=0;i<(n+1);i++)
       {
         if(i==n)
           temp[i]=target;
         else
           temp[i]=arr[i];
       }
       
       //Using insertion sort

       int tmp=temp[n];
       int j=n-1;

       while(j>=0 && arr[j]>tmp)
       {
         temp[j+1]=temp[j];
         j--;
       }

       temp[j+1]=tmp;

       return j+1; 
    }

    public int binarySearch(int[]arr,int n,int key)
    {
      int low=0;
      int high=n-1;
      while(low<=high)
      {
          int mid=low+(high-low)/2;
          if(arr[mid]==key)
            return mid;
          else if(key<arr[mid])
            high=mid-1;
          else if(key>arr[mid])
            low=mid+1;
      }
      return -1;//key doesnot exists
    }
}


//Optimal Approach

//Intuitive Implementation

class Solution {
    public int searchInsert(int[] arr, int target) {
       return binarySearch(arr,arr.length,target);
    }

    public static int binarySearch(int[]arr,int n,int key)
    {
      int low=0;
      int high=n-1;
      while(low<=high)
      {
          int mid=low+(high-low)/2;
          if(arr[mid]==key)
            return mid;    //target is found in the Array at index mid
          else if(key<arr[mid])
            high=mid-1;
          else if(key>arr[mid])
            low=mid+1;
      }
      //target Doesnot Exists in the Array however the Correct index of target in the array would be low or high+1
      return low; //return high+1;
    }
}


//Optimal Imlementation

class Solution {
    public int searchInsert(int[] arr, int target) {
      int n=arr.length;
      if(target<arr[0])
         return 0;
      else if(target>arr[n-1])
         return n;

      return binarySearch(arr,n,target);
    }

    public static int binarySearch(int[]arr,int n,int key)
    {
      int low=0;
      int high=n-1;
      while(low<=high)
      {
          int mid=low+(high-low)/2;
          if(arr[mid]==key)
            return mid;   //target is found in the Array at index mid
          else if(key<arr[mid])
            high=mid-1;
          else if(key>arr[mid])
            low=mid+1;
      }
      //target Doesnot Exists in the Array however the Correct index of target in the array would be low or high+1
      return low; //return high+1;
    }
}
