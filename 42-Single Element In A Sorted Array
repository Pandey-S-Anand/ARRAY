//Optimal Approach
/*
An Efficient Solution can find the required element in O(Log n) time. The idea is to use Binary Search without recursion.
All elements before the required have the first occurrence at even index (0, 2, ..and so on) and the next occurrence at odd index (1, 3, ..and so on). 
*/

//Naive Implementation

class Solution {
    public int singleNonDuplicate(int[] arr) {
        int low = 0, high = (arr.length - 1), result = -1;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if ((mid % 2) == 0) {// Mid is even
                if (mid < arr.length - 1 && arr[mid] == arr[mid + 1]) {
                    low = mid + 2;
                } else { // (arr[mid]!=arr[mid+1])
                    if (mid > 1 && arr[mid - 2] == arr[mid - 1]) {
                        return arr[mid];
                    } else {
                        if (mid == 0) { //When Single Element is at 0 th index
                           return arr[0];
                        }
                        high = mid - 1;
                    }
                }
            } else {// Mid is Odd
                if (arr[mid] == arr[mid - 1]) {
                    low = mid + 1;
                } else { // (arr[mid]!=arr[mid-1])
                    if (mid > 2 && arr[mid - 2] == arr[mid - 3]) {
                        return arr[mid - 1];
                    } else {
                        high = mid - 1;
                    }
                }
            }
        }

        return result;
    }
}


//Optimal Implementation

class Solution {
      public int singleNonDuplicate(int[] arr) {
        int low = 0, high = arr.length - 1;

        while (low < high) {
            int mid = low + (high - low) / 2;

            // Ensure mid is even to compare pairs properly
            if (mid % 2 == 1) {
                mid--;
            }

            // If the pair is equal, the single element is further in the array
            if (arr[mid] == arr[mid + 1]) {
                low = mid + 2;
            } else {
                high = mid-1;
            }
        }

        // When low == high, it points to the single element
        return arr[low];
    }
}

/*    
 Index:  0  1  2  3  4  5  6  7  8  9  10  
 arr[]= {1, 1, 3, 3, 5, 5, 7, 8, 8, 9 ,9 }
 Output:  7
                
Index:  0  1  2  3  4  5  6  7  8  9  10  
arr[]= {1, 1, 3, 3, 5, 7, 7, 8, 8 ,9 ,9}
Output:  5
                
Index:  0  1  2  3  4  5  6  7  8  9   10 
arr[]= {1, 1, 3, 5, 5, 8, 8, 9 ,9 ,10 ,10}
Output:  3

Index:   0  1  2  3  4  5  6  7  8  9  10  11  12
arr[] = {1, 1, 3, 3, 5, 5, 7, 7, 8, 9 ,9 ,10 ,10}
Output:  8
                 
Index:   0  1  2  3  4  5  6  7  8  9  10  11  12
arr[] = {1, 1, 3, 3, 5, 5, 7, 8, 8, 9 ,9 ,10 ,10}
Output:  7
                
Index:   0  1  2  3  4  5  6  7  8  9   10  11  12
arr[] = {1, 1, 3, 5, 5, 8, 8, 9 ,9 ,10 ,10 ,12, 12}
Output:  3

Index:   0  1  2  3  4  5  6  7  8  9   10  11  12
arr[] = {1, 2, 2, 5, 5, 8, 8, 9 ,9 ,10 ,10 ,12, 12}
Output:  1

Index:   0  1  2  3  4  5  6  7  8  9   10  11  12
arr[] = {1, 1, 5, 5, 8, 8, 9, 9 ,10 ,10 ,11 ,11, 12}
Output:  1
*/
