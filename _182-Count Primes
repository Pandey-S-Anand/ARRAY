//Very Similar to Q-3

//Seive of Eratosthenes Algorithm

//Naive Implementation

class Solution {
    public int countPrimes(int n) {
       if(n<=2)
	      return 0;
	   
       boolean isPrime[]=new boolean[n];

       for(int i=2;i<=(n-1);i++)
         isPrime[i]=true;
          
        for(int num=2;num<=(n-1);num++)
          if(isPrime[num]==true)
             for(int mark=(num*2);mark<=(n-1);mark+=num)
                isPrime[mark]=false;
        
        int cnt=0;
        for(int i=2;i<=(n-1);i++)
          if(isPrime[i]==true)
             cnt++;
        
        return cnt;
    }
}



//Better Implementation

class Solution {
    public int countPrimes(int n) {
      if(n<=2)
        return 0;
	   
      boolean isPrime[]=new boolean[n];
      for(int i=2;i<=(n-1);i++)
        isPrime[i]=true;
          
      for(int num=2;num<=(n-1)/2;num++)
        if(isPrime[num]==true)
          for(int mark=(num*2);mark<=(n-1);mark+=num)
            isPrime[mark]=false;
                
      int cnt=0;
      for(int i=2;i<=(n-1);i++)
        if(isPrime[i]==true)
          cnt++;
        
      return cnt; 
    }
}



//Good Implementation

class Solution {
    public int countPrimes(int n) {
      if(n<=2)
	return 0;
	   
      boolean isPrime[]=new boolean[n];

      for(int i=2;i<=(n-1);i++)
        isPrime[i]=true;
          
      for(int num=2;num<=(int)Math.sqrt(n-1);num++)
        if(isPrime[num]==true)
          for(int mark=(num*2);mark<=(n-1);mark+=num)
            isPrime[mark]=false;
                
      int cnt=0;
      for(int i=2;i<=(n-1);i++)
        if(isPrime[i]==true)
          cnt++;
        
      return cnt; 
    }
}




//Optimal Implementation

class Solution {
    public int countPrimes(int n) {
      if(n<=2)
	      return 0;
	   
      boolean isPrime[]=new boolean[n];

      for(int i=2;i<=(n-1);i++)
        isPrime[i]=true;
          
      for(int num=2;num<=(int)Math.sqrt(n-1);num++)
        if(isPrime[num]==true)
          for(int mark=(num*num);mark<=(n-1);mark+=num)
            isPrime[mark]=false;
                
      int cnt=0;
      for(int i=2;i<=(n-1);i++)
        if(isPrime[i]==true)
          cnt++;
        
      return cnt; 
    }
}
