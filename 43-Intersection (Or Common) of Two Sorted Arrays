//Bruteforce Approach

class Solution{	
  public static List<Integer> intersectionOfTwoSortedArray(int[] arr1,int[] arr2){
     List<Integer>intersection=new ArrayList<>();
     for(int val :arr1)
       if(binarySearch(arr2,val))
         intersection.add(val);
        
     return intersection;
  }
	
  public static boolean binarySearch(int[]arr,int key)
  {
      int low=0,high=arr.length-1,mid;
      while(low<=high)
      {
        mid=(low+high)/2;
        if(arr[mid]==key)
          return true;
        else if(key<arr[mid])
          high=mid-1;
        else if(key>arr[mid])
          low=mid+1;
      }
      return false;//key doesnot exists
  }
}


//Better Approach

class Solution {
   public static List<Integer> intersectionOfTwoSortedArray(int[] arr1,int[] arr2{
      List<Integer>intersection=new ArrayList<>();
      HashSet<Integer>hs=new HashSet<>();
	   
      for(int val :arr2)
        hs.add(val);
	   
      for(int val:arr1)
        if(hs.contains(val))
	   intersection.add(val);
	   
      return intersection;
   }
}


//Optimal Approach

class Solution{
    public static List<Integer> intersectionOfTwoSortedArray(int[] arr1,int[] arr2){
       List<Integer>intersection=new ArrayList<>();
       int i=0,j=0,m=arr1.length,n=arr2.length,min;
     
       while(i<m && j<n)
         if(arr1[i]==arr2[j])
         {
           intersection.add(arr1[i]);
           i++;
           j++;
         }
         else
         {
           min=Math.min(arr1[i],arr2[j]);
           if(min==arr1[i])
             i++;
           else if(min==arr2[j])
             j++;
         }
	   
     return intersection;
   }
}
