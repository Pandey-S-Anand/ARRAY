//Bruteforce Approach

class Solution{
  public static void sortHalves (int arr[], int n){
    Arrays.sort(arr);
  }
}


//Optimal Approach

class Solution{
    public static void sortHalves (int arr[], int n) {
      int endIdx=partition(arr,n);
      
      if(endIdx==-1)
        return; 
      
      int size1=endIdx+1,size2=n-(endIdx+1);
      
      int[] left=new int[size1];
      int[] right=new int[size2];
      
      for(int i=0;i<size1;i++)
        left[i]=arr[i];
        
      for(int i=0;i<size2;i++)
        right[i]=arr[i+endIdx+1];
      
      int i=0,j=0,k=0;
      
      while(i<size1 && j<size2 )
         if(left[i]<=right[j])
            arr[k++]=left[i++];
         else
            arr[k++]=right[j++];
      
      while(i<size1)
        arr[k++]=left[i++];
        
      while(j<size2)
        arr[k++]=right[j++];
        
    }
    
    public static int partition(int[]arr,int n)
    {
      for(int i=0;i<(n-1);i++)
        if(arr[i]>arr[i+1])
          return i;
          
      return -1; // array is completely sorted
    }
}
