
//Method 1- Bruteforce (Using BigInteger)

class Solution {
    static ArrayList<Integer> factorial(int num){
      java.math.BigInteger fact=new java.math.BigInteger("1");
 
      for(int i=num;i>0;i--) // or for(int i=1;i<=num;i++)
        fact=fact.multiply(java.math.BigInteger.valueOf(i));
 
      ArrayList<Integer>res=new ArrayList<>();
      
      for(char ch:fact.toString().toCharArray())
        res.add(ch-'0');
        
      return res;
    }
}


//Method 2- Optimal (Using ArrayList)

class Solution {
    static ArrayList<Integer> factorial(int n){
        ArrayList<Integer>al = new ArrayList<>();
        al.add(1);
        
        int carry = 0;
        for(int i = 2 ; i <= n ; i++)
        {
           for(int idx=al.size()-1;idx>= 0;idx--)
           {
               int product=(al.get(idx) * i) + carry;
               carry = product / 10;
               al.set(idx,product % 10);
           }
           
           while(carry != 0)
           {
               al.add(0,carry%10);
               carry=carry/10;
           }
        }
        
        return al;
    }
}


/*

Dry run for n = 12:

Initial state:

n = 12
al = [1]
carry = 0

-----------------------------------------------------------------

i = 2

Inner Loop:
idx = 0: al[0] * 2 + carry = 1 * 2 + 0 = 2, carry = 0, al = [2]  // 2!=2
Carry distribution loop is skipped since carry is 0.

i = 3

Inner Loop:
idx = 0: al[0] * 3 + carry = 2 * 3 + 0 = 6, carry = 0, al = [6]      // 3!=6
Carry distribution loop is skipped.

i = 4

Inner Loop:
idx = 0: al[0] * 4 + carry = 6 * 4 + 0 = 24, carry = 2, al = [4] 
Carry distribution loop:
Adding carry digits to the beginning: al = [2, 4], carry = 0          // 4!=24

i = 5

Inner Loop:
idx = 1: al[1] * 5 + carry = 4 * 5 + 0 = 20, carry = 2, al = [2, 0]
idx = 0: al[0] * 5 + carry = 2 * 5 + 2 = 12, carry = 1, al = [2, 0]
Carry distribution loop:
Adding carry digits to the beginning: al = [1, 2, 0], carry = 0        // 5!=120

i = 6

Inner Loop:
idx = 2: al[2] * 6 + carry = 0 * 6 + 0 = 0, carry = 0, al = [1, 1, 0]
idx = 1: al[1] * 6 + carry = 2 * 6 + 0 = 12, carry =1, al = [1, 2, 0]
idx = 0: al[0] * 6 + carry = 1 * 6 + 1 = 7, carry = 0, al = [7, 2, 0]   //6!=720
Carry distribution loop is skipped.

i = 7

Inner Loop:
idx = 2: al[2] * 7 + carry = 0 * 7 + 0 = 0, carry = 0, al = [7, 2, 0]
idx = 1: al[1] * 7 + carry = 2 * 7 + 0 = 14, carry = 1, al = [7, 4, 0]
idx = 0: al[0] * 7 + carry = 7 * 7 + 1 = 50, carry = 5, al = [0, 4, 0]
Carry distribution loop:
Adding carry digits to the beginning: al = [5, 0, 4, 0], carry = 0       //7!=5040

i = 8

Inner Loop:
idx = 3: al[3] * 8 + carry = 0 * 8 + 0 = 0, carry = 0, al = [5, 0, 4, 0]
idx = 2: al[2] * 8 + carry = 4 * 8 + 0 = 32, carry = 3, al = [5, 0, 2, 0]
idx = 1: al[1] * 8 + carry = 0 * 8 + 3 = 3, carry = 0, al = [5, 3, 2, 0]
idx = 0: al[0] * 8 + carry = 5 * 8 + 0 = 40, carry = 4, al = [0, 3, 2, 0]
Carry distribution loop:
Adding carry digits to the beginning: al = [4, 0, 3, 2, 0], carry = 0    //8!=40320

i=9

Inner Loop:
idx = 4: al[4] * 9 + carry = 0 * 9 + 0 = 0, carry = 0, al  =[4, 0, 3, 2, 0]
idx = 3: al[3] * 9 + carry = 2 * 9 + 0 = 18, carry = 1, al =[4, 0, 3, 8, 0]
idx = 2: al[2] * 9 + carry = 3 * 9 + 1 = 28, carry = 2, al =[4, 0, 8, 8, 0]
idx = 1: al[1] * 9 + carry = 0 * 9 + 2 = 2, carry = 0,  al =[4, 2, 8, 8, 0]
idx = 0: al[0] * 9 + carry = 4 * 9 + 0 = 36, carry = 3, al =[6, 2, 8, 8, 0]

Carry distribution loop:
Adding carry digits to the beginning: al =[3, 6, 2, 8, 8, 0], carry = 0    //9!=362880


i=10

Inner Loop:
idx = 5: al[5] * 10 + carry = 0 * 10 + 0 = 0,  carry = 0, al=[3, 6, 2, 8, 8, 0]
idx = 4: al[4] * 10 + carry = 8 * 10 + 0 = 80, carry = 8, al=[3, 6, 2, 8, 0, 0]
idx = 3: al[3] * 10 + carry = 8 * 10 + 8 = 88, carry = 8, al=[3, 6, 2, 8, 0, 0]
idx = 2: al[2] * 10 + carry = 2 * 10 + 8 = 28, carry = 2, al=[3, 6, 8, 8, 0, 0]
idx = 1: al[1] * 10 + carry = 6 * 10 + 2 = 62, carry = 6, al=[3, 2, 8, 8, 0, 0]
idx = 0: al[0] * 10 + carry = 3 * 10 + 6 = 36, carry = 3, al=[6, 2, 8, 8, 0, 0]

Carry distribution loop:
Adding carry digits to the beginning: al =[3, 6, 2, 8, 8, 0, 0], carry = 0    //10!=3628800


i=11

Inner Loop:
idx = 6: al[6] * 11 + carry = 0 * 11 + 0 = 0,  carry = 0, al=[3, 6, 2, 8, 8, 0, 0]
idx = 5: al[5] * 11 + carry = 0 * 11 + 0 = 0,  carry = 0, al=[3, 6, 2, 8, 8, 0, 0]
idx = 4: al[4] * 11 + carry = 8 * 11 + 0 = 88, carry = 8, al=[3, 6, 2, 8, 8, 0, 0]
idx = 3: al[3] * 11 + carry = 8 * 11 + 8 = 96, carry = 9, al=[3, 6, 2, 6, 8, 0, 0]
idx = 2: al[2] * 11 + carry = 2 * 11 + 9 = 31, carry = 3, al=[3, 6, 1, 6, 8, 0, 0]
idx = 1: al[1] * 11 + carry = 6 * 11 + 3 = 69, carry = 6, al=[3, 9, 1, 6, 8, 0, 0]
idx = 0: al[0] * 11 + carry = 3 * 11 + 6 = 39, carry = 3, al=[9, 9, 1, 6, 8, 0, 0]

Carry distribution loop:
Adding carry digits to the beginning: al =[3, 9, 9, 1, 6, 8, 0, 0], carry = 0    //11!=39916800

i=12

Inner Loop:
idx = 7: al[7] * 12 + carry = 0 * 12 + 0 = 0,  carry = 0, al=[3, 9, 9, 1, 6, 8, 0, 0]
idx = 6: al[6] * 12 + carry = 0 * 12 + 0 = 0,  carry = 0, al=[3, 9, 9, 1, 6, 8, 0, 0]
idx = 5: al[5] * 12 + carry = 8 * 12 + 0 = 0,  carry = 9, al=[3, 9, 9, 1, 6, 6, 0, 0]
idx = 4: al[4] * 12 + carry = 6 * 12 + 9 = 81, carry = 8, al=[3, 9, 9, 8, 1, 6, 0, 0]
idx = 3: al[3] * 12 + carry = 1 * 12 + 8 = 20, carry = 2, al=[3, 9, 9, 0, 1, 6, 0, 0]
idx = 2: al[2] * 12 + carry = 9 * 12 + 2 = 110, carry =11, al=[3, 9, 0, 0, 1, 6, 0, 0]
idx = 1: al[1] * 12 + carry = 9 * 12 + 11 =119, carry =11, al=[3, 9, 0, 0, 1, 6, 0, 0]
idx = 0: al[0] * 12 + carry = 3 * 12 + 11 = 47, carry = 4, al=[7, 9, 0, 0, 1, 6, 0, 0]

Carry distribution loop:
Adding carry digits to the beginning: al =[4, 7, 9, 0, 0, 1, 6, 0, 0]        //12!=479001600


therefore 12!=[4, 7, 9, 0, 0, 1, 6, 0, 0] i.e 479001600
*/
