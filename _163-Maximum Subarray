//Bruteforce Approach

class Solution {
    public int maxSubArray(int[] arr) {
       int n=arr.length,maxSum=Integer.MIN_VALUE;
	for(int start=0;start<n;start++)
	   for(int end=start;end<n;end++)
	   {
	     int sum=0;
	     for(int range=start;range<=end;range++)
               sum+=arr[range];
          
             if(sum>maxSum)
               maxSum=sum;
	   }
 
       return maxSum;
    }
}


//Better Approach

class Solution {
    public int maxSubArray(int[] arr) {
       int n=arr.length, maxSum=Integer.MIN_VALUE;
       for(int start=0;start<n;start++)
       {
	  int sum=0;
	  for(int end=start;end<n;end++)
	  {
	     sum+=arr[end];

	     if(sum>maxSum)
	        maxSum=sum;
	  }
       }
	   
       return maxSum;
    }
}


//Optimal Approach

class Solution {
    public int maxSubArray(int[] arr) {
       	int n=arr.length,currSum=0,maxSum=Integer.MIN_VALUE;
        for(int i=0;i<n;i++)
        {
          if(currSum>=0)
            currSum+=arr[i];
          else
            currSum=arr[i];

         if(currSum>maxSum)
           maxSum=currSum;
        }

      return maxSum; 
    }
}
