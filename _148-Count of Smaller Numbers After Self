/ /Bruteforce Approach

class Solution {
    public List<Integer> countSmaller(int[] arr) {
      List<Integer>count=new ArrayList<>();
      int n=arr.length;

      for(int i=0;i<n;i++)
      {
         int cnt=0;
         for(int j=i+1;j<n;j++)
          if(arr[j]<arr[i])
            cnt++;
        
        count.add(cnt);    
      }
      
      return count;  
    }
}


//Good Approach

class Solution {
    public List<Integer> countSmaller(int[] arr) {
        List<Integer>count=new ArrayList<>();
        ArrayList<Integer>sorted=new ArrayList();
        int n=arr.length;
      
        for(int val : arr)
          sorted.add(val);
    
        Collections.sort(sorted);
                  
        for(int i = 0; i<n; i++)
        {
            int index=firstIndex(sorted,arr[i]);
            count.add(index);
            sorted.remove(index);
        }
        
        return count;
    }

    public static int firstIndex(ArrayList<Integer>arr, int key)
    {
        int low=0,high=arr.size()-1,first=-1,mid,val;
        while(low<=high)
        {
            mid =(high+low)/2;
            val=arr.get(mid);
            if(val==key)
            {
              first=mid;
              high=mid-1;
            }
            else if(key>val)
              low= mid + 1;
            else if(key<val)
              high=mid - 1;
        }
        return first;
    }
}


/*
  For Method 2 :(Dry Run)
  
  Index=>   0 1 2 3 4 5 6 7 8 9 10  
     arr[]={5,2,4,6,1,2,9,1,6,5,8};
     
 Index=>    0 1 2 3 4 5 6 7 8 9 10
  Sorted[]={1,1,2,2,4,5,5,6,6,8,9};
  
  
  Iteration 1 :(i=0,arr[i]=5)
  firstIndex(5)=5
  count[0]=5;
  sorted.remove(5);
  
  (Updated Sorted[])
 Index=>    0 1 2 3 4 5 6 7 8 9
  Sorted[]={1,1,2,2,4,5,6,6,8,9};
  
  Iteration 2 :(i=1,arr[i]=2)
  firstIndex(2)=2
  count[1]=2;
  sorted.remove(2);
  
  (Updated Sorted[])
  Index=>   0 1 2 3 4 5 6 7 8
  Sorted[]={1,1,2,4,5,6,6,8,9};
  
  Iteration 3 :(i=2,arr[i]=4)
  firstIndex(4)=3
  count[2]=3;
  sorted.remove(3);
  
  (Updated Sorted[])
  Index=>   0 1 2 3 4 5 6 7 
  Sorted[]={1,1,2,5,6,6,8,9};
  
  Iteration 4 :(i=3,arr[i]=6)
  firstIndex(6)=4
  count[3]=4;
  sorted.remove(4);
  
  (Updated Sorted[])
  Index=>   0 1 2 3 4 5 6 
  Sorted[]={1,1,2,5,6,8,9};
  
  Iteration 5 :(i=4,arr[i]=1)
  firstIndex(1)=0
  count[4]=0;
  sorted.remove(0);
  
  (Updated Sorted[])
  Index=>   0 1 2 3 4 5 
  Sorted[]={1,2,5,6,8,9};
  
  Iteration 6 :(i=5,arr[i]=2)
  firstIndex(2)=1
  count[5]=1;
  sorted.remove(1);
  
  (Updated Sorted[])
  Index=>   0 1 2 3 4 
  Sorted[]={1,5,6,8,9};
  
  Iteration 7 :(i=6,arr[i]=9)
  firstIndex(9)=4
  count[6]=4;
  sorted.remove(4);
  
  (Updated Sorted[])
  Index=>   0 1 2 3 
  Sorted[]={1,5,6,8};
  
  Iteration 8 :(i=7,arr[i]=1)
  firstIndex(1)=0
  count[7]=0;
  sorted.remove(0);
  
  (Updated Sorted[])
  Index=>   0 1 2 
  Sorted[]={5,6,8};
  
  Iteration 9 :(i=8,arr[i]=6)
  firstIndex(1)=1
  count[8]=1;
  sorted.remove(1);
  
  (Updated Sorted[])
  Index=>   0 1 
  Sorted[]={5,8};
  
  Iteration 10 :(i=9,arr[i]=5)
  firstIndex(5)=0
  count[9]=0;
  sorted.remove(0);
  
  (Updated Sorted[])
  Index=>   0 
  Sorted[]={8};
  
  Iteration 11 :(i=10,arr[i]=8)
  firstIndex(8)=0
  count[10]=0;
  sorted.remove(0);
  
  (Updated Sorted[])
  Sorted[]={};
  
  Therefore;
  count[]={5 2 3 4 0 1 4 0 1 0 0 }
*/


//Better Approach

class Solution {
    public List<Integer> countSmaller(int[] arr) {
        int[]count=countSmaller(arr,arr.length);
        List<Integer>res=new ArrayList<>();
        for(int val:count)
          res.add(val);
        return res;
    }

    public static int[] countSmaller(int arr[], int n)
    {
        int[] count=new int[n];
        int[] originalIndex = new int[n];

        for(int i=0;i<n;i++)
          originalIndex[i]=i;

        mergeSort(arr,0,n-1,count,originalIndex);
        
        return count;
    }
    
    
    public static void mergeSort(int[] arr, int lb, int ub,int[] count,int[] originalIndex)
    {
        if(lb<ub)
        {
          int mid = (lb+ub)/2;
          mergeSort(arr,lb, mid,count,originalIndex);
          mergeSort(arr, mid+1,ub,count,originalIndex);
          merge(arr,lb, mid,ub,count,originalIndex);  
        }
    }

    public static void merge(int[] arr, int lb, int mid, int ub,int[] count,int[] originalIndex)
    {
      int i=0,j=0,k=lb,size1=(mid-lb+1),size2=(ub-mid);

      int[]left=new int[size1];
      int[]right=new int[size2];
      int[]newLeftIdx=new int[size1];
      int[]newRightIdx=new int[size2];

      for(int idx=0;idx<size1;idx++)
      {
        left[idx]=arr[lb+idx];
        newLeftIdx[idx]=originalIndex[lb+idx];
      }
        
      for(int idx=0;idx<size2;idx++)
      {
        right[idx]=arr[mid+1+idx];
        newRightIdx[idx]=originalIndex[mid+1+idx];
      }
      
      while(i<size1 && j<size2)
        if(left[i]>right[j])
        {
            count[newLeftIdx[i]]+=(size2-j);
            arr[k]=left[i];
            originalIndex[k]=newLeftIdx[i];
            i++;
            k++;
        }
        else
        {
           arr[k]=right[j];
           originalIndex[k]=newRightIdx[j];
           j++;
           k++;
        }
         
      
       while(j<size2)
       {
          arr[k]=right[j]; 
          originalIndex[k]=newRightIdx[j];
          j++;
          k++;
       }
         

       while(i<size1)
       {
         arr[k]=left[i];  
         originalIndex[k]=newLeftIdx[i];
         i++;
         k++;
       }         
    }
}


/*
          Index=>0  1  2  3  4  5  6  7  8  9  10  
          arr[]={5 ,2 ,4 ,6 ,1 ,2 ,9 ,1 ,6 ,5 ,8};        
        
 originalIndex[]=6  10 8  3  9  0  2  5  1  7  4     
       Index=>   0  1  2  3  4  5  6  7  8  9  10       
  (Sorted)arr[]={9, 8, 6, 6, 5, 5, 4, 2, 2, 1, 1}
  
(result)count[]={5, 2 ,3 ,4 ,0 ,1 ,4 ,0 ,1 ,0 ,0 }

//originalIndex[i]=original index of element present at ith index
        
*/



//Optimal Approach

class Solution {
    public List<Integer> countSmaller(int[] arr) {
        List<Integer>count=new ArrayList<>();
        int n=arr.length;
        
        for (int i = 0; i < n; i++)
          count.add(0); // Initialize the count list

        int[] originalIndex = new int[n];

        for(int i=0;i<n;i++)
          originalIndex[i]=i;

        mergeSort(arr,0,n-1,count,originalIndex);
        
        return count;
    }

    public void mergeSort(int[] arr, int lb, int ub,List<Integer> count,int[] originalIndex)
    {
        if(lb<ub)
        {
          int mid = (lb+ub)/2;
          mergeSort(arr,lb, mid,count,originalIndex);
          mergeSort(arr, mid+1,ub,count,originalIndex);
          merge(arr,lb, mid,ub,count,originalIndex);  
        }
    }

    public void merge(int[] arr, int lb, int mid, int ub,List<Integer>count,int[] originalIndex)
    {
      int i=0,j=0,k=lb,size1=(mid-lb+1),size2=(ub-mid);

      int[]left=new int[size1];
      int[]right=new int[size2];
      int[]newLeftIdx=new int[size1];
      int[]newRightIdx=new int[size2];

      for(int idx=0;idx<size1;idx++)
      {
        left[idx]=arr[lb+idx];
        newLeftIdx[idx]=originalIndex[lb+idx];
      }
        
      for(int idx=0;idx<size2;idx++)
      {
        right[idx]=arr[mid+1+idx];
        newRightIdx[idx]=originalIndex[mid+1+idx];
      }
      
      while(i<size1 && j<size2)
        if(left[i]>right[j])
        {
            count.set(newLeftIdx[i], count.get(newLeftIdx[i]) + (size2 - j));
            arr[k]=left[i];
            originalIndex[k]=newLeftIdx[i];
            i++;
            k++;
        }
        else
        {
           arr[k]=right[j];
           originalIndex[k]=newRightIdx[j];
           j++;
           k++;
        }
         
      
       while(j<size2)
       {
          arr[k]=right[j]; 
          originalIndex[k]=newRightIdx[j];
          j++;
          k++;
       }
         

       while(i<size1)
       {
         arr[k]=left[i];  
         originalIndex[k]=newLeftIdx[i];
         i++;
         k++;
       }         
    }
}

/*
Other Approaches :(Will be Updated Soon) 

->Using Binary Tree 
->Binary Search Tree
->Binary Indexed Tree/Fenwick Tree
->Segment Tree
*/
