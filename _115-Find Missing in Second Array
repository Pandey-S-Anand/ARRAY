//Bruteforce Approach

class Solution{
    ArrayList<Long> findMissing(long arr1[], long arr2[], int m, int n){
        ArrayList<Long>res=new ArrayList<>();
        for(int i=0;i<m;i++) 
           if(linearSearch(arr1[i],arr2,n)==false)
              res.add(arr1[i]);
              
        return res;
    }
    
    public boolean linearSearch(long key,long[] arr,int n)
    {
       int low=0,high=n-1;
       while(low<=high)
       {
         if((arr[low]==key) || (arr[high]==key))
           return true; 
          
          low++;
          high--;
       }
	   
      return false;
    }
}


//Better Approach

class Solution{
    ArrayList<Long> findMissing(long arr1[], long arr2[], int m, int n){
        Arrays.sort(arr2);
        ArrayList<Long>res=new ArrayList<>();
        
        for(int i=0;i<m;i++) 
           if(binarySearch(arr1[i],arr2,n)==false)
              res.add(arr1[i]);
              
        return res;
    }
    
    public static boolean binarySearch(long key,long[]arr,int n)
    {
      int low=0;
      int high=n-1;
      while(low<=high)
      {
          int mid=(low+high)/2;
          
          if(arr[mid]==key)
            return true;
          else if(key<arr[mid])
            high=mid-1;
          else if(key>arr[mid])
            low=mid+1;
      }

      return false;//key doesnot exists
    }
}

// Optimal Approach

class Solution{
    ArrayList<Long> findMissing(long arr1[], long arr2[], int m, int n){
        Arrays.sort(arr2);
        ArrayList<Long>res=new ArrayList<>();   
        HashSet<Long>hs=new HashSet<>();

        for(int i=0;i<n;i++)
          hs.add(arr2[i]);
        
       
        for(int i=0;i<m;i++)
          if(hs.contains(arr1[i])==false)
            res.add(arr1[i]);
              
        return res;
    }
}
