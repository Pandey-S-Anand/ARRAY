// Bruteforce Approach(Order of Appearence is Maintained)

class Solution {
    void rearrange(int arr[], int n) {
      int cntPos=0,cntNeg=0;
       
      for(int i=0;i<n;i++)
        if(arr[i]>=0)
	  cntPos++;
	else
	  cntNeg++;
	        
       if(cntNeg==0 || cntPos==0)
	 return;
	      
       int[] pos=new int[cntPos];
       int[] neg=new int[cntNeg];
       
       int j=0,k=0;
           
       for(int i=0;i<n;i++)
         if(arr[i]>=0)
            pos[j++]=arr[i];
         else
            neg[k++]=arr[i];
            
        int i=0;
        j=0;
        k=0;
    
	       
        while(j<cntPos && k<cntNeg)
          if((i%2)==0)
            arr[i++]=pos[j++];
          else
            arr[i++]=neg[k++];
         
        while(j<cntPos)
          arr[i++]=pos[j++];
       
        while(k<cntNeg)
          arr[i++]=neg[k++];
    }
}


// Optimal Approach (Order of Appearence is Maintained)

/*
in rearranged array Positive elements are found at Even index(0,2,4,6,8..) and Negative Elements are found at odd index(1,3,5,7,9...)
The idea is to process array from left to right. While processing, find the first out of place element in the remaining unprocessed array.
An element is out of place if it is positive and at odd index (0 based index), or it is negative and at even index (0 based index) .
Once we find an out of place element, we find the first element after it with opposite sign. 
We right rotate the subarray between these two elements (including these two).
*/



class Solution {
    void rearrange(int arr[], int n) {
       int wrongIndex = -1;//No Wrong Index
       
       for (int i=0;i<n;i++)
       {
          if(wrongIndex>=0)
            if((arr[wrongIndex]<0 && arr[i] >= 0) || (arr[wrongIndex]>= 0 && arr[i] < 0))
            {
              rightRotate(arr,wrongIndex,i);
              if((i - wrongIndex)==1)
                wrongIndex = -1;
              else //((i - wrongIndex)>= 2)
                wrongIndex+=2; 
            }
 
          if(wrongIndex==-1)
             if(((i%2)==0 && arr[i]< 0)|| ((i%2)==1 && arr[i]>=0))
                wrongIndex = i;
       }
    }
    
    public static void rightRotate(int[]arr, int wrongIndex, int index)
    {
       int temp=arr[index];
       for(int i=index;i>wrongIndex;i--)
         arr[i]=arr[i-1];
	      
       arr[wrongIndex]=temp;
    }
}


// Alternate Approach (Order of Appearence is not Maintained)

class Solution {
    void rearrange(int arr[], int n) {
        int i=0,j=segregate(arr);
        
        while(i<j && j<n)
        {
	         //Swap
           int temp=arr[i];
           arr[i]=arr[j];
           arr[j]=temp;
	     
           i+=2;
           j++;
        }
    }
    
    public int segregate(int[] arr)
    {
        int i=0,j=0,n=arr.length;
        while(i<n)
        {
            if(arr[i]<0)
            {
	       //Swap
               int temp=arr[i];
               arr[i]=arr[j];
               arr[j]=temp;
               
               i++;
               j++;
            }
            else
              i++;
        }
        
      return j;
    }
}
