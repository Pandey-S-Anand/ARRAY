//Bruteforce Approach

class Solution {
    static int majorityElement(int arr[], int n) {
        for (int i = 0; i < n; i++) {
            int count = 1;
            for (int j = i + 1; j < n; j++) {
                if (arr[i] == arr[j]) {
                    count++;
                }
            }

            if (count > (n / 2)) {
                return arr[i];
            }
        }
        // majority element doesnot exists in the array
        return -1;
    }
}

//Improved Approach

class Solution {
    static int majorityElement(int arr[], int n) {
        Arrays.sort(arr);

        int majorityCandidate = arr[n / 2], voteCount = 0;

        for (int num : arr) {
            if (num == majorityCandidate) {
                voteCount++;
            }

            if (voteCount > (n / 2)) {
                return majorityCandidate;
            }
        }

        // No majority element found
        return -1;
    }
}


//Good Approach

class Solution {
    static int majorityElement(int arr[], int n) {
        Map<Integer, Integer> frequencyMap = new HashMap<>();

        for (int val : arr) {
            frequencyMap.put(val, frequencyMap.getOrDefault(val, 0) + 1);
        }

        for (int val : frequencyMap.keySet()) {
            if (frequencyMap.get(val) > (arr.length / 2)) {
                return val;
            }
        }
        // majority element doesnot exists in the array
        return -1;
    }
}


//Better Approach

class Solution {
    static int majorityElement(int arr[], int n) {
        Map<Integer, Integer> frequencyMap = new HashMap<>();

        for (int val : arr) {
            frequencyMap.put(val, frequencyMap.getOrDefault(val, 0) + 1);
            if (frequencyMap.get(val) > (arr.length / 2)) {
                return val;
            }
        }

        // majority element doesnot exists in the array
        return -1;
    }
}


//Optimal Approach

class Solution {
    static int majorityElement(int arr[], int n) {
        int majorityCandidate = arr[0];
        int voteCount = 1;

        for (int i = 1; i < arr.length; i++) {
            if (voteCount == 0) {
                majorityCandidate = arr[i];
                voteCount = 1;
            } else if (arr[i] == majorityCandidate) {
                voteCount++;
            } else {
                voteCount--;
            }
        }

        /*
         * Validate if the majorityCandidate is actually the majority element,the
         * Boyer-Moore Voting Algorithm helps find a potential majority candidate, but
         * we need to confirm if this candidate actually appears more than N / 2 times.
         * If the majorityCandidate count exceeds N / 2, it is confirmed as the majority
         * element.If not, return -1 indicating no majority element exists.
         * Note : if the Majority element exists in the array, then it has
         * to be the majorityCandidate only, and no one else.
         */
        voteCount = 0;

        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == majorityCandidate) {
                voteCount++;
            }

            if (voteCount > (arr.length / 2)) {
                return majorityCandidate;
            }
        }

        // Majority element doesnot exists in the array
        return -1;
    }
}
