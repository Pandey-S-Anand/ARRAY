//Bruteforce Approach

class Solution {
    public int[] relativeSortArray(int[] arr1, int[] arr2) {
         int m=arr1.length,n=arr2.length,idx=0;
         HashMap<Integer,Integer>hm=new HashMap<>();
         for(int i=0;i<m;i++)
           if(hm.containsKey(arr1[i]))
             hm.put(arr1[i],hm.get(arr1[i])+1);
           else
             hm.put(arr1[i],1);
      
         for(int i=0;i<n;i++) 
         {
            int freq=hm.get(arr2[i]);
            while(freq!=0)
            {
               arr1[idx++]=arr2[i];
               freq--;
            }
            hm.remove(arr2[i]);
         }
        
         int sortPoint=idx;
         for(int key:hm.keySet())
         {
            int freq=hm.get(key);
            while(freq!=0)
            {
              arr1[idx++]=key;
              freq--;
            }
         }

         Arrays.sort(arr1,sortPoint,m);

      return arr1;
    }
}


//Optimal Approach

class Solution {
    public int[] relativeSortArray(int[] arr1, int[] arr2) {
         int m=arr1.length,n=arr2.length,idx=0;

         TreeMap<Integer,Integer>tm=new TreeMap<>();
         for(int i=0;i<m;i++)
           if(tm.containsKey(arr1[i]))
             tm.put(arr1[i],tm.get(arr1[i])+1);
           else
             tm.put(arr1[i],1);
      
         for(int i=0;i<n;i++) 
         {
            int freq=tm.get(arr2[i]);
            while(freq!=0)
            {
               arr1[idx++]=arr2[i];
               freq--;
            }
            tm.remove(arr2[i]);
         }
        
         for(int key:tm.keySet())
         {
            int freq=tm.get(key);
            while(freq!=0)
            {
              arr1[idx++]=key;
              freq--;
            }
         }

      return arr1;
    }
}
