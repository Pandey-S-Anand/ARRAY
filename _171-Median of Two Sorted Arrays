// Bruteforce Approach

class Solution {
    public double findMedianSortedArrays(int[] arr1, int[] arr2) {
        int[] arr = mergeTwoSortedArrayIntoThirdSortedArray(arr1, arr2);

        if ((arr.length % 2) == 0) {
            return (double) (arr[(arr.length - 1) / 2] + arr[arr.length / 2]) / 2D;
        }
        return (double) arr[arr.length / 2];
    }

    public int[] mergeTwoSortedArrayIntoThirdSortedArray(int[] arr1, int[] arr2) {
        int[] arr = new int[arr1.length + arr2.length];
        int i = 0, j = 0, k = 0;

        while (i < arr1.length && j < arr2.length) {
            if (arr1[i] <= arr2[j]) {
                arr[k++] = arr1[i++];
            } else {
                arr[k++] = arr2[j++];
            }
        }

        if (i < arr1.length) {
            System.arraycopy(arr1, i, arr, k, arr1.length - i);
        }

        if (j < arr2.length) {
            System.arraycopy(arr2, j, arr, k, arr2.length - j);
        }

        return arr;
    }
}


//Better Approach

class Solution {
    public double findMedianSortedArrays(int[] arr1, int[] arr2) {
        int i = 0, j = 0, k = 0;
        int[] arr = new int[arr1.length + arr2.length];

        while (k <= (arr1.length + arr2.length) / 2) {
            if (i < arr1.length && j < arr2.length) {
                if (arr1[i] <= arr2[j]) {
                    arr[k++] = arr1[i++];
                } else {
                    arr[k++] = arr2[j++];
                }
            } else if (i < arr1.length) {
                arr[k++] = arr1[i++];
            } else { // if (j < arr2.length)
                arr[k++] = arr2[j++];
            }
        }

        if ((arr1.length + arr2.length) % 2 != 0) {
            return (double) arr[k - 1]; // return (double)arr[(arr1.length + arr2.length)/2];
        }
        return (double) (arr[k - 1] + arr[k - 2]) / 2D;
        // return (double)(arr[(arr1.length + arr2.length)/2]+arr[((arr1.length + arr2.length)-1)/2])/2D;
    }
}

//Good Approach

class Solution {
    public double findMedianSortedArrays(int[] arr1, int[] arr2) {
        int i = 0, j = 0, currentValue = 0, previousValue = 0;

        for (int k = 0; k <= (arr1.length + arr2.length) / 2; k++) {
            previousValue = currentValue;
            if (i < arr1.length && j < arr2.length) {
                if (arr1[i] <= arr2[j]) {
                    currentValue = arr1[i++];
                } else {
                    currentValue = arr2[j++];
                }
            } else if (i < arr1.length) {
                currentValue = arr1[i++];
            } else { // if (j < n)
                currentValue = arr2[j++];
            }
        }

        if ((arr1.length + arr2.length) % 2 == 0) {
            return (double) (currentValue + previousValue) / 2D;
        }

        return (double) currentValue;
    }
}


//Optimal Approach

class Solution {
    public double findMedianSortedArrays(int[] arr1, int[] arr2) {
        if (arr1.length > arr2.length) {
            return findMedianSortedArrays(arr2, arr1); // ensuring that binary search happens on the smaller array
        }

        int low = 0, high = arr1.length;

        while (low <= high) {
            int elementsOnLeftOfPartitionInArr1 = low + (high - low) / 2;
            int elementsOnLeftOfPartitionInArr2 = (arr1.length + arr2.length + 1) / 2 - elementsOnLeftOfPartitionInArr1;

            int maxLeftArr1 = (elementsOnLeftOfPartitionInArr1 == 0) ? Integer.MIN_VALUE: arr1[elementsOnLeftOfPartitionInArr1 - 1];
            int maxLeftArr2 = (elementsOnLeftOfPartitionInArr2 == 0) ? Integer.MIN_VALUE: arr2[elementsOnLeftOfPartitionInArr2 - 1];
            int minRightArr1 = (elementsOnLeftOfPartitionInArr1 == arr1.length) ? Integer.MAX_VALUE: arr1[elementsOnLeftOfPartitionInArr1];
            int minRightArr2 = (elementsOnLeftOfPartitionInArr2 == arr2.length) ? Integer.MAX_VALUE: arr2[elementsOnLeftOfPartitionInArr2];

            if (maxLeftArr1 <= minRightArr2 && maxLeftArr2 <= minRightArr1) {
                if ((arr1.length + arr2.length) % 2 == 0) {
                    return (Math.max(maxLeftArr1, maxLeftArr2) + Math.min(minRightArr1, minRightArr2)) / 2.0;
                }
                return Math.max(maxLeftArr1, maxLeftArr2);

            } else if (maxLeftArr1 > minRightArr2) {
                high = elementsOnLeftOfPartitionInArr1 - 1;
            } else {
                low = elementsOnLeftOfPartitionInArr1 + 1;
            }
        }
        return -1;
    }
}
