//Optimal Approach

/*
 * We are tasked with finding the sum of minimums across all subarrays of a given array.
 * For each element in the array, we need to determine how many subarrays where that element 
 * is the minimum. The formula to compute this is based on the count of elements greater than 
 * the current element to the left and right (without breaking the sequence). Let's define:
 *
 * - Count of elements greater than arr[i] on the left side of arr[i] (without skipping any elements) as x.
 * - Count of elements greater than arr[i] on the right side of arr[i] (without skipping any elements) as y.
 *
 * The number of subarrays where arr[i] is the minimum can be computed as:
 *   (x + 1) * (y + 1)
 *
 * Where:
 * - (x + 1) is nothing but the next smaller element index of arr[i] on the left.
 * - (y + 1) is nothing but the next smaller element index of arr[i] on the right.
 *
 * The total sum of minimums across all subarrays will be:
 *   sum += arr[i] * ((x + 1) * (y + 1)) for each element arr[i] in the array.
 *
 * Example:
 * Consider the array: [7, 2, 4, 6, 3] 
 *   Initial sum = 0
 *
 * Total subarrays where 7 is the minimum:
 *   - Subarrays: [7]
 *   - Count: 1 (left greater count = 0 and right greater count = 0, i.e., (0+1)*(0+1) = 1)
 *   - sum += (7 * 1)
 *
 * Total subarrays where 2 is the minimum:
 *   - Subarrays: [7, 2], [2], [2, 4, 6, 3], [2, 4, 6], [2, 4], [7, 2, 4, 6, 3], [7, 2, 4, 6], [7, 2, 4]
 *   - Count: 8 (left greater count = 1 and right greater count = 3, i.e., (1+1)*(3+1) = 8)
 *   - sum += (2 * 8)
 *
 * Total subarrays where 4 is the minimum:
 *   - Subarrays: [4], [4, 6]
 *   - Count: 2 (left greater count = 0 and right greater count = 1, i.e., (0+1)*(1+1) = 2)
 *   - sum += (4 * 2)
 *
 * Total subarrays where 6 is the minimum:
 *   - Subarrays: [6]
 *   - Count: 1 (left greater count = 0 and right greater count = 0, i.e., (0+1)*(0+1) = 1)
 *   - sum += (6 * 1)
 *
 * Total subarrays where 3 is the minimum:
 *   - Subarrays: [4, 6, 3], [6, 3], [3]
 *   - Count: 3 (left greater count = 2 and right greater count = 0, i.e., (2+1)*(0+1) = 3)
 *   - sum += (3 * 3)
 *
 * Final Total Sum = 45
 */


