//Bruteforce Approach

class Solution{
    public static int closestToZero (int arr[], int n){
      int target=0,minDiff=Integer.MAX_VALUE,num1=arr[0],num2=arr[1],closestSum=arr[0]+arr[1];
  
      for(int i=0;i<n;i++)
        for(int j=i+1;j<n;j++)
        {
           int currSum=(arr[i]+arr[j]);
           int currDiff=Math.abs(target-currSum);
    
           if(currDiff<minDiff)
           {
              minDiff=currDiff;
              closestSum=currSum;
              num1=arr[i];
              num2=arr[j];
           }
           else if((currDiff==minDiff) && currSum>closestSum)
              closestSum=currSum;
           
           if(currSum==target)
           {
             closestSum=currSum;
             num1=arr[i];
             num2=arr[j];
             break;
           }
             
        }
        
      return closestSum;    
    }
}



//Optimal Approach

class Solution{
    public static int closestToZero (int arr[], int n){
      Arrays.sort(arr);
      int target=0, minDiff=Integer.MAX_VALUE,closestSum=arr[0]+arr[1],i=0,j=n-1;
      
      while(i<j)
      {
         int currSum=(arr[i]+arr[j]);
         int currDiff=Math.abs(target-currSum);
    
         if(currDiff<minDiff)
         {
           minDiff=currDiff;
           closestSum=currSum;
         }
         else if (currdiff == minDiff && currSum > closestSum)
           closestSum = currSum;
         
         if(currSum == target)
	       {
	         closestSum=target;
	         break;
	       }
	       else if(currSum<target)
           i++;
	       else //(currSum>target)
           j--;
      }
      
      return closestSum;
    }
}
