/*
 If given an array of size 'n' and asked to find all its permutations, we need to determine all possible ways of arranging the 
'n' elements in the array. Here, the order matters. Thus, if two containers contain the same elements in different orders, 
they form two distinct permutations.
*/

// Method 1

class Solution {
    public List<List<Integer>> permute(int[] arr) {
        List<List<Integer>> permutations = new ArrayList<>();
        findPermutations(arr, new ArrayList<>(), permutations, new boolean[arr.length]);
        return permutations;
    }

    private void findPermutations(int[] arr, List<Integer> currentPermutation, List<List<Integer>> permutations,boolean[] visited) {
        if (currentPermutation.size() == arr.length) {
            permutations.add(new ArrayList<>(currentPermutation));
            return;
        }

        for (int i = 0; i < arr.length; i++) {
            if (!visited[i]) {
                visited[i] = true;
                currentPermutation.add(arr[i]);
                findPermutations(arr, currentPermutation, permutations, visited);
                currentPermutation.remove(currentPermutation.size() - 1);
                visited[i] = false;
            }
        }
    }
}


//Method 2

class Solution {
    public List<List<Integer>> permute(int[] arr) {
        List<List<Integer>> permutations = new ArrayList<>();
        findPermutations(arr, 0, permutations);
        return permutations;
    }

    private void findPermutations(int[] arr, int index, List<List<Integer>> permutations) {
        if (index == arr.length) {
            List<Integer> currentPermutation = new ArrayList<>();
            for (int num : arr) {
                currentPermutation.add(num);
            }
            permutations.add(currentPermutation);
            return;
        }

        for (int i = index; i < arr.length; i++) {
            swap(arr, index, i);
            findPermutations(arr, index + 1, permutations);
            swap(arr, index, i);
        }
    }

    private void swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}
