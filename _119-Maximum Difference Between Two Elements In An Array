//Bruteforce Approach

class Solution{
  public static int maxDiff(int[] arr,int n){
	  int max=Integer.MIN_VALUE;
	  for(int i=0;i<n;i++)
	     for(int j=i+1;j<n;j++)
	       if(Math.abs(arr[i]-arr[j])>max)
	          max=Math.abs(arr[i]-arr[j]);

	  return max;
  }
}


//Better Approach

class Solution {  
  public static int maxDiff(int[] arr,int n){
	  int min=minimum(arr,n);
	  int max=maximum(arr,n);
	  return (max-min);
	}
	
	public static int maximum(int[] arr,int n)
	{
     int max=arr[0];
     for(int i=1;i<n;i++)
        if(arr[i]>max)
           max=arr[i];
     return max;
	}
	
	public static int minimum(int[] arr,int n)
	{
     int min=arr[0];
     for(int i=1;i<n;i++)
        if(arr[i]<min)
          min=arr[i];
      return min;
	}
}


//Optimal Approach

class Solution {
  public static int maxDiff(int[] arr,int n){
     int min=Integer.MAX_VALUE,max=Integer.MIN_VALUE;
     for(int i=0;i<n;i++)
     {
        if(arr[i]<min)
          min=arr[i];
        if(arr[i]>max)
          max=arr[i];  
     }

	  return (max-min);
	}
}
