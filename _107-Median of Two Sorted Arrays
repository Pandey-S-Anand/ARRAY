//Bruteforce Approach

class Solution {
    public double findMedianSortedArrays(int[] arr1, int[] arr2) {
	    int[]arr=mergeTwoSortedArrayIntoThirdSortedArray(arr1,arr2);
      int len=arr.length;

	    if((len%2)==0)
          return (double)(arr[(len-1)/2]+arr[len/2])/2D;
        else
          return (double)arr[len/2];
    }

    public int[] mergeTwoSortedArrayIntoThirdSortedArray(int[]arr1,int[]arr2)
	  {
			int m=arr1.length,n=arr2.length;
			int[]res=new int[m+n];
	    int i=0,j=0,k=0;

	    while(i<m && j<n)
	      if(arr1[i]<=arr2[j])
	        res[k++]=arr1[i++];
	      else
	        res[k++]=arr2[j++];
           
	    while(i<m)
	      res[k++]=arr1[i++];
	        
	    while(j<n)
	      res[k++]=arr2[j++];

			return res;
    }
} 


//Better Approach

class Solution {
    public double findMedianSortedArrays(int[] arr1, int[] arr2) {
      int i=0,j=0,k=0,m=arr1.length,n=arr2.length,len=m+n;
	    int[] arr=new int[len];
	   
      while(k<=(len/2))
        if(i<m && j<n)
        {
          if(arr1[i]<=arr2[j])
	           arr[k++]=arr1[i++];
	        else
	           arr[k++]=arr2[j++];  
        }
        else if(j<n)
	        arr[k++]=arr2[j++];
        else if(i<m)
	        arr[k++]=arr1[i++];
	
	    if(len%2!=0)
	      return (double)arr[k-1]; // return (double)arr[len/2];
	    else	      
        return (double)(arr[k-1]+arr[k-2])/2D; // return (double)(arr[len/2]+arr[(len-1)/2])/2D;
    }
} 

//Good Approach

class Solution {
    public double findMedianSortedArrays(int[] arr1, int[] arr2) {
      int i=0,j=0,m=arr1.length,n=arr2.length,len=m+n;
	    if((len%2)!=0)
      {
          int currVal=-1;
          for(int k=0;k<=(len/2);k++)
            if(i<m && j<n)
            {
                 if(arr1[i]<=arr2[j])
	                 currVal=arr1[i++];
	               else
	                 currVal=arr2[j++];  
            }
            else if(i<m)
	            currVal=arr1[i++];
	          else if(j<n)
	            currVal=arr2[j++];
        
         return (double)currVal; 
      }
      else
      {
          int currVal=-1,prevVal=-1;
          for(int k=0;k<=(len/2);k++)
	        {
	            prevVal=currVal;
              if(i<m && j<n)
              {
                if(arr1[i]<=arr2[j])
	               currVal=arr1[i++];
	              else
	               currVal=arr2[j++];  
              }
              else if(i<m)
	             currVal=arr1[i++];
	            else if(j<n)
	             currVal=arr2[j++];
	        }
            
        return (double)(currVal+prevVal)/2D;
	    }
    }
} 


//Optimal Approach

class Solution {
    public double findMedianSortedArrays(int[] arr1, int[] arr2) {
			  
        if(arr1.length>arr2.length)
           return findMedianSortedArrays(arr2,arr1); //ensuring that binary search happens on minimum size array
    
    
         int m=arr1.length,n=arr2.length,low=0,high=m;
         
         if((m+n)%2==0)
         {
            while(low<=high) 
            {
              int cut1 = (low+high)/2;
              int cut2 = ((m+n)/2)-cut1;
        
              int l1 = (cut1 == 0)? Integer.MIN_VALUE:arr1[cut1-1];
              int l2 = (cut2 == 0)? Integer.MIN_VALUE:arr2[cut2-1];
              int r1 = (cut1 == m)? Integer.MAX_VALUE:arr1[cut1];
              int r2 = (cut2 == n)? Integer.MAX_VALUE:arr2[cut2];
        
              if(l1<=r2 && l2<=r1)
                return (Math.max(l1,l2)+Math.min(r1,r2))/2.0;  
              else if(l1>r2)
                high = cut1-1;
              else if(l2>r1)
                low = cut1+1;
            }
         }
         else
         {
            while(low<=high) 
            {
              int cut1 = (low+high)/2;
              int cut2 = ((m+n+1)/2)-cut1;
        
              int l1 = (cut1 == 0)? Integer.MIN_VALUE:arr1[cut1-1];
              int l2 = (cut2 == 0)? Integer.MIN_VALUE:arr2[cut2-1];
              int r1 = (cut1 == m)? Integer.MAX_VALUE:arr1[cut1];
              int r2 = (cut2 == n)? Integer.MAX_VALUE:arr2[cut2];
        
              if(l1<=r2 && l2<=r1)
                return Math.max(l1,l2);
              else if(l1>r2)
                high = cut1-1;
              else if(l2>r1)
                low = cut1+1;
            } 
         }

				 return -1;
    }
} 
