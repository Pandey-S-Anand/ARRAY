//Iterartive Approach

//Method 1

//Naive Implementation

class Solution {
    public List<List<Integer>> combinationSum2(int[] arr, int targetSum) {
        Set<List<Integer>> uniqueSubsets = generateUniqueSubsets(arr);
        Iterator<List<Integer>> iterator = uniqueSubsets.iterator();

        while (iterator.hasNext()) {
            if (findSubsetSum(iterator.next()) != targetSum) {
                iterator.remove();
            }
        }

        return new ArrayList<>(uniqueSubsets);
    }

    private Set<List<Integer>> generateUniqueSubsets(int[] arr) {
        List<List<Integer>> tempList = new ArrayList<>();
        Set<List<Integer>> uniqueSubsets = new HashSet<>();
        uniqueSubsets.add(new ArrayList<>());

        Arrays.sort(arr);

        for (int i = 0; i < arr.length; i++) {
            for (List<Integer> subset : uniqueSubsets) {
                List<Integer> currentSubset = new ArrayList<>(subset);
                currentSubset.add(arr[i]);
                tempList.add(currentSubset);
            }

            uniqueSubsets.addAll(tempList);
            tempList.clear();
        }

        return uniqueSubsets;
    }

    private int findSubsetSum(List<Integer> subset) {
        int subsetSum = 0;
        for (int val : subset) {
            subsetSum += val;
        }
        return subsetSum;
    }
}


//Optimal Implementation

class Solution {
    public List<List<Integer>> combinationSum2(int[] arr, int targetSum) {
        Map<List<Integer>, Integer> uniqueSubsetsAndSumMap = new HashMap<>();
        List<List<Integer>> targetSumUniqueSubsets = new ArrayList<>();
        uniqueSubsetsAndSumMap.put(new ArrayList<>(), 0);
        Arrays.sort(arr);

        for (int i = 0; i < arr.length; i++) {
            List<Map.Entry<List<Integer>, Integer>> existingSubsetsAndSum = new ArrayList<>(uniqueSubsetsAndSumMap.entrySet());

            for (Map.Entry<List<Integer>, Integer> existingSubsetAndSum : existingSubsetsAndSum) {

                int currentSubsetSum = existingSubsetAndSum.getValue() + arr[i];

                if (currentSubsetSum <= targetSum) {
                    List<Integer> currentSubset = new ArrayList<>(existingSubsetAndSum.getKey());
                    currentSubset.add(arr[i]);

                    if (!uniqueSubsetsAndSumMap.containsKey(currentSubset) && currentSubsetSum == targetSum) {
                        targetSumUniqueSubsets.add(currentSubset);
                    }

                    if (currentSubsetSum <= targetSum) {
                        uniqueSubsetsAndSumMap.put(currentSubset, currentSubsetSum);
                    }
                }
            }
        }

        return targetSumUniqueSubsets;
    }
}


//Method 2

class Solution {
    public List<List<Integer>> combinationSum2(int[] arr, int target) {
        return findUniqueSubsetsWithTargetSum(arr, target);
    }

    private List<List<Integer>> findUniqueSubsetsWithTargetSum(int[] arr, int target) {
        Set<List<Integer>> targetSumUniqueSubsets = new HashSet<>();
        List<Integer> currentSubset = new ArrayList<>();
        int currentSubsetSum = 0, totalSubsets = 1 << arr.length;

        Arrays.sort(arr);

        for (int num = 0; num < totalSubsets; num++) {
            for (int i = 0; i < arr.length; i++) {
                if ((num & (1 << i)) != 0) {
                    currentSubset.add(arr[i]);
                    currentSubsetSum += arr[i];
                }
            }

            if (currentSubsetSum == target && !targetSumUniqueSubsets.contains(currentSubset)) {
                targetSumUniqueSubsets.add(new ArrayList<>(currentSubset));
            }

            currentSubset.clear();
            currentSubsetSum = 0;
        }

        return new ArrayList<>(targetSumUniqueSubsets);
    }
}


//Recursive Approach

//Method 1

//Naive Implementation 

class Solution {
    private List<List<Integer>> targetSumUniqueSubsets;

    public List<List<Integer>> combinationSum2(int[] arr, int targetSum) {
        targetSumUniqueSubsets = new ArrayList<>();
        Arrays.sort(arr);
        findUniqueSubsetsWithTargetSum(arr, 0, targetSum, new ArrayList<>());
        return targetSumUniqueSubsets;
    }

    private void findUniqueSubsetsWithTargetSum(int[] arr, int index, int targetSum, List<Integer> currentSubset) {
        if (targetSum == 0) {
            targetSumUniqueSubsets.add(new ArrayList<>(currentSubset));
            return;
        }

        if (targetSum < 0 || index == arr.length) {
            return;
        }

        currentSubset.add(arr[index]);
        findUniqueSubsetsWithTargetSum(arr, index + 1, targetSum - arr[index], currentSubset);
        currentSubset.remove(currentSubset.size() - 1);

        while (index + 1 < arr.length && arr[index] == arr[index + 1]) {
            index++;
        }

        findUniqueSubsetsWithTargetSum(arr, index + 1, targetSum, currentSubset);
    }
}


//Optimal Implementation

class Solution {
    private List<List<Integer>> targetSumUniqueSubsets;

    public List<List<Integer>> combinationSum2(int[] arr, int targetSum) {
        targetSumUniqueSubsets = new ArrayList<>();
        Arrays.sort(arr);
        findUniqueSubsetsWithTargetSum(arr, 0, targetSum, new ArrayList<>());
        return targetSumUniqueSubsets;
    }

    private void findUniqueSubsetsWithTargetSum(int[] arr, int index, int targetSum, List<Integer> currentSubset) {
        if (targetSum == 0) {
            targetSumUniqueSubsets.add(new ArrayList<>(currentSubset));
            return;
        }

        if (index == arr.length || arr[index] > targetSum) {
            return;
        }

        currentSubset.add(arr[index]);
        findUniqueSubsetsWithTargetSum(arr, index + 1, targetSum - arr[index], currentSubset);
        currentSubset.remove(currentSubset.size() - 1);

        while (index + 1 < arr.length && arr[index] == arr[index + 1]) {
            index++;
        }

        findUniqueSubsetsWithTargetSum(arr, index + 1, targetSum, currentSubset);
    }
}



//Method 2

//Naive Implementation

class Solution {
    private List<List<Integer>> targetSumUniqueSubsets;

    public List<List<Integer>> combinationSum2(int[] arr, int target) {
        targetSumUniqueSubsets = new ArrayList<>();
        Arrays.sort(arr);
        findUniqueSubsetsWithTargetSum(arr, 0, target, new ArrayList<>());
        return targetSumUniqueSubsets;
    }

    private void findUniqueSubsetsWithTargetSum(int[] arr, int index, int target, List<Integer> currentSubset) {
        if (target == 0) {
            targetSumUniqueSubsets.add(new ArrayList<>(currentSubset));
            return;
        }
        /*
         * Early Termination (target < 0): Since the array contains only positive
         * integers, once the target becomes negative during the recursive exploration, it will always remain
         * negative for that path. Hence, further exploration of that path won't yield a valid combination.
         */
        if (target < 0) {
            return;
        }

        for (int i = index; i < arr.length; i++) {
            if (i > index && arr[i] == arr[i - 1]) {
                continue;
            }

            currentSubset.add(arr[i]);
            findUniqueSubsetsWithTargetSum(arr, i + 1, target - arr[i], currentSubset);
            currentSubset.remove(currentSubset.size() - 1);
        }
    }
}


//Optimal Implementation

class Solution {
    private List<List<Integer>> targetSumUniqueSubsets;

    public List<List<Integer>> combinationSum2(int[] arr, int targetSum) {
        targetSumUniqueSubsets = new ArrayList<>();
        Arrays.sort(arr);
        findUniqueSubsetsWithTargetSum(arr, 0, targetSum, new ArrayList<>());
        return targetSumUniqueSubsets;
    }

    private void findUniqueSubsetsWithTargetSum(int[] arr, int index, int targetSum, List<Integer> currentSubset) {
        if (targetSum == 0) {
            targetSumUniqueSubsets.add(new ArrayList<>(currentSubset));
            return;
        }
        /*
         * Early Termination (target < 0): Since the array contains only positive integers,
         * once the target becomes negative during the recursive exploration, it will
         * always remain negative for that path. Hence, further exploration of that path won't 
         * yield a valid combination.
         */

        for (int i = index; i < arr.length; i++) {
            if (i > index && arr[i] == arr[i - 1]) {
                continue;
            }
            /*
             * Early Termination: Since the array is sorted and contains only positive
             * integers, if the current element is greater than the remaining target,
             * further elements will also be greater and can be skipped.
             */
            if (arr[i] > targetSum) {
                break;
            }

            currentSubset.add(arr[i]);
            findUniqueSubsetsWithTargetSum(arr, i + 1, targetSum - arr[i], currentSubset);
            currentSubset.remove(currentSubset.size() - 1);
        }
    }
}
