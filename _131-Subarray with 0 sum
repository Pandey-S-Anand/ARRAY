// Bruteforce Approach

class Solution{
    public static boolean findsum(int arr[],int n){
         int[] prefixSum=new int[n];
      
         for(int i=0;i<n;i++){
           if(i==0){
            prefixSum[i]=arr[i];
           }else{
            prefixSum[i]=prefixSum[i-1]+arr[i];
           }
         }
         
         int subarraySum=0;
         for(int start=0;start<n;start++){
           for(int end=start;end<n;end++){
             if(findSubarraySum(prefixSum,start,end)==0){
               return true;
             }
           }
         }
        
        return false;
    }

    private static int findSubarraySum(int[]prefixSum,int startIndex,int endIndex){
       if(startIndex==0){
        return prefixSum[endIndex];
       }

       return prefixSum[endIndex]-prefixSum[startIndex-1];
    }
}


//Better Approach

class Solution{
    public static boolean findsum(int arr[],int n){
       for(int start=0;start<n;start++){
         int subArraySum=0;
         for(int end=start;end<n;end++){
            subArraySum+=arr[end];
          
            if(subArraySum==0){
              return true;
            }
         }  
       }

      return false;
    }
}


//Optimal Approach

class Solution{
    static boolean findsum(int arr[],int n){
         Set<Integer>prefixSumSet=new HashSet<>();
         int prefixSum=0;
         
         for(int val:arr){
            prefixSum+=val;
        
            if(prefixSum==0){
              return true;
            }
          
            if(prefixSumSet.contains(prefixSum)){
                return true;
            }else{
                prefixSumSet.add(prefixSum);
            }
          }
      
      return false;
    }
}
