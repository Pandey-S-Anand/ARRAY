/*
You cannot hold multiple stocks at the same time. At the start, you are allowed to buy a stock because you currently do not own any.

On any given day when you have the option to buy, you have two choices:

Buy the stock: If you choose to buy on that day, you will not be able to buy again until you sell the stock you just acquired.
In this case, you should account for the purchase as a negative value (since profit is calculated as sell price minus buy price).
Not buy the stock: If you decide not to buy, you still retain the option to purchase the stock on a future day.

On any given day when you donot have the option to buy the stock(it means you already hold a stock.), In this situation, you also have two options:

Sell the stock: If you choose to sell on that day, you can then buy a stock again in the future.
You would add the selling price as a positive value (since profit is calculated as sell price minus buy price).
Not sell the stock: If you choose not to sell, you cannot buy any other stock until you sell the one you currently hold.


When we reach the end of the index, In this case, the maximum profit will be 0, as there are no more days left to make any trades.
*/

//Bruteforce Approach

class Solution {
    public int maxProfit(int[] prices) {
        return calculateMaxProfit(0, prices, true);
    }

    private int calculateMaxProfit(int currentIndex, int[] prices, boolean canBuy) {
        if (currentIndex == prices.length) {
            return 0;
        }

        if (canBuy) {
            int buyStock = -prices[currentIndex] + calculateMaxProfit(currentIndex + 1, prices, false);
            int skipBuy = calculateMaxProfit(currentIndex + 1, prices, true);
            return Math.max(buyStock, skipBuy);
        }

        int sellStock = prices[currentIndex] + calculateMaxProfit(currentIndex + 1, prices, true);
        int skipSell = calculateMaxProfit(currentIndex + 1, prices, false);
        return Math.max(sellStock, skipSell);
    }
}


//Better Approach

class Solution {
    private int[][] memo;

    public int maxProfit(int[] prices) {
        memo = new int[prices.length][2];
        initializeMemo();
        return calculateMaxProfit(0, prices, 1);
    }

    private int calculateMaxProfit(int index, int[] prices, int canBuy) {
        if (index == prices.length) {
            return 0;
        }

        if (memo[index][canBuy] != -1) {
            return memo[index][canBuy];
        }

        if (canBuy == 1) {
            int buyStock = -prices[index] + calculateMaxProfit(index + 1, prices, 0);
            int skipBuy = calculateMaxProfit(index + 1, prices, 1);
            return memo[index][canBuy] = Math.max(buyStock, skipBuy);
        }

        int sellStock = prices[index] + calculateMaxProfit(index + 1, prices, 1);
        int skipSell = calculateMaxProfit(index + 1, prices, 0);
        return memo[index][canBuy] = Math.max(sellStock, skipSell);
    }

    private void initializeMemo() {
        for (int i = 0; i < memo.length; i++) {
            Arrays.fill(memo[i], -1);
        }
    }
}


//Optimal Approach

//Naive Implementation 

class Solution {
    public int maxProfit(int[] prices) {
        int[][] dp = new int[prices.length][2];
        /*
         * On day 0, you have the option to buy stock:
         * 
         * If you buy the stock on day 0(or technically day 1), your profit will be
         * represented as: dp[0][1] = -prices[0]
         * This indicates that you incur a cost equal to the price of the stock,
         * resulting in a negative profit.
         *
         * If you choose not to buy the stock on day 0, your profit remains 0
         * i.e dp[0][0] = 0 This means you do not hold any stock, and therefore, you
         * have no profit.
         */
        dp[0][0] = 0;
        dp[0][1] = -prices[0];
        /*
         * In the context of the problem:
         * 
         * - If canBuy = 1, it means you are allowed to buy stock on that day. In this
         * case, you have two options:
         * 1. Buy the stock, which incurs a cost equal to the stock's price.
         * 2. Skip buying the stock, maintaining your current profit.
         * 
         * - If canBuy = 0, it means you are not allowed to buy stock on that day (i.e.,
         * you can only sell the stock). In this scenario, you also have two options:
         * 1. Sell the stock, which will increase your profit by the current stock price.
         * 2. Skip selling the stock, which means your profit remains the same as the
         *.    previous day.
         */

        for (int day = 1; day < prices.length; day++) {
            for (int canBuy = 0; canBuy <= 1; canBuy++) {
                int profit = 0;
                if (canBuy == 1) {
                    int buyStock = -prices[day] + dp[day - 1][0];
                    int skipBuy = dp[day - 1][1];
                    profit = Math.max(buyStock, skipBuy);
                } else {
                    int sellStock = prices[day] + dp[day - 1][1];
                    int skipSell = dp[day - 1][0];
                    profit = Math.max(sellStock, skipSell);
                }
                dp[day][canBuy] = profit;
            }
        }
         /*
         * The final return statement, dp[prices.length - 1][0], indicates the maximum
         * profit achievable on the last day when you do not hold any stock, meaning you
         * have sold any stock you owned. This is important because if you still hold
         * stock at the end of the last day, you cannot engage in any further
         * transactions, which would limit your potential profit.
         * By selling any stock you had by the conclusion of the trading period, you
         * ensure that your profit reflects all possible gains made throughout the
         * trading days.
         */

        return dp[prices.length - 1][0];
    }
}

//Optimal Implementation

class Solution {
    public int maxProfit(int[] prices) {
        int[][] dp = new int[prices.length][2];

        dp[0][0] = 0;
        dp[0][1] = -prices[0];

        for (int day = 1; day < prices.length; day++) {
            for (int canBuy = 0; canBuy <= 1; canBuy++) {
                if (canBuy == 1) {
                    dp[day][canBuy] = Math.max(-prices[day] + dp[day - 1][0], dp[day - 1][1]);
                } else {
                    dp[day][canBuy] = Math.max(prices[day] + dp[day - 1][1], dp[day - 1][0]);
                }
            }
        }

        return dp[prices.length - 1][0];
    }
}

//Aliter (space optimised)

class Solution {
    public int maxProfit(int[] prices) {
        int[] previousDay = new int[2];
        int[] currentDay = new int[2];

        previousDay[0] = 0;
        previousDay[1] = -prices[0];

        for (int day = 1; day < prices.length; day++) {
            for (int canBuy = 0; canBuy <= 1; canBuy++) {
                if (canBuy == 1) {
                    currentDay[canBuy] = Math.max(-prices[day] + previousDay[0], previousDay[1]);
                } else {
                    currentDay[canBuy] = Math.max(prices[day] + previousDay[1], previousDay[0]);
                }
            }
            int[] temp = currentDay;
            currentDay = previousDay;
            previousDay = temp;
        }

        return previousDay[0];
    }
}


//Aliter (further space optimised)

class Solution {
    public int maxProfit(int[] prices) {
        int prevDayCanBuy = -prices[0], prevDayCanNotBuy = 0, currDayCanBuy = 0, currDayCanNotBuy = 0;

        for (int day = 1; day < prices.length; day++) {
            for (int canBuy = 0; canBuy <= 1; canBuy++) {
                if (canBuy == 1) {
                    currDayCanBuy = Math.max(-prices[day] + prevDayCanNotBuy, prevDayCanBuy);
                } else {
                    currDayCanNotBuy = Math.max(prices[day] + prevDayCanBuy, prevDayCanNotBuy);
                }
            }
            prevDayCanBuy = currDayCanBuy;
            prevDayCanNotBuy = currDayCanNotBuy;
        }

        return prevDayCanNotBuy;
    }
}
