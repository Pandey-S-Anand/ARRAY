//Bruteforce Approach

class Solution {
    public int[] relativeSortArray(int[] arr1, int[] arr2) {
        int index = 0;
        Map<Integer, Integer> frequencyMap = new HashMap<>();

        for (int val : arr1) {
            frequencyMap.put(val, frequencyMap.getOrDefault(val, 0) + 1);
        }

        for (int val : arr2) {
            int frequency = frequencyMap.get(val);
            while (frequency != 0) {
                arr1[index++] = val;
                frequency--;
            }
            frequencyMap.remove(val);
        }

        int sortIndex = index;
        for (int key : frequencyMap.keySet()) {
            int frequency = frequencyMap.get(key);
            while (frequency != 0) {
                arr1[index++] = key;
                frequency--;
            }
        }

        Arrays.sort(arr1, sortIndex, arr1.length);

        return arr1;
    }
}


//Optimal Approach

class Solution {
    public int[] relativeSortArray(int[] arr1, int[] arr2) {
        int index = 0;
        Map<Integer, Integer> frequencyMap = new TreeMap<>();

        for (int val : arr1) {
            frequencyMap.put(val, frequencyMap.getOrDefault(val, 0) + 1);
        }

        for (int val : arr2) {
            int frequency = frequencyMap.get(val);
            while (frequency != 0) {
                arr1[index++] = val;
                frequency--;
            }
            frequencyMap.remove(val);
        }

        for (int key : frequencyMap.keySet()) {
            int frequency = frequencyMap.get(key);
            while (frequency != 0) {
                arr1[index++] = key;
                frequency--;
            }
        }

        return arr1;
    }
}
