/*
The process of writing a number as the product of prime numbers is prime factorization.
Prime numbers are the numbers that have only two factors, 1 and the number itself. For example, 2, 3, 5, 7, 11, 13, 17, 19, and so on are prime numbers.
*/

//Bruteforce Approach

class Solution {
    public int[] AllPrimeFactors(int num) {
        ArrayList<Integer> uniquePrimeFactors = new ArrayList<>();
        
        for (int i = 2; i <= num; i++) {
            if (num % i == 0) {
                uniquePrimeFactors.add(i);
                while (num % i == 0) {
                    num /= i;
                }
            }
        }

        int n=uniquePrimeFactors.size();
        int[] primeFactors = new int[n];

        for (int i = 0; i < n; i++) {
            primeFactors[i] = uniquePrimeFactors.get(i);
        }
        
        return primeFactors;
    }
}


//Better Approach

class Solution {
    public int[] AllPrimeFactors(int num) {
        ArrayList<Integer> uniquePrimeFactors = new ArrayList<>();
        
        for (int i = 2; i <= (num/2); i++) {
            if (num % i == 0) {
                uniquePrimeFactors.add(i);
                while (num % i == 0) {
                    num /= i;
                }
            }
        }
        
        if(num!=1){
           uniquePrimeFactors.add(num);
        }

        int n=uniquePrimeFactors.size();
        int[] primeFactors = new int[n];

        for (int i = 0; i < n; i++) {
            primeFactors[i] = uniquePrimeFactors.get(i);
        }
        
        return primeFactors;
    }
}


//Optimal Approach

class Solution {
    public int[] AllPrimeFactors(int num) {
        ArrayList<Integer> uniquePrimeFactors = new ArrayList<>();
        
        for (int i = 2; i <= Math.sqrt(num); i++) {
            if (num % i == 0) {
                uniquePrimeFactors.add(i);
                while (num % i == 0) {
                    num /= i;
                }
            }
        }
        
        if(num!=1){
           uniquePrimeFactors.add(num);
        }

        int n=uniquePrimeFactors.size();
        int[] primeFactors = new int[n];

        for (int i = 0; i < n; i++) {
            primeFactors[i] = uniquePrimeFactors.get(i);
        }
        
        return primeFactors;
    }
}

//Aliter

class Solution {
    public int[] AllPrimeFactors(int num) {
        ArrayList<Integer>primes= sieveOfEratosthenes(num);
        ArrayList<Integer> uniquePrimeFactors = new ArrayList<>();
        
        for(int prime : primes){
           if(num%prime==0){
             uniquePrimeFactors.add(prime);
            
             while ((num % prime)==0){
                num=num/prime;
             }
           }
        }
        
        int n=uniquePrimeFactors.size();
        int[] primeFactors = new int[n];
        
        for (int i = 0; i < n; i++) {
            primeFactors[i] = uniquePrimeFactors.get(i);
        }
        
        return primeFactors;
    }

    public ArrayList<Integer> sieveOfEratosthenes(int n) {
        ArrayList<Integer>primes = new ArrayList<>();
        
        if (n < 2){
          return primes;
        }

        boolean isPrime[] = new boolean[n + 1];
        Arrays.fill(isPrime,2,n+1,true);

        for (int num = 2; num <= (int) Math.sqrt(n); num++){
            if (isPrime[num] == true){
                for (int mark = (num * num); mark <= n; mark += num){
                    isPrime[mark] = false;
                }
            }
        }

        for (int i = 2; i <= n; i++){
            if (isPrime[i] == true){
                primes.add(i);
            }
        }

        return primes;
    }
}
