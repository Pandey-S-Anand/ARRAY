/*
The process of writing a number as the product of prime numbers is prime factorization.
Prime numbers are the numbers that have only two factors, 1 and the number itself. For example, 2, 3, 5, 7, 11, 13, 17, 19, and so on are prime numbers.
*/

//Bruteforce Approach

class Solution{
    public int[] AllPrimeFactors(int num){
        ArrayList<Integer>uniquePrimeFactors=new ArrayList<>();
	int cnt;
        for(int i=2;i<=num;i++)
        {
            cnt=0;
            while ((num % i) == 0)
            {
              cnt++;
              num=num/i;
            }
            
            if(cnt>=1)
               uniquePrimeFactors.add(i);
        }
        
        if(num!=1)
          uniquePrimeFactors.add(num);
          
        int[]res=new int[uniquePrimeFactors.size()];
        int idx = 0;
        
        for (int upf : uniquePrimeFactors)
          res[idx++] = upf;
        
        return res;
    }
}

//Better Approach

class Solution{
    public int[] AllPrimeFactors(int num){
        ArrayList<Integer>uniquePrimeFactors=new ArrayList<>();
	int cnt;
        for(int i=2;i<=(num/2);i++)
        {
            cnt=0;
            while ((num % i) == 0)
            {
              cnt++;
              num=num/i;
            }
            
            if(cnt>=1)
               uniquePrimeFactors.add(i);
        }
        
        if(num!=1)
          uniquePrimeFactors.add(num);
          
        int[]res=new int[uniquePrimeFactors.size()];
        int idx = 0;
        
        for (int upf : uniquePrimeFactors)
          res[idx++] = upf;
        

        return res;
    }
}


//Further Optimised Approach

class Solution{
    public int[] AllPrimeFactors(int num){
        ArrayList<Integer>uniquePrimeFactors=new ArrayList<>();
        int cnt;
        for(int i=2;i<=(int)Math.sqrt(num);i++)
        {
            cnt=0;
            while ((num % i) == 0)
            {
              cnt++;
              num=num/i;
            }
            
            if(cnt>=1)
               uniquePrimeFactors.add(i);
        }
        
        if(num!=1)
          uniquePrimeFactors.add(num);
          
        int[]res=new int[uniquePrimeFactors.size()];
        int idx = 0;
        
        for (int upf : uniquePrimeFactors)
          res[idx++] = upf;
        

        return res;
    }
}


//Optimal Approach

class Solution {
    public int[] AllPrimeFactors(int num) {
        ArrayList<Integer>prime= sieveOfEratosthenes(num);

        ArrayList<Integer> uniquePrimeFactors = new ArrayList<>();
        
        int cnt;
        for(int primeNum : prime)
        {
            cnt=0;
            while ((num % primeNum) == 0)
            {
                cnt++; 
                num=num/primeNum;
            }
            
            if(cnt>=1)
             uniquePrimeFactors.add(primeNum);
        }

        int[]res = new int[uniquePrimeFactors.size()];
        int idx = 0;
        
        for (int upf : uniquePrimeFactors)
          res[idx++] = upf;
        

        return res;
    }

    static ArrayList<Integer> sieveOfEratosthenes(int n) {
        ArrayList<Integer> res = new ArrayList<>();
        if (n < 2)
          return res;

        boolean isPrime[] = new boolean[n + 1];
        for (int i = 2; i <= n; i++)
            isPrime[i] = true;

        for (int num = 2; num <= (int) Math.sqrt(n); num++)
            if (isPrime[num] == true)
                for (int mark = (num * num); mark <= n; mark += num)
                    isPrime[mark] = false;

        for (int i = 2; i <= n; i++)
            if (isPrime[i] == true)
                res.add(i);

        return res;
    }
}
