//Bruteforce Approach

class Solution {
    public int singleNumber(int[] arr) {
      int n=arr.length,res=-1;
	    for(int i=0;i<n;i++)
	    {
	        int count=0;
	        for(int j=0;j<n;j++)
	           if(arr[i]==arr[j])
	              count++;
		      
	        if(count==1)
	        {
	           res=arr[i];
	           break;
	        }
	    }

	return res;
    }
}


//Better Approach

class Solution {
    public int singleNumber(int[] arr) {
       int n=arr.length,res=-1;
       HashMap<Integer,Integer>hm=new HashMap<>(n);
       for(int i=0;i<n;i++)
         if(hm.containsKey(arr[i]))
           hm.put(arr[i],hm.get(arr[i])+1);
         else
           hm.put(arr[i],1); 
         
       for(int i=0;i<n;i++)
         if(hm.get(arr[i])==1)
         {
             res=arr[i];
             break;
         }

       return res; 
    }
}


//Good Approach

class Solution {
    public int singleNumber(int[] arr) {
       int n=arr.length,res=-1,arrSum=0,UniqueSum=0;
       HashSet<Integer>hs=new HashSet<>(n);
       for(int i=0;i<n;i++)
       {
         hs.add(arr[i]);
         arrSum+=arr[i];
       }
         
       for(int val: hs)
         UniqueSum+=val; 
        
       res=(2*UniqueSum)-arrSum;
       return res;
    }
}


//Optimal Approach

class Solution {
    public int singleNumber(int[] arr) {
      int res=arr[0],n=arr.length;
      for(int i=1;i<n;i++)
         res=res^arr[i];
	       
      return res;
    }
}
