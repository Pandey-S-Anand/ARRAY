//Bruteforce Approach (Using array)

class Solution{
  public static ArrayList<Integer> prevSmall(ArrayList<Integer> arr, int n){
      ArrayList<Integer>res=new ArrayList<>();
      res.add(0,-1);
      for(int i=1;i<n;i++)
      {
	 res.add(i,-1);
         for(int j=i-1;j>=0;j--)
	   if(arr.get(j)<arr.get(i))
	   {
             res.add(i,arr.get(j));
	     break;
	   }
      }
	  
    return res;
  }
}

//Optimal Approach (Using Stack)

public class Solution{
   public static ArrayList<Integer> prevSmall(ArrayList<Integer> arr, int n){
      ArrayDeque<Integer> stack = new ArrayDeque<>();
      ArrayList<Integer> ans = new ArrayList<>();

      stack.push(arr.get(0));
      ans.add(-1);


      for(int i=1; i<n;i++)
      {
        while(!stack.isEmpty() && stack.peek() >=arr.get(i))
         stack.pop(); 
	 
        if(stack.isEmpty())
        {
          ans.add(-1);
          stack.push(arr.get(i));
        }
	else
	{
          ans.add(stack.peek());
          stack.push(arr.get(i));
        }
      }
   
     return ans;
   }
}
