//Method 1

class Solution {
    public int findDuplicate(int[] arr) {
        int repeating = -1;

        for (int i = 0; i < arr.length; i++) {
            for (int j = i + 1; j < arr.length; j++) {
                if (arr[i] == arr[j]) {
                    repeating = arr[i];
                    break;
                }
            }
        }
        return repeating;
    }
}


//Method 2

class Solution {
    public int findDuplicate(int[] arr) {
        int repeating = -1;
        Arrays.sort(arr);

        for (int i = 0; i < (arr.length - 1); i++) {
            if (arr[i] == arr[i + 1]) {
                repeating = arr[i];
                break;
            }
        }

        return repeating;
    }
}


//Method 3

class Solution {
    public int findDuplicate(int[] arr) {
        Set<Integer> unique = new HashSet<>();
        int repeated = -1;

        for (int num : arr) {
            if (unique.contains(num)) {
                repeated = num;
                break;
            }
            unique.add(num);
        }

        return repeated;
    }
}


//Method 4 

class Solution {
    public int findDuplicate(int[] arr) {
        int repeating = -1;
        boolean[] visited = new boolean[arr.length];

        for (int val : arr) {
            if (!visited[val]) {
                visited[val] = true;
            } else {
                repeating = val;
                break;
            }
        }

        return repeating;
    }
}


//Method 5

class Solution {
    public int findDuplicate(int[] arr) {
        int repeated = -1;

        for (int num : arr) {
            int value = Math.abs(num);

            if (arr[value] < 0) {
                repeated = value;
                break;
            }

            arr[value] *= -1;
        }

        return repeated;
    }
}


//Method 6 (Cyclic Sort)

class Solution {
    public int findDuplicate(int[] arr) {
        int i = 0;

        while (i < arr.length) {
            int correctIndex = arr[i] - 1;
            if (arr[correctIndex] == arr[i]) {
                i++;
            } else { // if arr[i] is not at its correct index
                swap(arr, i, correctIndex);
            }
        }

        return arr[arr.length - 1];
    }

    private void swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}


//Method 8 (Cycle Sort)

class Solution {
    public int findDuplicate(int[] arr) {
        int low = 1, high = arr.length - 1; // coz array consists of Elements in range [1,n] while size of array is n+1

        while (low < high) {
            int mid = low + (high - low) / 2;
            int count = 0;

            for (int val : arr) {
                if (val <= mid) {
                    count++;
                }
            }

            if (count > mid) {// Duplicate would be present in the range [low ,mid](both inclusive) so search space [low,mid]
                high = mid;
            } else { // if(count<=mid) => Duplicate is not present in the range [low ,mid](both inclusive) so search space [mid+1,high]
                low = mid + 1;
            }
        }

        return low; // or return high;
    }
}

/*
  int[] arr={1,3,4,2,2};
  

  Iteration 1:(low=1,high=4)
  
  mid=(1+4)/2=2;
  (count of numbers in array) <= mid(i.e 2) =3.
  
  (Had there been no duplicates in the array then "count of numbers in array <=2" would have been <= 2 but here exists more than 2 numbers in the array which are <=2 which means there lies/Exists a duplicate in the range (1,2)i.e(low,mid)(both inclusive) so our search space will be (1,2) i.e (low,mid))
  thus high=mid i.e high =2;
  i.e low=1 and high=2
  
  
  Iteration 2:(low=1 and high=2)
  
  mid=(1+2)/2=1;
  (count of numbers in array) <= mid(i.e 1) =1.
  
  (Had there been duplicates in the array then "count of numbers in array<=1" would have been more than 1,but here exists only 1 num. less <= 1 which means there Exists  no duplicate in the range (1,1) i.e(low,mid)(both inclusive) so our search space will be [2,2] i.e[mid+1,high]).
  
  thus low=mid+1 i.e low=2;
  
  i.e low=2 and high=2.
  
  
  Iteration 3:(low=2 and high=2)
  
   mid=(2+2)/2=2;
  (count of numbers in array) <= mid(i.e 2) =3
  
  
  (Had there been no duplicates in the array  then "count of numbers in array <=2" would have been <= 2 but here exists more than 2 numbers in the array which are <=2 which means there lies/Exists a duplicate in the range (2,2)i.e (low,mid)(both inclusive) so our search space will be (2,2)i.e (low,mid))
  thus high=mid i.e high =2;
  i.e low=2 and high=2.
  
  //Loop Terminates
  
  return low or high
  
*/


//Method 9 (Floyd Cycle Detection Algorithm) (T.C = O(n) , S.C = O(1) and Doesnot Modifies the Array)

class Solution {
    public int findDuplicate(int[] arr) {
        // The slow pointer moves 1 step while the fast pointer moves 2 steps at a time.
        // If they meet, then there is a cycle. The starting point of that cycle is the repeating number.
        
        int slowPointer = arr[0];
        int fastPointer = arr[arr[0]];
        
        // CYCLE DETECTION using Floyd's Cycle Detection algorithm
        while (slowPointer != fastPointer) {
            slowPointer = arr[slowPointer];
            fastPointer = arr[arr[fastPointer]];
        }
        
        // DETECTING THE STARTING POINT OF THE CYCLE
        // Reset one pointer to the beginning and move both pointers one step at a time.
        // They will meet at the starting point of the cycle, which is the repeating number.
        fastPointer = 0; // or slowPointer = 0
        while (slowPointer != fastPointer) {
            slowPointer = arr[slowPointer];
            fastPointer = arr[fastPointer];
        }
        
        return slowPointer; // both pointers meet at the starting point of the cycle
    }
}



/*
    letâ€™s take an example and dry run on it to understand.

       0   1   2   3   4   5   6   7   8   9
     | 2 | 5 | 9 | 6 | 9 | 3 | 8 | 9 | 7 | 1 |
  
     
       2 -- 9 -- 1 -- 5
            |         |
            |         3
            |         |
            7 -- 8 -- 6

  Initially, we have 2, then we go to the second index, we have 9, then we go to the 9th index, 
  we have 1, then we go to the 1st index, we again have 5, 
  then we go to the 5th index, we have 3, then we go to the 3rd index, 
  we get 6, then we go to the 6th index, we get 8, then we go to the 8th index, 
  we get 7, then we go to the 7th index and we get 9 and here cycle is formed.
*/
