//Bruteforce Approach

class Compute {
    public String isSubset( long arr1[], long arr2[], long m, long n) {
      HashMap<Long,Integer>hm1=new HashMap<>();
      for(int i=0;i<m;i++)
       if(hm1.containsKey(arr1[i]))
         hm1.put(arr1[i],hm1.get(arr1[i])+1);
       else 
         hm1.put(arr1[i],1);
         
      HashMap<Long,Integer>hm2=new HashMap<>();
      for(int i=0;i<n;i++)
       if(hm2.containsKey(arr2[i]))
         hm2.put(arr2[i],hm2.get(arr2[i])+1);
       else 
         hm2.put(arr2[i],1);
         
      for(long key : hm2.keySet())
      {
        if(hm1.containsKey(key))
        {
           if(hm2.get(key) > hm1.get(key))
             return "No";
        }
        else
          return "No";
      }
          
       return "Yes";
    }
}


//Better Approach

class Compute {
    public String isSubset( long arr1[], long arr2[], long m, long n) {
      HashMap<Long,Integer>hm=new HashMap<>();
      for(int i=0;i<m;i++)
       if(hm.containsKey(arr1[i]))
         hm.put(arr1[i],hm.get(arr1[i])+1);
       else 
         hm.put(arr1[i],1);
         
      for(int i=0;i<n;i++)
      {
        if(hm.containsKey(arr2[i]))
        {
           if(hm.get(arr2[i])==1)
             hm.remove(arr2[i]);
           else 
             hm.put(arr2[i],hm.get(arr2[i])-1);
         
           arr2[i]=-1;
        }
        else
          return "No";
      }
      
      for(int i=0;i<n;i++)
        if(arr2[i]!=-1)
        return "No";
          
       return "Yes";
    }
}



//Optimal Approach

class Compute {
    public String isSubset( long arr1[], long arr2[], long m, long n) {
        Arrays.sort(arr1);
        Arrays.sort(arr2);
        
        int i=0,j=0;
        while(i<m && j<n)
          if(arr2[j]==arr1[i])
          {
            i++;
            j++;
          }
          else if(arr2[j]>arr1[i])
             i++;
          else if(arr2[j]<arr1[i])
             return "No";
           
          if(j==n)
            return "Yes";
          else
            return "No";
    }
}
