class Solution {
    public int[] frequencySort(int[] arr) {
    int n=arr.length;

    HashMap<Integer,Integer> hm = new HashMap<>();
    for(int i=0;i<n;i++)
		  if(hm.containsKey(arr[i]))
			  hm.put(arr[i],hm.get(arr[i])+1);
			else
				 hm.put(arr[i],1); 
			    
    int[][] res = new int[hm.size()][2];
	
    int i=0;
	  for(int key:hm.keySet())
		{
        res[i][0] = key;
        res[i][1] = hm.get(key);
        i++;
    }

     Arrays.sort(res,new customSort());  
    
		 int idx=0;
    
     for(int k=0;k<res.length;k++)
		 {
			 int val=res[k][0];
       int freq=res[k][1];

			 while(freq!=0)
			 {
         arr[idx++]=val;
         freq--;
			 }
     }

      return arr; 
    }
}

//Sort 2D array according to frequency in ascending order if two frequencies are equal sort it according to array elements in descending order     

class customSort implements Comparator<int[]>{
  public int compare(int[]arr1,int[]arr2){
    if(arr1[1]<arr2[1])
		  return -1;
		else if (arr1[1]>arr2[1])
		  return 1;
		else if((arr1[1]==arr2[1]) && (arr1[0]<arr2[0]))
			return 1;
		else if((arr1[1]==arr2[1]) && (arr1[0]>arr2[0]))
			return -1;
		else //if((arr1[1]==arr2[1]) && (arr1[0]==arr2[0]))
			return 0;
	}
}

//Small entity appear before larger entity 
