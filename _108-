class Solution {
    public int[] frequencySort(int[] arr) {
    int n=arr.length;

    HashMap<Integer,Integer> hm = new HashMap<>();
    for(int i=0;i<n;i++)
		  if(hm.containsKey(arr[i]))
			  hm.put(arr[i],hm.get(arr[i])+1);
			else
				 hm.put(arr[i],1); 
			    
    int[][] res = new int[hm.size()][2];  //2d array which contains array elements in first column and frequency in second column
	
    int i=0;
	  for(int key:hm.keySet())
		{
        res[i][0] = key;
        res[i][1] = hm.get(key);
        i++;
    }

	   // Sort the 2D array according to 'key'(array elements) in descending order as per given in the question
     Arrays.sort(res,new keyDesc());
	
	   // Sort the 2D array according to 'value'(frequency of array elements) in descending order as per given in the question
     Arrays.sort(res,new valAsc());  
    
  	 int[] ans = new int[n];
		 int idx=0;
    
     for(int k=0;k<res.length;k++)
		 {
			 int val=res[k][0];
       int freq=res[k][1];

			 while(freq!=0)
			 {
         ans[idx++]=val;
         freq--;
			 }
     }

      return ans; 
    }
}

class keyDesc implements Comparator<int[]>{
  public int compare(int[]arr1,int[]arr2){
    if(arr1[0]<arr2[0])
		  return 1;
		else if (arr1[0]>arr2[0])
		  return -1;
		else
		  return 0;
	}
}

class valAsc implements Comparator<int[]>{
  public int compare(int[]arr1,int[]arr2){
    if(arr1[1]<arr2[1])
		  return -1;
		else if (arr1[1]>arr2[1])
		  return 1;
		else
		  return 0;
	}
}
