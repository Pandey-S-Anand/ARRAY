//Bruteforce Approach

class Solution{
   static int findSingle(int n, int arr[]){
      int result=-1;
      for(int i=0;i<n;i++){
         int count=0;
	 for(int j=0;j<n;j++){
	    if(arr[i]==arr[j]){
	       count++;
	    }
	 }
		      
	 if((count%2)!=0){
	    result=arr[i];
	    break;
	 }
      }
	    
     return result;
   }
}

//Better Approach

class Solution{
    static int findSingle(int n, int arr[]){
        Map<Integer,Integer>frequencyMap=new HashMap<>(n);
        int result=-1;
        
        for(int val:arr){
           frequencyMap.put(val,frequencyMap.getOrDefault(val,0)+1); 
        }
           
        for(int key:frequencyMap.keySet()){
          if((frequencyMap.get(key)%2)!=0)  {
            result=key; 
            break;
          }
        }
           
      return result;
    }
}


//Optimal Approach

class Solution{
    static int findSingle(int n, int arr[]){
      int result=arr[0];
      
      for(int i=1;i<n;i++){
        result=result^arr[i];
      }
	       
      return result;
    }
}
