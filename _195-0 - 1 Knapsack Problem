//Bruteforce Approach

class Solution {
    static int knapSack(int capacity, int[] weights, int[] values) {
        return findMaxValue(0, weights, values, capacity);
    }

    private static int findMaxValue(int index, int[] weights, int[] values, int remainingCapacity) {
        /*
         * Base Case 1: If the remaining capacity is 0, we cannot add any more items, so the maximum value obtainable is 0.
         * Base Case 2: If we have considered all items, there are no more items left to add, resulting in a value of 0.
         */
        if (remainingCapacity == 0 || index == weights.length) {
            return 0;
        }

        // Exclude the current item
        int exclude = findMaxValue(index + 1, weights, values, remainingCapacity);

        int include = Integer.MIN_VALUE;
        // Check if we can include the current item (only if its weight is less than or equal to the remaining capacity)
        if (weights[index] <= remainingCapacity) {
            // If we can include the current item, add its value
            include = values[index] + findMaxValue(index + 1, weights, values, remainingCapacity - weights[index]);
        }

        // Return the maximum of including or excluding the current item
        return Math.max(include, exclude);
    }
}


//Better Approach

class Solution {
    private static int[][] memo;

    static int knapSack(int capacity, int[] weights, int[] values) {
        memo = new int[weights.length][capacity + 1];
        intializeMemo();
        return findMaxValue(0, weights, values, capacity);
    }

    private static int findMaxValue(int index, int[] weights, int[] values, int remainingCapacity) {
        if (remainingCapacity == 0 || index == weights.length) {
            return 0;
        }

        if (memo[index][remainingCapacity] != -1) {
            return memo[index][remainingCapacity];
        }

        int exclude = findMaxValue(index + 1, weights, values, remainingCapacity);

        int include = Integer.MIN_VALUE;
        if (weights[index] <= remainingCapacity) {
            include = values[index] + findMaxValue(index + 1, weights, values, remainingCapacity - weights[index]);
        }

        return memo[index][remainingCapacity] = Math.max(include, exclude);
    }

    private static void intializeMemo() {
        for (int i = 0; i < memo.length; i++) {
            Arrays.fill(memo[i], -1);
        }
    }
}


//Optimal Approach

//Naive Implementation

class Solution {
    static int knapSack(int capacity, int[] weights, int[] values) {
        int[][] dp = new int[weights.length + 1][capacity + 1];

        //When no items are available to choose from, the maximum obtainable value is 0 for any capacity.
        for (int i = 0; i <= capacity; i++) {
            dp[0][i] = 0;
        }

        //No matter how many items are available, if the capacity is 0, the maximum obtainable value is 0 because no items can be included.
        for (int i = 1; i <= weights.length; i++) {
            dp[i][0] = 0;
        }

        for (int i = 1; i <= weights.length; i++) {
            for (int j = 1; j <= capacity; j++) {
                int exclude = dp[i - 1][j];
                int include = Integer.MIN_VALUE;
                if (weights[i - 1] <= j) {
                    include = values[i - 1] + dp[i - 1][j - weights[i - 1]];
                }
                dp[i][j] = Math.max(include, exclude);
            }
        }

        return dp[weights.length][capacity];
    }
}

//Optimal Implementation

class Solution {
    static int knapSack(int capacity, int[] weights, int[] values) {
        int[][]dp=new int[weights.length+1][capacity+1];

        for(int i=1;i<=weights.length;i++){
            for(int j=1;j<=capacity;j++){
               dp[i][j] = dp[i-1][j];
               if(weights[i-1]<=j){
                   dp[i][j]=Math.max(dp[i][j],values[i-1]+dp[i-1][j-weights[i-1]]);
               }
            }
        }
        
        return dp[weights.length][capacity];
    }
}


//Aliter (space optimised)

class Solution {
    static int knapSack(int capacity, int[] weights, int[] values) {
        int[] previousRow = new int[capacity + 1];
        int[] currentRow = new int[capacity + 1];

        for (int i = 1; i <= weights.length; i++) {
            for (int j = 1; j <= capacity; j++) {
                currentRow[j] = previousRow[j];
                if (weights[i - 1] <= j) {
                    currentRow[j] = Math.max(currentRow[j], values[i - 1] + previousRow[j - weights[i - 1]]);
                }
            }

            int[] temp = currentRow;
            currentRow = previousRow;
            previousRow = temp;
        }

        return previousRow[capacity];
    }
}

//Aliter (Further space optimised)

class Solution {
    static int knapSack(int capacity, int[] weights, int[] values) {
        int[] previousRow=new int[capacity+1];

        for(int i=1;i<=weights.length;i++){
            for(int j=capacity;j>=1;j--){
               if(weights[i-1]<=j){
                   previousRow[j]=Math.max(previousRow[j],values[i-1]+previousRow[j-weights[i-1]]);
               }
            }
        }
        
        return previousRow[capacity];
    }
}
