//Method 1

class Solution{
   public static int findOnlyRepeated(int arr[]){
      int repeating=-1;
      for(int i=0;i<arr.length;i++){
      	for(int j=i+1;j<arr.length;j++){
	   if(arr[i]==arr[j]){
	      repeating=arr[i];
	      break;
	   }
      	}
      }
      return repeating;
   }
}


//Method 2

class Solution{
   public static int findOnlyRepeated(int arr[]){
      int repeating=-1;
      Arrays.sort(arr);
      
      for(int i=0;i<(arr.length-1);i++){
	 if(arr[i]==arr[i+1]){
	    repeating=arr[i];
	    break;
	 }
      }

      return repeating;
   }
}


//Method 3

class Solution {
   public static int findOnlyRepeated(int arr[]){
       int repeating=-1;
       Map<Integer,Integer>frequencyMap=new HashMap<>(arr.length);
       
       for(int val:arr){
          frequencyMap.put(val,frequencyMap.getOrDefault(val,0)+1);
       }
       
       for(int key:frequencyMap.keySet()){
          if(frequencyMap.get(key)==2){
             repeating=key;
             break;
          }
       }

       return repeating;   
   }
}


//Method 4

class Solution {
    public static int findOnlyRepeated(int[] arr) {
      int repeating=-1;
      boolean[] visited=new boolean[arr.length];

      for(int val:arr){
         if(!visited[val]){
           visited[val]=true;
         }else{
           repeating=val;
           break;
         }
      }

      return repeating;
    }
}

//Method 5

class Solution {
    public static int findOnlyRepeated(int[] arr) {
      int repeated=-1;
      for(int i=0;i<arr.length;i++){
         int ele=Math.abs(arr[i]);
         
         if(arr[ele]<0){
           repeated=ele;
           break;
         }
         
        arr[ele]*=-1;
      }
      
      return repeated;  
    }
}


//Method 6

class Solution {
    public static int findOnlyRepeated(int[] arr) {
      Set<Integer>set=new HashSet<>();
      int repeated=-1;
        
      for(int val:arr){
         if(set.contains(val)){
           repeated=val;
           break;
         }
         set.add(val);
      }
      
      return repeated;
    }
}

//Method 7

class Solution {
    public static int findOnlyRepeated(int[] arr) {
      Set<Integer>set=new HashSet<>();
      int arrSum=0,uniqueSum=0;
      
      for(int val:arr){
         if(!set.contains(val)){
           uniqueSum+=val;
         }
         arrSum+=val;
         set.add(val);
      }
      
      return arrSum-uniqueSum;
    }
}


//Method 8

class Solution{
  public static int findOnlyRepeated(int[] arr) {
     int arrSum=0,uniqueSum=((arr.length-1)*((arr.length-1)+1))/2;//sum of first (n-1) Natural Numbers
       
     for(int val:arr){
        arrSum+=val;
     }
         
     return arrSum-uniqueSum;
  }
}


//Method 9

class Solution{
    public static int findOnlyRepeated(int[] arr) {
        int xor1=0,xor2=arr[0];

        for(int num=1;num<=(arr.length-1);num++){
           xor1=xor1^num;
        }
           
        for(int i=1;i<arr.length;i++){
           xor2=xor2^arr[i];
        }
           
        return xor1^xor2;
    }
}


//Method 10 : (Cycle Sort)

class Solution {
    public static int findDuplicate(int arr[]){
        int n=arr.length,i=0,res=-1;
        while(i<n)
        {
           int correctIndex=arr[i]-1;
           if (arr[correctIndex]==arr[i])
	      i++;
	   else //if arr[i] is not at its correct index
           {
             int temp=arr[correctIndex];
             arr[correctIndex]=arr[i];
             arr[i]=temp;
           }      
        }  
	
        for(int j=0; j<n; j++) 
           if(arr[j]!=j+1)
           {
             res=arr[j];
             break;
           }
	   
	return res;  
    }
}

//Aliter Implementation

class Solution {
    public static int findDuplicate(int arr[]){
        int n=arr.length,i=0;
        while(i<n)
        {
           int correctIndex=arr[i]-1;
           if (arr[correctIndex]==arr[i])
	      i++;
	   else //if arr[i] is not at its correct index
           {
             int temp=arr[correctIndex];
             arr[correctIndex]=arr[i];
             arr[i]=temp;
           }      
        }  
        
	return arr[n-1];
    }
}

/*
 Ex-1:
 
 int[] arr={1,3,4,2,2};
 
 Iteration 1 :(i==0)
 arr[0]=1;
 correctIndexOf 1 in a sorted Array =0;
 clearly 1 is at its Correct index i.e 0
 so i++;
 
 Iteration 2 :(i==1)
 arr[1]=3;
 correctIndexOf 3 in a sorted Array =2;
 clearly 3 is not at its Correct index
 so Swap(arr[1],arr[2]);
 
 Resultant Array :
 arr={1,4,3,2,2};
 
 Now 3 is at its Correct Index.i.e 2
 
 
 Iteration 3 :(i==1)
 arr[1]=4;
 correctIndexOf 4 in a sorted Array =3;
 clearly 4 is not at its Correct index
 so Swap(arr[1],arr[3]);
 
 Resultant Array :
 arr={1,2,3,4,2};
 
 Now 4 is at its Correct Index.i.e 3
 
 
 Iteration 4 :(i==1)
 arr[1]=2;
 correctIndexOf 2 in a sorted Array = 1;
 clearly 2 is at its Correct index i.e 1
 so i++;
 
 
 Iteration 5 :(i==2)
 arr[2]=3;
 correctIndexOf 3 in a sorted Array = 2;
 clearly 3 is at its Correct index i.e 2
 so i++;
 
 
 Iteration 6 :(i==3)
 arr[3]=4;
 correctIndexOf 4 in a sorted Array = 3;
 clearly 4 is at its Correct index i.e 3
 so i++;
 
 Iteration 7 :(i==4)
 arr[4]=2;
 correctIndexOf 2 in a sorted Array = 1;
 clearly 2 is at its Correct index i.e 1
 so i++;
 
 //Loop terminates
 
 final Arrray:
 int[] arr={1,2,3,4,2};
 
 now print the element which is not at its correct index i.e arr[i]!=i+1
 Thus the Duplicate number is 2(at index 4).
 

 Ex-2
  
 int[] arr={1,3,2,4,2,2};
 
 Iteration 1 :(i==0)
 arr[0]=1;
 correctIndexOf 1 in a sorted Array =0;
 clearly 1 is at its Correct index i.e 0
 so i++;
 
 Iteration 2 :(i==1)
 arr[1]=3;
 correctIndexOf 3 in a sorted Array =2;
 clearly 3 is not at its Correct index
 so Swap(arr[1],arr[2]);
 
 Resultant Array :
 arr={1,2,3,4,2,2};
 
 Now 3 is at its Correct Index.i.e 2
 
 
 Iteration 3 :(i==1)
 arr[1]=2;
 correctIndexOf 2 in a sorted Array =1;
 clearly 2 is at its Correct index i.e 1
 so i++
 
 
 Iteration 4 :(i==2)
 arr[2]=3;
 correctIndexOf 3 in a sorted Array = 2;
 clearly 3 is at its Correct index i.e 2
 so i++;
 
 
 Iteration 5 :(i==3)
 arr[3]=4;
 correctIndexOf 4 in a sorted Array = 3;
 clearly 4 is at its Correct index i.e 3
 so i++;
 
 
 Iteration 6 :(i==4)
 arr[4]=2;
 correctIndexOf 2 in a sorted Array = 1;
 clearly 2 is at its Correct index
 so i++;


 Iteration 7 :(i==5)
 arr[5]=2;
 correctIndexOf 2 in a sorted Array = 1;
 clearly 2 is at its Correct index.
 so i++;
 
 //Loop terminates
 
 final Arrray:
 int[] arr=arr={1,2,3,4,2,2};
 
 now print the element which is not at its correct index i.e arr[i]!=i+1
 Thus the Duplicate number is 2(at index 4 or 5).
  
  
 /*Optimisation
 In other words all the distinct elements will occupy their correct index while remaining duplicate instances will occupy the remaining indexes,
 so this gurantees that last index will always carry duplicate number.
 */
   
*/


//Method 11

class Solution {
    public int findDuplicate(int[] arr) {
      int low = 1,high = arr.length - 1; //coz array consists of Elements in range [1,n] while size of array is n+1

      while (low < high)
      {
	 int mid = (low + high) / 2;
    	 int count = 0;
         for(int val:arr)
	   if (val <= mid)
              count++;

	 if (count > mid)//Duplicate would be present in the range [low ,mid](both inclusive) so search space [low,mid]
           high=mid;
         else //if(count<=mid) => Duplicate is not present in the range [low ,mid](both inclusive) so search space [mid+1,high]
	   low=mid + 1;
      }

      return low; // or return high;
    }
}

/*
  int[] arr={1,3,4,2,2};
  

  Iteration 1:(low=1,high=4)
  
  mid=(1+4)/2=2;
  (count of numbers in array) <= mid(i.e 2) =3.
  
  (Had there been no duplicates in the array then "count of numbers in array <=2" would have been <= 2 but here exists more than 2 numbers in the array which are <=2 which means there lies/Exists a duplicate in the range (1,2)i.e(low,mid)(both inclusive) so our search space will be (1,2) i.e (low,mid))
  thus high=mid i.e high =2;
  i.e low=1 and high=2
  
  
  Iteration 2:(low=1 and high=2)
  
  mid=(1+2)/2=1;
  (count of numbers in array) <= mid(i.e 1) =1.
  
  (Had there been duplicates in the array then "count of numbers in array<=1" would have been more than 1,but here exists only 1 num. less <= 1 which means there Exists  no duplicate in the range (1,1) i.e(low,mid)(both inclusive) so our search space will be [2,2] i.e[mid+1,high]).
  
  thus low=mid+1 i.e low=2;
  
  i.e low=2 and high=2.
  
  
  Iteration 3:(low=2 and high=2)
  
   mid=(2+2)/2=2;
  (count of numbers in array) <= mid(i.e 2) =3
  
  
  (Had there been no duplicates in the array  then "count of numbers in array <=2" would have been <= 2 but here exists more than 2 numbers in the array which are <=2 which means there lies/Exists a duplicate in the range (2,2)i.e (low,mid)(both inclusive) so our search space will be (2,2)i.e (low,mid))
  thus high=mid i.e high =2;
  i.e low=2 and high=2.
  
  //Loop Terminates
  
  return low or high
  
*/


//Method 12

class Solution {
    public int findDuplicate(int[] arr) {
       
        //Slow ptr moves 1 step while fast ptr moves 2 steps at a time.
       //if they meet then there is a cycle.
      //the starting point of that cycle is the no. which is repeating.
	
        int slow = arr[0];
        int fast =arr[arr[0]];
	
        //DETECTING CYCLE -> use floyd's cycle detection 
        while(slow != fast)
        {
           slow=arr[slow];
           fast=arr[arr[fast]];
        }
        
	      //DETECTING STARTING POINT OF THE CYCLE
        //reset slow or fast anyone and then move both by 1 step,Wherever They meet is the starting Point of the Cycle.
        fast = 0; // or slow=0
        while(slow!=fast)
        {
            slow=arr[slow];
            fast=arr[fast];
        }
        
        return slow;// return fast; //both are pointing at starting pt of cycle
    }
}


/*

// letâ€™s take an example and dry run on it to understand.

//     0   1   2   3   4   5   6   7   8   9
//   | 2 | 5 | 9 | 6 | 9 | 3 | 8 | 9 | 7 | 1 |
//  
//     
//     2 -- 9 -- 1 -- 5
//          |         |
//          |         3
//          |         |
//          7 -- 8 -- 6

// Initially, we have 2, then we go to the second index, we have 9, then we go to the 9th index, 
//we have 1, then we go to the 1st index, we again have 5, 
//then we go to the 5th index, we have 3, then we go to the 3rd index, 
//we get 6, then we go to the 6th index, we get 8, then we go to the 8th index, 
//we get 7, then we go to the 7th index and we get 9 and here cycle is formed.


*/
