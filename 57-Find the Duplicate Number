//Method 1

class Solution {
    public int findDuplicate(int[] arr) {
      int n=arr.length,repeated=-1;
      for(int i=0;i<n;i++)
        for(int j=i+1;j<n;j++)
           if(arr[i]==arr[j])
           {
             repeated=arr[i];
             break;
           }
            
      return repeated;
    }
}


//Method 2

class Solution {
    public int findDuplicate(int[] arr) {
      Arrays.sort(arr);
      int n=arr.length,repeated=-1;
      for(int i=0;i<n-1;i++)
         if(arr[i]==arr[i+1])
         {
            repeated=arr[i];
            break;
         }   
         
      return repeated;
    }
}


//Method 3

class Solution {
    public int findDuplicate(int[] arr) {
      HashMap<Integer,Integer>hm=new HashMap<>();
      int n=arr.length,res=-1;
        
      for(int i=0;i<n;i++)
       if(hm.containsKey(arr[i]))
         hm.put(arr[i],hm.get(arr[i])+1);
       else
         hm.put(arr[i],1);
        
       for(int key:hm.keySet())
          if(hm.get(key)>=2)
          {
            res=key;
            break;
          }
        
       return res;
    }
}


//Method 4 

class Solution {
    public int findDuplicate(int[] arr) {
      int n=arr.length,repeating=-1;
      boolean[] visited=new boolean[n];
	    
      for(int i=0;i<n;i++)
         if(visited[arr[i]]==true)
         {
           repeating=arr[i];
           break;
         }
         else
           visited[arr[i]]=true;
         
      return repeating;
    }
}


//Method 5

class Solution {
    public int findDuplicate(int[] arr) {
      int n=arr.length,repeated=-1;
      for(int i=0;i<n;i++)
      {
         int ele=Math.abs(arr[i]);
	 
         if(arr[ele]<0)
         {
           repeated=ele;
           break;
         }
         
	arr[ele]*=-1;
      }
      
      return repeated;  
    }
}


//Method 6

class Solution {
    public int findDuplicate(int[] arr) {
      HashSet<Integer>hs=new HashSet<>();
      int n=arr.length,repeated=-1;
        
      for(int i=0;i<n;i++)
       if(hs.contains(arr[i]))
       {
          repeated=arr[i];
          break;
       }
       else
         hs.add(arr[i]);
        
       return repeated;
    }
}


//Method 7 (Cyclic Sort)

class Solution {
    public int findDuplicate(int[] arr) {
       int n=arr.length,i=0;
       while(i<n)
       {
          int correctIndex=arr[i]-1;
          if(arr[correctIndex]==arr[i])
            i++;
          else
          {
            int temp=arr[i];
            arr[i]=arr[correctIndex];
            arr[correctIndex]=temp;
          }
       }

       return arr[n-1];
    }
}


//Method 8

class Solution {
    public int findDuplicate(int[] arr) {
      int low = 1,high = arr.length - 1; //coz array consists of Elements in range [1,n] while size of array is n+1

      while (low < high)
      {
	      int mid = (low + high) / 2;
    	  int count = 0;
        for(int val:arr)
	        if (val <= mid)
            count++;

	      if (count > mid)//Duplicate would be present in the range [low ,mid](both inclusive) so search space [low,mid]
          high=mid;
        else //if(count<=mid) => Duplicate is not present in the range [low ,mid](both inclusive) so search space [mid+1 high]
	        low=mid + 1;
      }

      return low; // or return high;
    }
}

/*
  int[] arr={1,3,4,2,2};
  

  Iteration 1:(low=1,high=4)
  
  mid=(1+4)/2=2;
  (count of numbers in array) <= mid(i.e 2) =3.
  
  (Had there been no duplicates in the array then "count of numbers in array <=2" would have been <= 2 but here exists more than 2 numbers in the array which are <=2 which means there lies/Exists a duplicate in the range (1,2)i.e(low,mid)(both inclusive) so our search space will be (1,2) i.e (low,mid))
  thus high=mid i.e high =2;
  i.e low=1 and high=2
  
  
  Iteration 2:(low=1 and high=2)
  
  mid=(1+2)/2=1;
  (count of numbers in array) <= mid(i.e 1) =1.
  
  (Had there been duplicates in the array then "count of numbers in array<=1" would have been more than 1,but here exists only 1 num. less <= 1 which means there Exists  no duplicate in the range (1,1) i.e(low,mid)(both inclusive) so our search space will be [2,2] i.e[mid+1,high]).
  
  thus low=mid+1 i.e low=2;
  
  i.e low=2 and high=2.
  
  
  Iteration 3:(low=2 and high=2)
  
   mid=(2+2)/2=2;
  (count of numbers in array) <= mid(i.e 2) =3
  
  
  (Had there been no duplicates in the array  then "count of numbers in array <=2" would have been <= 2 but here exists more than 2 numbers in the array which are <=2 which means there lies/Exists a duplicate in the range (2,2)i.e (low,mid)(both inclusive) so our search space will be (2,2)i.e (low,mid))
  thus high=mid i.e high =2;
  i.e low=2 and high=2.
  
  //Loop Terminates
  
  return low or high
  
*/


//Method 9 (Floyd Cycle Detection Algorithm) (T.C = O(n) , S.C = O(1) and Doesnot Modifies the Array)

class Solution {
    public int findDuplicate(int[] arr) {
       
        //Slow ptr moves 1 step while fast ptr moves 2 steps at a time.
       //if they meet then there is a cycle.
      //the starting point of that cycle is the no. which is repeating.
	
        int slow = arr[0];
        int fast =arr[arr[0]];
	
        //DETECTING CYCLE -> use floyd's cycle detection 
        while(slow != fast)
        {
           slow=arr[slow];
           fast=arr[arr[fast]];
        }
        
	      //DETECTING STARTING POINT OF THE CYCLE
        //reset slow or fast anyone and then move both by 1 step,Wherever They meet is the starting Point of the Cycle.
        fast = 0; // or slow=0
        while(slow!=fast)
        {
            slow=arr[slow];
            fast=arr[fast];
        }
        
        return slow;// return fast; //both are pointing at starting pt of cycle
    }
}


/*

// letâ€™s take an example and dry run on it to understand.

//     0   1   2   3   4   5   6   7   8   9
//   | 2 | 5 | 9 | 6 | 9 | 3 | 8 | 9 | 7 | 1 |
//  
//     
//     2 -- 9 -- 1 -- 5
//          |         |
//          |         3
//          |         |
//          7 -- 8 -- 6

// Initially, we have 2, then we go to the second index, we have 9, then we go to the 9th index, 
//we have 1, then we go to the 1st index, we again have 5, 
//then we go to the 5th index, we have 3, then we go to the 3rd index, 
//we get 6, then we go to the 6th index, we get 8, then we go to the 8th index, 
//we get 7, then we go to the 7th index and we get 9 and here cycle is formed.


*/
