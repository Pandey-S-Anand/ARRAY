//Bruteforce Approach

class Solution {
    public int majorityElement(int[] arr) {
        for (int i = 0; i < arr.length; i++) {
            int count = 1;
            for (int j = i + 1; j < arr.length; j++) {
                if (arr[i] == arr[j]) {
                    count++;
                }
            }

            if (count > (arr.length / 2)) {
                return arr[i];
            }
        }

        return -1;
    }
}


//Improved Approach

class Solution {
    public int majorityElement(int[] arr) {
        Arrays.sort(arr);
        //Since the array is guaranteed to contain the majority element, so it will definitely occupy the middle index i.e N / 2.
        return arr[arr.length / 2];
    }
}


//Good Approach

class Solution {
    public int majorityElement(int[] arr) {
        Map<Integer, Integer> frequencyMap = new HashMap<>();

        for (int val : arr) {
            frequencyMap.put(val, frequencyMap.getOrDefault(val, 0) + 1);
        }

        for (int val : frequencyMap.keySet()) {
            if (frequencyMap.get(val) > (arr.length / 2)) {
                return val;
            }
        }
        // This return statement will never be reached as majority element always exists in the array.
        return -1;
    }
}


//Better Approach

class Solution {
    public int majorityElement(int[] arr) {
        Map<Integer, Integer> frequencyMap = new HashMap<>();

        for (int val : arr) {
            frequencyMap.put(val, frequencyMap.getOrDefault(val, 0) + 1);
            if (frequencyMap.get(val) > (arr.length / 2)) {
                return val;
            }
        }

        // This return statement will never be reached as majority element always exists in the array.
        return -1;
    }
}



//Optimal Approach (Boyer-Moore Voting Algorithm)

class Solution {
    public int majorityElement(int[] arr) {
        int majorityCandidate = arr[0];
        int voteCount = 1;
        
        for (int i = 1; i < arr.length; i++) {
            if (voteCount == 0) {
                majorityCandidate = arr[i];
                voteCount = 1;
            } else if (arr[i] == majorityCandidate) {
                voteCount++;
            } else {
                voteCount--;
            }
        }
        /*
         * Since it is given that majority element always exist in the array, so we are
         * not required to check if the majorityCandidate is actually the majority element
         */
        return majorityCandidate;
    }
}
